class joint_fn(torch.nn.Module):
    def forward(self, primals, tangents):
        primals_1: "f32[s1, 384][384, 1]cuda:0"; primals_2: "i64[257][1]cuda:0"; primals_3: "f32[s3, 0][1, 1]cuda:0"; primals_4: "f32[s4, 0][1, 1]cuda:0"; primals_5: "Sym(s0)"; primals_6: "f32[384][1]cuda:0"; primals_7: "f32[1152, 384][384, 1]cuda:0"; primals_8: "f32[384, 384][384, 1]cuda:0"; primals_9: "f32[384][1]cuda:0"; primals_10: "f32[1024, 384][384, 1]cuda:0"; primals_11: "f32[384, 1024][1024, 1]cuda:0"; primals_12: "f32[384][1]cuda:0"; primals_13: "f32[1152, 384][384, 1]cuda:0"; primals_14: "f32[384, 384][384, 1]cuda:0"; primals_15: "f32[384][1]cuda:0"; primals_16: "f32[1024, 384][384, 1]cuda:0"; primals_17: "f32[384, 1024][1024, 1]cuda:0"; primals_18: "f32[384][1]cuda:0"; primals_19: "f32[1152, 384][384, 1]cuda:0"; primals_20: "f32[384, 384][384, 1]cuda:0"; primals_21: "f32[384][1]cuda:0"; primals_22: "f32[1024, 384][384, 1]cuda:0"; primals_23: "f32[384, 1024][1024, 1]cuda:0"; primals_24: "f32[384][1]cuda:0"; primals_25: "f32[1152, 384][384, 1]cuda:0"; primals_26: "f32[384, 384][384, 1]cuda:0"; primals_27: "f32[384][1]cuda:0"; primals_28: "f32[1024, 384][384, 1]cuda:0"; primals_29: "f32[384, 1024][1024, 1]cuda:0"; primals_30: "f32[s6, 384][384, 1]cuda:0"; primals_31: "i64[257][1]cuda:0"; primals_32: "f32[s8, 0][1, 1]cuda:0"; primals_33: "f32[s9, 0][1, 1]cuda:0"; primals_34: "Sym(s5)"; primals_35: "f32[384][1]cuda:0"; primals_36: "f32[1152, 384][384, 1]cuda:0"; primals_37: "f32[384, 384][384, 1]cuda:0"; primals_38: "f32[384][1]cuda:0"; primals_39: "f32[384, 384][384, 1]cuda:0"; primals_40: "f32[768, 384][384, 1]cuda:0"; primals_41: "f32[384, 384][384, 1]cuda:0"; primals_42: "f32[384][1]cuda:0"; primals_43: "f32[1024, 384][384, 1]cuda:0"; primals_44: "f32[384, 1024][1024, 1]cuda:0"; primals_45: "f32[384][1]cuda:0"; primals_46: "f32[1152, 384][384, 1]cuda:0"; primals_47: "f32[384, 384][384, 1]cuda:0"; primals_48: "f32[384][1]cuda:0"; primals_49: "f32[384, 384][384, 1]cuda:0"; primals_50: "f32[768, 384][384, 1]cuda:0"; primals_51: "f32[384, 384][384, 1]cuda:0"; primals_52: "f32[384][1]cuda:0"; primals_53: "f32[1024, 384][384, 1]cuda:0"; primals_54: "f32[384, 1024][1024, 1]cuda:0"; primals_55: "f32[384][1]cuda:0"; primals_56: "f32[1152, 384][384, 1]cuda:0"; primals_57: "f32[384, 384][384, 1]cuda:0"; primals_58: "f32[384][1]cuda:0"; primals_59: "f32[384, 384][384, 1]cuda:0"; primals_60: "f32[768, 384][384, 1]cuda:0"; primals_61: "f32[384, 384][384, 1]cuda:0"; primals_62: "f32[384][1]cuda:0"; primals_63: "f32[1024, 384][384, 1]cuda:0"; primals_64: "f32[384, 1024][1024, 1]cuda:0"; primals_65: "f32[384][1]cuda:0"; primals_66: "f32[1152, 384][384, 1]cuda:0"; primals_67: "f32[384, 384][384, 1]cuda:0"; primals_68: "f32[384][1]cuda:0"; primals_69: "f32[384, 384][384, 1]cuda:0"; primals_70: "f32[768, 384][384, 1]cuda:0"; primals_71: "f32[384, 384][384, 1]cuda:0"; primals_72: "f32[384][1]cuda:0"; primals_73: "f32[1024, 384][384, 1]cuda:0"; primals_74: "f32[384, 1024][1024, 1]cuda:0"; tangents_1: "f32[s6, 384][384, 1]cuda:0"; tangents_2: "i64[257][1]cuda:0"; tangents_3: "f32[s8, 0][1, 1]cuda:0"; tangents_4: "f32[s9, 0][1, 1]cuda:0"; 
    
        primals_1, primals_2, primals_3, primals_4, primals_5, primals_6, primals_7, primals_8, primals_9, primals_10, primals_11, primals_12, primals_13, primals_14, primals_15, primals_16, primals_17, primals_18, primals_19, primals_20, primals_21, primals_22, primals_23, primals_24, primals_25, primals_26, primals_27, primals_28, primals_29, primals_30, primals_31, primals_32, primals_33, primals_34, primals_35, primals_36, primals_37, primals_38, primals_39, primals_40, primals_41, primals_42, primals_43, primals_44, primals_45, primals_46, primals_47, primals_48, primals_49, primals_50, primals_51, primals_52, primals_53, primals_54, primals_55, primals_56, primals_57, primals_58, primals_59, primals_60, primals_61, primals_62, primals_63, primals_64, primals_65, primals_66, primals_67, primals_68, primals_69, primals_70, primals_71, primals_72, primals_73, primals_74, tangents_1, tangents_2, tangents_3, tangents_4, = fx_pytree.tree_flatten_spec([primals, tangents], self._in_spec)
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        pow_1: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(primals_1, 2)
        mean: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.mean.dim(pow_1, [1], True);  pow_1 = None
        add: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.add.Tensor(mean, 1e-06);  mean = None
        rsqrt: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.rsqrt.default(add);  add = None
        alias: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(rsqrt)
        alias_1: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias);  alias = None
        alias_2: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_1);  alias_1 = None
        mul: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(primals_1, rsqrt)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_1: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul, primals_6)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:76 in forward, code: attn_out = x + self.attention(self.do(self.attn_norm(x)), padding_mask=padding_mask, is_causal=is_causal, jagged=jagged, use_cache=not self.training and self.enable_kv_cache)
        sym_size_int: "Sym(s1)" = torch.ops.aten.sym_size.int(primals_1, 0)
        rand: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.rand.default([sym_size_int, 384], dtype = torch.float32, device = device(type='cuda', index=0), pin_memory = False)
        gt: "b8[s1, 384][384, 1]cuda:0" = torch.ops.aten.gt.Scalar(rand, 0.3);  rand = None
        mul_2: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(gt, mul_1);  mul_1 = None
        mul_3: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_2, 1.4285714285714286);  mul_2 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:200 in forward, code: queries, keys, values = self.qkv(x).chunk(3, dim=-1)
        permute: "f32[384, 1152][1, 384]cuda:0" = torch.ops.aten.permute.default(primals_7, [1, 0])
        mm: "f32[s1, 1152][1152, 1]cuda:0" = torch.ops.aten.mm.default(mul_3, permute);  permute = None
        split = torch.ops.aten.split.Tensor(mm, 384, 1);  mm = None
        getitem: "f32[s1, 384][1152, 1]cuda:0" = split[0]
        getitem_1: "f32[s1, 384][1152, 1]cuda:0" = split[1]
        getitem_2: "f32[s1, 384][1152, 1]cuda:0" = split[2];  split = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:114 in jagged_forward, code: queries = qu.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        view: "f32[s1, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.view.default(getitem, [sym_size_int, 6, 64]);  getitem = None
        alias_3: "f32[s1, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.alias.default(view);  view = None
        permute_1: "f32[6, s1, 64][64, 1152, 1]cuda:0" = torch.ops.aten.permute.default(alias_3, [1, 0, 2]);  alias_3 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:115 in jagged_forward, code: keys = ke.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        view_1: "f32[s1, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.view.default(getitem_1, [sym_size_int, 6, 64]);  getitem_1 = None
        alias_4: "f32[s1, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.alias.default(view_1);  view_1 = None
        permute_2: "f32[6, s1, 64][64, 1152, 1]cuda:0" = torch.ops.aten.permute.default(alias_4, [1, 0, 2]);  alias_4 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:116 in jagged_forward, code: values = va.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        view_2: "f32[s1, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.view.default(getitem_2, [sym_size_int, 6, 64]);  getitem_2 = None
        alias_5: "f32[s1, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.alias.default(view_2);  view_2 = None
        permute_3: "f32[6, s1, 64][64, 1152, 1]cuda:0" = torch.ops.aten.permute.default(alias_5, [1, 0, 2]);  alias_5 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:120 in jagged_forward, code: context_vec = F.scaled_dot_product_attention(
        alias_6: "f32[6, s1, 64][64, 1152, 1]cuda:0" = torch.ops.aten.alias.default(permute_1);  permute_1 = None
        permute_4: "f32[s1, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_6, [1, 0, 2]);  alias_6 = None
        alias_7: "f32[6, s1, 64][64, 1152, 1]cuda:0" = torch.ops.aten.alias.default(permute_2);  permute_2 = None
        permute_5: "f32[s1, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_7, [1, 0, 2]);  alias_7 = None
        alias_8: "f32[6, s1, 64][64, 1152, 1]cuda:0" = torch.ops.aten.alias.default(permute_3);  permute_3 = None
        permute_6: "f32[s1, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_8, [1, 0, 2]);  alias_8 = None
        convert_element_type: "i32[257][1]cuda:0" = torch.ops.prims.convert_element_type.default(primals_2, torch.int32)
        convert_element_type_1: "i32[257][1]cuda:0" = torch.ops.prims.convert_element_type.default(primals_2, torch.int32)
        alias_11: "f32[s1, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.alias.default(permute_4);  permute_4 = None
        alias_12: "f32[s1, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.alias.default(permute_5);  permute_5 = None
        alias_13: "f32[s1, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.alias.default(permute_6);  permute_6 = None
        unsqueeze: "f32[1, s1, 6, 64][1152*s1, 1152, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(alias_11, 0);  alias_11 = None
        unsqueeze_1: "f32[1, s1, 6, 64][1152*s1, 1152, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(alias_12, 0);  alias_12 = None
        unsqueeze_2: "f32[1, s1, 6, 64][1152*s1, 1152, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(alias_13, 0);  alias_13 = None
        sym_size_int_1: "Sym(s4)" = torch.ops.aten.sym_size.int(primals_4, 0)
        _efficient_attention_forward = torch.ops.aten._efficient_attention_forward.default(unsqueeze, unsqueeze_1, unsqueeze_2, None, convert_element_type, convert_element_type_1, sym_size_int_1, sym_size_int_1, 0.0, 0, True)
        getitem_3: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = _efficient_attention_forward[0]
        getitem_4: "f32[256, 6, 32*CeilToInt(IntTrueDiv(s4, 32))][192*CeilToInt(IntTrueDiv(s4, 32)), 32*CeilToInt(IntTrueDiv(s4, 32)), 1]cuda:0" = _efficient_attention_forward[1]
        getitem_5: "i64[][]cuda:0" = _efficient_attention_forward[2]
        getitem_6: "i64[][]cuda:0" = _efficient_attention_forward[3];  _efficient_attention_forward = None
        alias_14: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = torch.ops.aten.alias.default(getitem_3)
        alias_15: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = torch.ops.aten.alias.default(alias_14);  alias_14 = None
        squeeze: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_3, 0);  getitem_3 = None
        alias_16: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(squeeze);  squeeze = None
        permute_7: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_16, [1, 0, 2]);  alias_16 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:123 in jagged_forward, code: context_vec = context_vec.transpose(1, 2).flatten(-2)
        alias_17: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_7);  permute_7 = None
        permute_8: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_17, [1, 0, 2]);  alias_17 = None
        view_3: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_8, [sym_size_int, 384]);  permute_8 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:231 in forward, code: context_vec = self.proj(context_vec)
        permute_9: "f32[384, 384][1, 384]cuda:0" = torch.ops.aten.permute.default(primals_8, [1, 0])
        mm_1: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(view_3, permute_9);  permute_9 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:76 in forward, code: attn_out = x + self.attention(self.do(self.attn_norm(x)), padding_mask=padding_mask, is_causal=is_causal, jagged=jagged, use_cache=not self.training and self.enable_kv_cache)
        add_1: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(primals_1, mm_1);  mm_1 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        pow_2: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(add_1, 2)
        mean_1: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.mean.dim(pow_2, [1], True);  pow_2 = None
        add_2: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.add.Tensor(mean_1, 1e-06);  mean_1 = None
        rsqrt_1: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.rsqrt.default(add_2);  add_2 = None
        alias_18: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(rsqrt_1)
        alias_19: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_18);  alias_18 = None
        alias_20: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_19);  alias_19 = None
        mul_4: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(add_1, rsqrt_1)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_5: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_4, primals_9)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/encoder.py:36 in forward, code: return self.mlp(x)
        permute_10: "f32[384, 1024][1, 384]cuda:0" = torch.ops.aten.permute.default(primals_10, [1, 0])
        mm_2: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mm.default(mul_5, permute_10);  permute_10 = None
        sigmoid: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.sigmoid.default(mm_2)
        mul_6: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_2, sigmoid);  sigmoid = None
        rand_1: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.rand.default([sym_size_int, 1024], dtype = torch.float32, device = device(type='cuda', index=0), pin_memory = False)
        gt_1: "b8[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.gt.Scalar(rand_1, 0.3);  rand_1 = None
        mul_7: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(gt_1, mul_6);  mul_6 = None
        mul_8: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_7, 1.4285714285714286);  mul_7 = None
        permute_11: "f32[1024, 384][1, 1024]cuda:0" = torch.ops.aten.permute.default(primals_11, [1, 0])
        mm_3: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(mul_8, permute_11);  permute_11 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:81 in forward, code: proj_out = attn_out + self.ff(attn_out)
        rand_2: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.rand.default([sym_size_int, 384], dtype = torch.float32, device = device(type='cuda', index=0), pin_memory = False)
        gt_2: "b8[s1, 384][384, 1]cuda:0" = torch.ops.aten.gt.Scalar(rand_2, 0.3);  rand_2 = None
        mul_9: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(gt_2, mm_3);  mm_3 = None
        mul_10: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_9, 1.4285714285714286);  mul_9 = None
        add_3: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_1, mul_10);  mul_10 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        pow_3: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(add_3, 2)
        mean_2: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.mean.dim(pow_3, [1], True);  pow_3 = None
        add_4: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.add.Tensor(mean_2, 1e-06);  mean_2 = None
        rsqrt_2: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.rsqrt.default(add_4);  add_4 = None
        alias_21: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(rsqrt_2)
        alias_22: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_21);  alias_21 = None
        alias_23: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_22);  alias_22 = None
        mul_11: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(add_3, rsqrt_2)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_12: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_11, primals_12)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:76 in forward, code: attn_out = x + self.attention(self.do(self.attn_norm(x)), padding_mask=padding_mask, is_causal=is_causal, jagged=jagged, use_cache=not self.training and self.enable_kv_cache)
        rand_3: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.rand.default([sym_size_int, 384], dtype = torch.float32, device = device(type='cuda', index=0), pin_memory = False)
        gt_3: "b8[s1, 384][384, 1]cuda:0" = torch.ops.aten.gt.Scalar(rand_3, 0.3);  rand_3 = None
        mul_13: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(gt_3, mul_12);  mul_12 = None
        mul_14: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_13, 1.4285714285714286);  mul_13 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:200 in forward, code: queries, keys, values = self.qkv(x).chunk(3, dim=-1)
        permute_12: "f32[384, 1152][1, 384]cuda:0" = torch.ops.aten.permute.default(primals_13, [1, 0])
        mm_4: "f32[s1, 1152][1152, 1]cuda:0" = torch.ops.aten.mm.default(mul_14, permute_12);  permute_12 = None
        split_1 = torch.ops.aten.split.Tensor(mm_4, 384, 1);  mm_4 = None
        getitem_9: "f32[s1, 384][1152, 1]cuda:0" = split_1[0]
        getitem_10: "f32[s1, 384][1152, 1]cuda:0" = split_1[1]
        getitem_11: "f32[s1, 384][1152, 1]cuda:0" = split_1[2];  split_1 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:114 in jagged_forward, code: queries = qu.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        view_4: "f32[s1, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.view.default(getitem_9, [sym_size_int, 6, 64]);  getitem_9 = None
        alias_24: "f32[s1, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.alias.default(view_4);  view_4 = None
        permute_13: "f32[6, s1, 64][64, 1152, 1]cuda:0" = torch.ops.aten.permute.default(alias_24, [1, 0, 2]);  alias_24 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:115 in jagged_forward, code: keys = ke.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        view_5: "f32[s1, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.view.default(getitem_10, [sym_size_int, 6, 64]);  getitem_10 = None
        alias_25: "f32[s1, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.alias.default(view_5);  view_5 = None
        permute_14: "f32[6, s1, 64][64, 1152, 1]cuda:0" = torch.ops.aten.permute.default(alias_25, [1, 0, 2]);  alias_25 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:116 in jagged_forward, code: values = va.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        view_6: "f32[s1, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.view.default(getitem_11, [sym_size_int, 6, 64]);  getitem_11 = None
        alias_26: "f32[s1, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.alias.default(view_6);  view_6 = None
        permute_15: "f32[6, s1, 64][64, 1152, 1]cuda:0" = torch.ops.aten.permute.default(alias_26, [1, 0, 2]);  alias_26 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:120 in jagged_forward, code: context_vec = F.scaled_dot_product_attention(
        alias_27: "f32[6, s1, 64][64, 1152, 1]cuda:0" = torch.ops.aten.alias.default(permute_13);  permute_13 = None
        permute_16: "f32[s1, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_27, [1, 0, 2]);  alias_27 = None
        alias_28: "f32[6, s1, 64][64, 1152, 1]cuda:0" = torch.ops.aten.alias.default(permute_14);  permute_14 = None
        permute_17: "f32[s1, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_28, [1, 0, 2]);  alias_28 = None
        alias_29: "f32[6, s1, 64][64, 1152, 1]cuda:0" = torch.ops.aten.alias.default(permute_15);  permute_15 = None
        permute_18: "f32[s1, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_29, [1, 0, 2]);  alias_29 = None
        convert_element_type_2: "i32[257][1]cuda:0" = torch.ops.prims.convert_element_type.default(primals_2, torch.int32)
        convert_element_type_3: "i32[257][1]cuda:0" = torch.ops.prims.convert_element_type.default(primals_2, torch.int32)
        alias_32: "f32[s1, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.alias.default(permute_16);  permute_16 = None
        alias_33: "f32[s1, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.alias.default(permute_17);  permute_17 = None
        alias_34: "f32[s1, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.alias.default(permute_18);  permute_18 = None
        unsqueeze_3: "f32[1, s1, 6, 64][1152*s1, 1152, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(alias_32, 0);  alias_32 = None
        unsqueeze_4: "f32[1, s1, 6, 64][1152*s1, 1152, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(alias_33, 0);  alias_33 = None
        unsqueeze_5: "f32[1, s1, 6, 64][1152*s1, 1152, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(alias_34, 0);  alias_34 = None
        _efficient_attention_forward_1 = torch.ops.aten._efficient_attention_forward.default(unsqueeze_3, unsqueeze_4, unsqueeze_5, None, convert_element_type_2, convert_element_type_3, sym_size_int_1, sym_size_int_1, 0.0, 0, True)
        getitem_12: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = _efficient_attention_forward_1[0]
        getitem_13: "f32[256, 6, 32*CeilToInt(IntTrueDiv(s4, 32))][192*CeilToInt(IntTrueDiv(s4, 32)), 32*CeilToInt(IntTrueDiv(s4, 32)), 1]cuda:0" = _efficient_attention_forward_1[1]
        getitem_14: "i64[][]cuda:0" = _efficient_attention_forward_1[2]
        getitem_15: "i64[][]cuda:0" = _efficient_attention_forward_1[3];  _efficient_attention_forward_1 = None
        alias_35: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = torch.ops.aten.alias.default(getitem_12)
        alias_36: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = torch.ops.aten.alias.default(alias_35);  alias_35 = None
        squeeze_1: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_12, 0);  getitem_12 = None
        alias_37: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(squeeze_1);  squeeze_1 = None
        permute_19: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_37, [1, 0, 2]);  alias_37 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:123 in jagged_forward, code: context_vec = context_vec.transpose(1, 2).flatten(-2)
        alias_38: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_19);  permute_19 = None
        permute_20: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_38, [1, 0, 2]);  alias_38 = None
        view_7: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_20, [sym_size_int, 384]);  permute_20 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:231 in forward, code: context_vec = self.proj(context_vec)
        permute_21: "f32[384, 384][1, 384]cuda:0" = torch.ops.aten.permute.default(primals_14, [1, 0])
        mm_5: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(view_7, permute_21);  permute_21 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:76 in forward, code: attn_out = x + self.attention(self.do(self.attn_norm(x)), padding_mask=padding_mask, is_causal=is_causal, jagged=jagged, use_cache=not self.training and self.enable_kv_cache)
        add_5: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_3, mm_5);  mm_5 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        pow_4: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(add_5, 2)
        mean_3: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.mean.dim(pow_4, [1], True);  pow_4 = None
        add_6: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.add.Tensor(mean_3, 1e-06);  mean_3 = None
        rsqrt_3: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.rsqrt.default(add_6);  add_6 = None
        alias_39: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(rsqrt_3)
        alias_40: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_39);  alias_39 = None
        alias_41: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_40);  alias_40 = None
        mul_15: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(add_5, rsqrt_3)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_16: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_15, primals_15)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/encoder.py:36 in forward, code: return self.mlp(x)
        permute_22: "f32[384, 1024][1, 384]cuda:0" = torch.ops.aten.permute.default(primals_16, [1, 0])
        mm_6: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mm.default(mul_16, permute_22);  permute_22 = None
        sigmoid_1: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.sigmoid.default(mm_6)
        mul_17: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_6, sigmoid_1);  sigmoid_1 = None
        rand_4: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.rand.default([sym_size_int, 1024], dtype = torch.float32, device = device(type='cuda', index=0), pin_memory = False)
        gt_4: "b8[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.gt.Scalar(rand_4, 0.3);  rand_4 = None
        mul_18: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(gt_4, mul_17);  mul_17 = None
        mul_19: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_18, 1.4285714285714286);  mul_18 = None
        permute_23: "f32[1024, 384][1, 1024]cuda:0" = torch.ops.aten.permute.default(primals_17, [1, 0])
        mm_7: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(mul_19, permute_23);  permute_23 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:81 in forward, code: proj_out = attn_out + self.ff(attn_out)
        rand_5: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.rand.default([sym_size_int, 384], dtype = torch.float32, device = device(type='cuda', index=0), pin_memory = False)
        gt_5: "b8[s1, 384][384, 1]cuda:0" = torch.ops.aten.gt.Scalar(rand_5, 0.3);  rand_5 = None
        mul_20: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(gt_5, mm_7);  mm_7 = None
        mul_21: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_20, 1.4285714285714286);  mul_20 = None
        add_7: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_5, mul_21);  mul_21 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        pow_5: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(add_7, 2)
        mean_4: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.mean.dim(pow_5, [1], True);  pow_5 = None
        add_8: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.add.Tensor(mean_4, 1e-06);  mean_4 = None
        rsqrt_4: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.rsqrt.default(add_8);  add_8 = None
        alias_42: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(rsqrt_4)
        alias_43: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_42);  alias_42 = None
        alias_44: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_43);  alias_43 = None
        mul_22: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(add_7, rsqrt_4)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_23: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_22, primals_18)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:76 in forward, code: attn_out = x + self.attention(self.do(self.attn_norm(x)), padding_mask=padding_mask, is_causal=is_causal, jagged=jagged, use_cache=not self.training and self.enable_kv_cache)
        rand_6: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.rand.default([sym_size_int, 384], dtype = torch.float32, device = device(type='cuda', index=0), pin_memory = False)
        gt_6: "b8[s1, 384][384, 1]cuda:0" = torch.ops.aten.gt.Scalar(rand_6, 0.3);  rand_6 = None
        mul_24: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(gt_6, mul_23);  mul_23 = None
        mul_25: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_24, 1.4285714285714286);  mul_24 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:200 in forward, code: queries, keys, values = self.qkv(x).chunk(3, dim=-1)
        permute_24: "f32[384, 1152][1, 384]cuda:0" = torch.ops.aten.permute.default(primals_19, [1, 0])
        mm_8: "f32[s1, 1152][1152, 1]cuda:0" = torch.ops.aten.mm.default(mul_25, permute_24);  permute_24 = None
        split_2 = torch.ops.aten.split.Tensor(mm_8, 384, 1);  mm_8 = None
        getitem_18: "f32[s1, 384][1152, 1]cuda:0" = split_2[0]
        getitem_19: "f32[s1, 384][1152, 1]cuda:0" = split_2[1]
        getitem_20: "f32[s1, 384][1152, 1]cuda:0" = split_2[2];  split_2 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:114 in jagged_forward, code: queries = qu.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        view_8: "f32[s1, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.view.default(getitem_18, [sym_size_int, 6, 64]);  getitem_18 = None
        alias_45: "f32[s1, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.alias.default(view_8);  view_8 = None
        permute_25: "f32[6, s1, 64][64, 1152, 1]cuda:0" = torch.ops.aten.permute.default(alias_45, [1, 0, 2]);  alias_45 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:115 in jagged_forward, code: keys = ke.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        view_9: "f32[s1, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.view.default(getitem_19, [sym_size_int, 6, 64]);  getitem_19 = None
        alias_46: "f32[s1, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.alias.default(view_9);  view_9 = None
        permute_26: "f32[6, s1, 64][64, 1152, 1]cuda:0" = torch.ops.aten.permute.default(alias_46, [1, 0, 2]);  alias_46 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:116 in jagged_forward, code: values = va.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        view_10: "f32[s1, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.view.default(getitem_20, [sym_size_int, 6, 64]);  getitem_20 = None
        alias_47: "f32[s1, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.alias.default(view_10);  view_10 = None
        permute_27: "f32[6, s1, 64][64, 1152, 1]cuda:0" = torch.ops.aten.permute.default(alias_47, [1, 0, 2]);  alias_47 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:120 in jagged_forward, code: context_vec = F.scaled_dot_product_attention(
        alias_48: "f32[6, s1, 64][64, 1152, 1]cuda:0" = torch.ops.aten.alias.default(permute_25);  permute_25 = None
        permute_28: "f32[s1, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_48, [1, 0, 2]);  alias_48 = None
        alias_49: "f32[6, s1, 64][64, 1152, 1]cuda:0" = torch.ops.aten.alias.default(permute_26);  permute_26 = None
        permute_29: "f32[s1, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_49, [1, 0, 2]);  alias_49 = None
        alias_50: "f32[6, s1, 64][64, 1152, 1]cuda:0" = torch.ops.aten.alias.default(permute_27);  permute_27 = None
        permute_30: "f32[s1, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_50, [1, 0, 2]);  alias_50 = None
        convert_element_type_4: "i32[257][1]cuda:0" = torch.ops.prims.convert_element_type.default(primals_2, torch.int32)
        convert_element_type_5: "i32[257][1]cuda:0" = torch.ops.prims.convert_element_type.default(primals_2, torch.int32)
        alias_53: "f32[s1, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.alias.default(permute_28);  permute_28 = None
        alias_54: "f32[s1, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.alias.default(permute_29);  permute_29 = None
        alias_55: "f32[s1, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.alias.default(permute_30);  permute_30 = None
        unsqueeze_6: "f32[1, s1, 6, 64][1152*s1, 1152, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(alias_53, 0);  alias_53 = None
        unsqueeze_7: "f32[1, s1, 6, 64][1152*s1, 1152, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(alias_54, 0);  alias_54 = None
        unsqueeze_8: "f32[1, s1, 6, 64][1152*s1, 1152, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(alias_55, 0);  alias_55 = None
        _efficient_attention_forward_2 = torch.ops.aten._efficient_attention_forward.default(unsqueeze_6, unsqueeze_7, unsqueeze_8, None, convert_element_type_4, convert_element_type_5, sym_size_int_1, sym_size_int_1, 0.0, 0, True)
        getitem_21: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = _efficient_attention_forward_2[0]
        getitem_22: "f32[256, 6, 32*CeilToInt(IntTrueDiv(s4, 32))][192*CeilToInt(IntTrueDiv(s4, 32)), 32*CeilToInt(IntTrueDiv(s4, 32)), 1]cuda:0" = _efficient_attention_forward_2[1]
        getitem_23: "i64[][]cuda:0" = _efficient_attention_forward_2[2]
        getitem_24: "i64[][]cuda:0" = _efficient_attention_forward_2[3];  _efficient_attention_forward_2 = None
        alias_56: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = torch.ops.aten.alias.default(getitem_21)
        alias_57: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = torch.ops.aten.alias.default(alias_56);  alias_56 = None
        squeeze_2: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_21, 0);  getitem_21 = None
        alias_58: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(squeeze_2);  squeeze_2 = None
        permute_31: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_58, [1, 0, 2]);  alias_58 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:123 in jagged_forward, code: context_vec = context_vec.transpose(1, 2).flatten(-2)
        alias_59: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_31);  permute_31 = None
        permute_32: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_59, [1, 0, 2]);  alias_59 = None
        view_11: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_32, [sym_size_int, 384]);  permute_32 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:231 in forward, code: context_vec = self.proj(context_vec)
        permute_33: "f32[384, 384][1, 384]cuda:0" = torch.ops.aten.permute.default(primals_20, [1, 0])
        mm_9: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(view_11, permute_33);  permute_33 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:76 in forward, code: attn_out = x + self.attention(self.do(self.attn_norm(x)), padding_mask=padding_mask, is_causal=is_causal, jagged=jagged, use_cache=not self.training and self.enable_kv_cache)
        add_9: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_7, mm_9);  mm_9 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        pow_6: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(add_9, 2)
        mean_5: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.mean.dim(pow_6, [1], True);  pow_6 = None
        add_10: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.add.Tensor(mean_5, 1e-06);  mean_5 = None
        rsqrt_5: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.rsqrt.default(add_10);  add_10 = None
        alias_60: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(rsqrt_5)
        alias_61: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_60);  alias_60 = None
        alias_62: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_61);  alias_61 = None
        mul_26: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(add_9, rsqrt_5)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_27: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_26, primals_21)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/encoder.py:36 in forward, code: return self.mlp(x)
        permute_34: "f32[384, 1024][1, 384]cuda:0" = torch.ops.aten.permute.default(primals_22, [1, 0])
        mm_10: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mm.default(mul_27, permute_34);  permute_34 = None
        sigmoid_2: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.sigmoid.default(mm_10)
        mul_28: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_10, sigmoid_2);  sigmoid_2 = None
        rand_7: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.rand.default([sym_size_int, 1024], dtype = torch.float32, device = device(type='cuda', index=0), pin_memory = False)
        gt_7: "b8[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.gt.Scalar(rand_7, 0.3);  rand_7 = None
        mul_29: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(gt_7, mul_28);  mul_28 = None
        mul_30: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_29, 1.4285714285714286);  mul_29 = None
        permute_35: "f32[1024, 384][1, 1024]cuda:0" = torch.ops.aten.permute.default(primals_23, [1, 0])
        mm_11: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(mul_30, permute_35);  permute_35 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:81 in forward, code: proj_out = attn_out + self.ff(attn_out)
        rand_8: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.rand.default([sym_size_int, 384], dtype = torch.float32, device = device(type='cuda', index=0), pin_memory = False)
        gt_8: "b8[s1, 384][384, 1]cuda:0" = torch.ops.aten.gt.Scalar(rand_8, 0.3);  rand_8 = None
        mul_31: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(gt_8, mm_11);  mm_11 = None
        mul_32: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_31, 1.4285714285714286);  mul_31 = None
        add_11: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_9, mul_32);  mul_32 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        pow_7: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(add_11, 2)
        mean_6: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.mean.dim(pow_7, [1], True);  pow_7 = None
        add_12: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.add.Tensor(mean_6, 1e-06);  mean_6 = None
        rsqrt_6: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.rsqrt.default(add_12);  add_12 = None
        alias_63: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(rsqrt_6)
        alias_64: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_63);  alias_63 = None
        alias_65: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_64);  alias_64 = None
        mul_33: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(add_11, rsqrt_6)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_34: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_33, primals_24)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:76 in forward, code: attn_out = x + self.attention(self.do(self.attn_norm(x)), padding_mask=padding_mask, is_causal=is_causal, jagged=jagged, use_cache=not self.training and self.enable_kv_cache)
        rand_9: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.rand.default([sym_size_int, 384], dtype = torch.float32, device = device(type='cuda', index=0), pin_memory = False)
        gt_9: "b8[s1, 384][384, 1]cuda:0" = torch.ops.aten.gt.Scalar(rand_9, 0.3);  rand_9 = None
        mul_35: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(gt_9, mul_34);  mul_34 = None
        mul_36: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_35, 1.4285714285714286);  mul_35 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:200 in forward, code: queries, keys, values = self.qkv(x).chunk(3, dim=-1)
        permute_36: "f32[384, 1152][1, 384]cuda:0" = torch.ops.aten.permute.default(primals_25, [1, 0])
        mm_12: "f32[s1, 1152][1152, 1]cuda:0" = torch.ops.aten.mm.default(mul_36, permute_36);  permute_36 = None
        split_3 = torch.ops.aten.split.Tensor(mm_12, 384, 1);  mm_12 = None
        getitem_27: "f32[s1, 384][1152, 1]cuda:0" = split_3[0]
        getitem_28: "f32[s1, 384][1152, 1]cuda:0" = split_3[1]
        getitem_29: "f32[s1, 384][1152, 1]cuda:0" = split_3[2];  split_3 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:114 in jagged_forward, code: queries = qu.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        view_12: "f32[s1, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.view.default(getitem_27, [sym_size_int, 6, 64]);  getitem_27 = None
        alias_66: "f32[s1, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.alias.default(view_12);  view_12 = None
        permute_37: "f32[6, s1, 64][64, 1152, 1]cuda:0" = torch.ops.aten.permute.default(alias_66, [1, 0, 2]);  alias_66 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:115 in jagged_forward, code: keys = ke.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        view_13: "f32[s1, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.view.default(getitem_28, [sym_size_int, 6, 64]);  getitem_28 = None
        alias_67: "f32[s1, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.alias.default(view_13);  view_13 = None
        permute_38: "f32[6, s1, 64][64, 1152, 1]cuda:0" = torch.ops.aten.permute.default(alias_67, [1, 0, 2]);  alias_67 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:116 in jagged_forward, code: values = va.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        view_14: "f32[s1, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.view.default(getitem_29, [sym_size_int, 6, 64]);  getitem_29 = None
        alias_68: "f32[s1, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.alias.default(view_14);  view_14 = None
        permute_39: "f32[6, s1, 64][64, 1152, 1]cuda:0" = torch.ops.aten.permute.default(alias_68, [1, 0, 2]);  alias_68 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:120 in jagged_forward, code: context_vec = F.scaled_dot_product_attention(
        alias_69: "f32[6, s1, 64][64, 1152, 1]cuda:0" = torch.ops.aten.alias.default(permute_37);  permute_37 = None
        permute_40: "f32[s1, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_69, [1, 0, 2]);  alias_69 = None
        alias_70: "f32[6, s1, 64][64, 1152, 1]cuda:0" = torch.ops.aten.alias.default(permute_38);  permute_38 = None
        permute_41: "f32[s1, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_70, [1, 0, 2]);  alias_70 = None
        alias_71: "f32[6, s1, 64][64, 1152, 1]cuda:0" = torch.ops.aten.alias.default(permute_39);  permute_39 = None
        permute_42: "f32[s1, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_71, [1, 0, 2]);  alias_71 = None
        convert_element_type_6: "i32[257][1]cuda:0" = torch.ops.prims.convert_element_type.default(primals_2, torch.int32)
        convert_element_type_7: "i32[257][1]cuda:0" = torch.ops.prims.convert_element_type.default(primals_2, torch.int32)
        alias_74: "f32[s1, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.alias.default(permute_40);  permute_40 = None
        alias_75: "f32[s1, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.alias.default(permute_41);  permute_41 = None
        alias_76: "f32[s1, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.alias.default(permute_42);  permute_42 = None
        unsqueeze_9: "f32[1, s1, 6, 64][1152*s1, 1152, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(alias_74, 0);  alias_74 = None
        unsqueeze_10: "f32[1, s1, 6, 64][1152*s1, 1152, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(alias_75, 0);  alias_75 = None
        unsqueeze_11: "f32[1, s1, 6, 64][1152*s1, 1152, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(alias_76, 0);  alias_76 = None
        _efficient_attention_forward_3 = torch.ops.aten._efficient_attention_forward.default(unsqueeze_9, unsqueeze_10, unsqueeze_11, None, convert_element_type_6, convert_element_type_7, sym_size_int_1, sym_size_int_1, 0.0, 0, True)
        getitem_30: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = _efficient_attention_forward_3[0]
        getitem_31: "f32[256, 6, 32*CeilToInt(IntTrueDiv(s4, 32))][192*CeilToInt(IntTrueDiv(s4, 32)), 32*CeilToInt(IntTrueDiv(s4, 32)), 1]cuda:0" = _efficient_attention_forward_3[1]
        getitem_32: "i64[][]cuda:0" = _efficient_attention_forward_3[2]
        getitem_33: "i64[][]cuda:0" = _efficient_attention_forward_3[3];  _efficient_attention_forward_3 = None
        alias_77: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = torch.ops.aten.alias.default(getitem_30)
        alias_78: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = torch.ops.aten.alias.default(alias_77);  alias_77 = None
        squeeze_3: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_30, 0);  getitem_30 = None
        alias_79: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(squeeze_3);  squeeze_3 = None
        permute_43: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_79, [1, 0, 2]);  alias_79 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:123 in jagged_forward, code: context_vec = context_vec.transpose(1, 2).flatten(-2)
        alias_80: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_43);  permute_43 = None
        permute_44: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_80, [1, 0, 2]);  alias_80 = None
        view_15: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_44, [sym_size_int, 384]);  permute_44 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:231 in forward, code: context_vec = self.proj(context_vec)
        permute_45: "f32[384, 384][1, 384]cuda:0" = torch.ops.aten.permute.default(primals_26, [1, 0])
        mm_13: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(view_15, permute_45);  permute_45 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:76 in forward, code: attn_out = x + self.attention(self.do(self.attn_norm(x)), padding_mask=padding_mask, is_causal=is_causal, jagged=jagged, use_cache=not self.training and self.enable_kv_cache)
        add_13: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_11, mm_13);  mm_13 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        pow_8: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(add_13, 2)
        mean_7: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.mean.dim(pow_8, [1], True);  pow_8 = None
        add_14: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.add.Tensor(mean_7, 1e-06);  mean_7 = None
        rsqrt_7: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.rsqrt.default(add_14);  add_14 = None
        alias_81: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(rsqrt_7)
        alias_82: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_81);  alias_81 = None
        alias_83: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_82);  alias_82 = None
        mul_37: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(add_13, rsqrt_7)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_38: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_37, primals_27)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/encoder.py:36 in forward, code: return self.mlp(x)
        permute_46: "f32[384, 1024][1, 384]cuda:0" = torch.ops.aten.permute.default(primals_28, [1, 0])
        mm_14: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mm.default(mul_38, permute_46);  permute_46 = None
        sigmoid_3: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.sigmoid.default(mm_14)
        mul_39: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_14, sigmoid_3);  sigmoid_3 = None
        rand_10: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.rand.default([sym_size_int, 1024], dtype = torch.float32, device = device(type='cuda', index=0), pin_memory = False)
        gt_10: "b8[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.gt.Scalar(rand_10, 0.3);  rand_10 = None
        mul_40: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(gt_10, mul_39);  mul_39 = None
        mul_41: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_40, 1.4285714285714286);  mul_40 = None
        permute_47: "f32[1024, 384][1, 1024]cuda:0" = torch.ops.aten.permute.default(primals_29, [1, 0])
        mm_15: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(mul_41, permute_47);  permute_47 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:81 in forward, code: proj_out = attn_out + self.ff(attn_out)
        rand_11: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.rand.default([sym_size_int, 384], dtype = torch.float32, device = device(type='cuda', index=0), pin_memory = False)
        gt_11: "b8[s1, 384][384, 1]cuda:0" = torch.ops.aten.gt.Scalar(rand_11, 0.3);  rand_11 = None
        mul_42: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(gt_11, mm_15);  mm_15 = None
        mul_43: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_42, 1.4285714285714286);  mul_42 = None
        add_15: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_13, mul_43);  mul_43 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        pow_9: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(primals_30, 2)
        mean_8: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mean.dim(pow_9, [1], True);  pow_9 = None
        add_16: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.add.Tensor(mean_8, 1e-06);  mean_8 = None
        rsqrt_8: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.rsqrt.default(add_16);  add_16 = None
        alias_84: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(rsqrt_8)
        alias_85: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_84);  alias_84 = None
        alias_86: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_85);  alias_85 = None
        mul_44: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(primals_30, rsqrt_8)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_45: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_44, primals_35)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:76 in forward, code: attn_out = x + self.attention(self.do(self.attn_norm(x)), padding_mask=padding_mask, is_causal=is_causal, jagged=jagged, use_cache=not self.training and self.enable_kv_cache)
        sym_size_int_3: "Sym(s6)" = torch.ops.aten.sym_size.int(primals_30, 0)
        rand_12: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.rand.default([sym_size_int_3, 384], dtype = torch.float32, device = device(type='cuda', index=0), pin_memory = False)
        gt_12: "b8[s6, 384][384, 1]cuda:0" = torch.ops.aten.gt.Scalar(rand_12, 0.3);  rand_12 = None
        mul_46: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(gt_12, mul_45);  mul_45 = None
        mul_47: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_46, 1.4285714285714286);  mul_46 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:200 in forward, code: queries, keys, values = self.qkv(x).chunk(3, dim=-1)
        permute_48: "f32[384, 1152][1, 384]cuda:0" = torch.ops.aten.permute.default(primals_36, [1, 0])
        mm_16: "f32[s6, 1152][1152, 1]cuda:0" = torch.ops.aten.mm.default(mul_47, permute_48);  permute_48 = None
        split_4 = torch.ops.aten.split.Tensor(mm_16, 384, 1);  mm_16 = None
        getitem_36: "f32[s6, 384][1152, 1]cuda:0" = split_4[0]
        getitem_37: "f32[s6, 384][1152, 1]cuda:0" = split_4[1]
        getitem_38: "f32[s6, 384][1152, 1]cuda:0" = split_4[2];  split_4 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:114 in jagged_forward, code: queries = qu.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        view_16: "f32[s6, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.view.default(getitem_36, [sym_size_int_3, 6, 64]);  getitem_36 = None
        alias_87: "f32[s6, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.alias.default(view_16);  view_16 = None
        permute_49: "f32[6, s6, 64][64, 1152, 1]cuda:0" = torch.ops.aten.permute.default(alias_87, [1, 0, 2]);  alias_87 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:115 in jagged_forward, code: keys = ke.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        view_17: "f32[s6, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.view.default(getitem_37, [sym_size_int_3, 6, 64]);  getitem_37 = None
        alias_88: "f32[s6, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.alias.default(view_17);  view_17 = None
        permute_50: "f32[6, s6, 64][64, 1152, 1]cuda:0" = torch.ops.aten.permute.default(alias_88, [1, 0, 2]);  alias_88 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:116 in jagged_forward, code: values = va.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        view_18: "f32[s6, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.view.default(getitem_38, [sym_size_int_3, 6, 64]);  getitem_38 = None
        alias_89: "f32[s6, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.alias.default(view_18);  view_18 = None
        permute_51: "f32[6, s6, 64][64, 1152, 1]cuda:0" = torch.ops.aten.permute.default(alias_89, [1, 0, 2]);  alias_89 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:120 in jagged_forward, code: context_vec = F.scaled_dot_product_attention(
        alias_90: "f32[6, s6, 64][64, 1152, 1]cuda:0" = torch.ops.aten.alias.default(permute_49);  permute_49 = None
        permute_52: "f32[s6, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_90, [1, 0, 2]);  alias_90 = None
        alias_91: "f32[6, s6, 64][64, 1152, 1]cuda:0" = torch.ops.aten.alias.default(permute_50);  permute_50 = None
        permute_53: "f32[s6, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_91, [1, 0, 2]);  alias_91 = None
        alias_92: "f32[6, s6, 64][64, 1152, 1]cuda:0" = torch.ops.aten.alias.default(permute_51);  permute_51 = None
        permute_54: "f32[s6, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_92, [1, 0, 2]);  alias_92 = None
        convert_element_type_8: "i32[257][1]cuda:0" = torch.ops.prims.convert_element_type.default(primals_31, torch.int32)
        convert_element_type_9: "i32[257][1]cuda:0" = torch.ops.prims.convert_element_type.default(primals_31, torch.int32)
        alias_95: "f32[s6, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.alias.default(permute_52);  permute_52 = None
        alias_96: "f32[s6, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.alias.default(permute_53);  permute_53 = None
        alias_97: "f32[s6, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.alias.default(permute_54);  permute_54 = None
        unsqueeze_12: "f32[1, s6, 6, 64][1152*s6, 1152, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(alias_95, 0);  alias_95 = None
        unsqueeze_13: "f32[1, s6, 6, 64][1152*s6, 1152, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(alias_96, 0);  alias_96 = None
        unsqueeze_14: "f32[1, s6, 6, 64][1152*s6, 1152, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(alias_97, 0);  alias_97 = None
        sym_size_int_4: "Sym(s9)" = torch.ops.aten.sym_size.int(primals_33, 0)
        _efficient_attention_forward_4 = torch.ops.aten._efficient_attention_forward.default(unsqueeze_12, unsqueeze_13, unsqueeze_14, None, convert_element_type_8, convert_element_type_9, sym_size_int_4, sym_size_int_4, 0.0, 1, True)
        getitem_39: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = _efficient_attention_forward_4[0]
        getitem_40: "f32[256, 6, 32*CeilToInt(IntTrueDiv(s9, 32))][192*CeilToInt(IntTrueDiv(s9, 32)), 32*CeilToInt(IntTrueDiv(s9, 32)), 1]cuda:0" = _efficient_attention_forward_4[1]
        getitem_41: "i64[][]cuda:0" = _efficient_attention_forward_4[2]
        getitem_42: "i64[][]cuda:0" = _efficient_attention_forward_4[3];  _efficient_attention_forward_4 = None
        alias_98: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = torch.ops.aten.alias.default(getitem_39)
        alias_99: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = torch.ops.aten.alias.default(alias_98);  alias_98 = None
        squeeze_4: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_39, 0);  getitem_39 = None
        alias_100: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(squeeze_4);  squeeze_4 = None
        permute_55: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_100, [1, 0, 2]);  alias_100 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:123 in jagged_forward, code: context_vec = context_vec.transpose(1, 2).flatten(-2)
        alias_101: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_55);  permute_55 = None
        permute_56: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_101, [1, 0, 2]);  alias_101 = None
        view_19: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_56, [sym_size_int_3, 384]);  permute_56 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:231 in forward, code: context_vec = self.proj(context_vec)
        permute_57: "f32[384, 384][1, 384]cuda:0" = torch.ops.aten.permute.default(primals_37, [1, 0])
        mm_17: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(view_19, permute_57);  permute_57 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:76 in forward, code: attn_out = x + self.attention(self.do(self.attn_norm(x)), padding_mask=padding_mask, is_causal=is_causal, jagged=jagged, use_cache=not self.training and self.enable_kv_cache)
        add_17: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(primals_30, mm_17);  mm_17 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        pow_10: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(primals_30, 2)
        mean_9: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mean.dim(pow_10, [1], True);  pow_10 = None
        add_18: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.add.Tensor(mean_9, 1e-06);  mean_9 = None
        rsqrt_9: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.rsqrt.default(add_18);  add_18 = None
        alias_102: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(rsqrt_9)
        alias_103: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_102);  alias_102 = None
        alias_104: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_103);  alias_103 = None
        mul_48: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(primals_30, rsqrt_9)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_49: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_48, primals_38)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:79 in forward, code: x=self.do(self.cross_attn_norm(x)), x_kv=x_kv, padding_mask=padding_mask, is_causal=False, jagged=jagged, use_cache=not self.training and self.enable_kv_cache
        rand_13: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.rand.default([sym_size_int_3, 384], dtype = torch.float32, device = device(type='cuda', index=0), pin_memory = False)
        gt_13: "b8[s6, 384][384, 1]cuda:0" = torch.ops.aten.gt.Scalar(rand_13, 0.3);  rand_13 = None
        mul_50: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(gt_13, mul_49);  mul_49 = None
        mul_51: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_50, 1.4285714285714286);  mul_50 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:197 in forward, code: queries = self.q(x)
        permute_58: "f32[384, 384][1, 384]cuda:0" = torch.ops.aten.permute.default(primals_39, [1, 0])
        mm_18: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(mul_51, permute_58);  permute_58 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:198 in forward, code: keys, values = self.kv(x_kv).chunk(2, dim=-1)
        permute_59: "f32[384, 768][1, 384]cuda:0" = torch.ops.aten.permute.default(primals_40, [1, 0])
        mm_19: "f32[s1, 768][768, 1]cuda:0" = torch.ops.aten.mm.default(add_15, permute_59);  permute_59 = None
        split_5 = torch.ops.aten.split.Tensor(mm_19, 384, 1);  mm_19 = None
        getitem_45: "f32[s1, 384][768, 1]cuda:0" = split_5[0]
        getitem_46: "f32[s1, 384][768, 1]cuda:0" = split_5[1];  split_5 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:114 in jagged_forward, code: queries = qu.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        view_20: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.view.default(mm_18, [sym_size_int_3, 6, 64]);  mm_18 = None
        alias_105: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(view_20);  view_20 = None
        permute_60: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_105, [1, 0, 2]);  alias_105 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:115 in jagged_forward, code: keys = ke.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        view_21: "f32[s1, 6, 64][768, 64, 1]cuda:0" = torch.ops.aten.view.default(getitem_45, [sym_size_int, 6, 64]);  getitem_45 = None
        alias_106: "f32[s1, 6, 64][768, 64, 1]cuda:0" = torch.ops.aten.alias.default(view_21);  view_21 = None
        permute_61: "f32[6, s1, 64][64, 768, 1]cuda:0" = torch.ops.aten.permute.default(alias_106, [1, 0, 2]);  alias_106 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:116 in jagged_forward, code: values = va.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        view_22: "f32[s1, 6, 64][768, 64, 1]cuda:0" = torch.ops.aten.view.default(getitem_46, [sym_size_int, 6, 64]);  getitem_46 = None
        alias_107: "f32[s1, 6, 64][768, 64, 1]cuda:0" = torch.ops.aten.alias.default(view_22);  view_22 = None
        permute_62: "f32[6, s1, 64][64, 768, 1]cuda:0" = torch.ops.aten.permute.default(alias_107, [1, 0, 2]);  alias_107 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:120 in jagged_forward, code: context_vec = F.scaled_dot_product_attention(
        alias_108: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_60);  permute_60 = None
        permute_63: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_108, [1, 0, 2]);  alias_108 = None
        alias_109: "f32[6, s1, 64][64, 768, 1]cuda:0" = torch.ops.aten.alias.default(permute_61);  permute_61 = None
        permute_64: "f32[s1, 6, 64][768, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_109, [1, 0, 2]);  alias_109 = None
        alias_110: "f32[6, s1, 64][64, 768, 1]cuda:0" = torch.ops.aten.alias.default(permute_62);  permute_62 = None
        permute_65: "f32[s1, 6, 64][768, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_110, [1, 0, 2]);  alias_110 = None
        convert_element_type_10: "i32[257][1]cuda:0" = torch.ops.prims.convert_element_type.default(primals_31, torch.int32)
        convert_element_type_11: "i32[257][1]cuda:0" = torch.ops.prims.convert_element_type.default(primals_2, torch.int32)
        alias_113: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(permute_63);  permute_63 = None
        alias_114: "f32[s1, 6, 64][768, 64, 1]cuda:0" = torch.ops.aten.alias.default(permute_64);  permute_64 = None
        alias_115: "f32[s1, 6, 64][768, 64, 1]cuda:0" = torch.ops.aten.alias.default(permute_65);  permute_65 = None
        unsqueeze_15: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(alias_113, 0);  alias_113 = None
        unsqueeze_16: "f32[1, s1, 6, 64][768*s1, 768, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(alias_114, 0);  alias_114 = None
        unsqueeze_17: "f32[1, s1, 6, 64][768*s1, 768, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(alias_115, 0);  alias_115 = None
        _efficient_attention_forward_5 = torch.ops.aten._efficient_attention_forward.default(unsqueeze_15, unsqueeze_16, unsqueeze_17, None, convert_element_type_10, convert_element_type_11, sym_size_int_4, sym_size_int_1, 0.0, 0, True)
        getitem_47: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = _efficient_attention_forward_5[0]
        getitem_48: "f32[256, 6, 32*CeilToInt(IntTrueDiv(s9, 32))][192*CeilToInt(IntTrueDiv(s9, 32)), 32*CeilToInt(IntTrueDiv(s9, 32)), 1]cuda:0" = _efficient_attention_forward_5[1]
        getitem_49: "i64[][]cuda:0" = _efficient_attention_forward_5[2]
        getitem_50: "i64[][]cuda:0" = _efficient_attention_forward_5[3];  _efficient_attention_forward_5 = None
        alias_116: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = torch.ops.aten.alias.default(getitem_47)
        alias_117: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = torch.ops.aten.alias.default(alias_116);  alias_116 = None
        squeeze_5: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_47, 0);  getitem_47 = None
        alias_118: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(squeeze_5);  squeeze_5 = None
        permute_66: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_118, [1, 0, 2]);  alias_118 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:123 in jagged_forward, code: context_vec = context_vec.transpose(1, 2).flatten(-2)
        alias_119: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_66);  permute_66 = None
        permute_67: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_119, [1, 0, 2]);  alias_119 = None
        view_23: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_67, [sym_size_int_3, 384]);  permute_67 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:231 in forward, code: context_vec = self.proj(context_vec)
        permute_68: "f32[384, 384][1, 384]cuda:0" = torch.ops.aten.permute.default(primals_41, [1, 0])
        mm_20: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(view_23, permute_68);  permute_68 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:78 in forward, code: attn_out = attn_out + self.cross_attention(
        add_19: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_17, mm_20);  add_17 = mm_20 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        pow_11: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(add_19, 2)
        mean_10: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mean.dim(pow_11, [1], True);  pow_11 = None
        add_20: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.add.Tensor(mean_10, 1e-06);  mean_10 = None
        rsqrt_10: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.rsqrt.default(add_20);  add_20 = None
        alias_120: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(rsqrt_10)
        alias_121: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_120);  alias_120 = None
        alias_122: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_121);  alias_121 = None
        mul_52: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(add_19, rsqrt_10)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_53: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_52, primals_42)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/encoder.py:36 in forward, code: return self.mlp(x)
        permute_69: "f32[384, 1024][1, 384]cuda:0" = torch.ops.aten.permute.default(primals_43, [1, 0])
        mm_21: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mm.default(mul_53, permute_69);  permute_69 = None
        sigmoid_4: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.sigmoid.default(mm_21)
        mul_54: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_21, sigmoid_4);  sigmoid_4 = None
        rand_14: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.rand.default([sym_size_int_3, 1024], dtype = torch.float32, device = device(type='cuda', index=0), pin_memory = False)
        gt_14: "b8[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.gt.Scalar(rand_14, 0.3);  rand_14 = None
        mul_55: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(gt_14, mul_54);  mul_54 = None
        mul_56: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_55, 1.4285714285714286);  mul_55 = None
        permute_70: "f32[1024, 384][1, 1024]cuda:0" = torch.ops.aten.permute.default(primals_44, [1, 0])
        mm_22: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(mul_56, permute_70);  permute_70 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:81 in forward, code: proj_out = attn_out + self.ff(attn_out)
        rand_15: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.rand.default([sym_size_int_3, 384], dtype = torch.float32, device = device(type='cuda', index=0), pin_memory = False)
        gt_15: "b8[s6, 384][384, 1]cuda:0" = torch.ops.aten.gt.Scalar(rand_15, 0.3);  rand_15 = None
        mul_57: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(gt_15, mm_22);  mm_22 = None
        mul_58: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_57, 1.4285714285714286);  mul_57 = None
        add_21: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_19, mul_58);  mul_58 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        pow_12: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(add_21, 2)
        mean_11: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mean.dim(pow_12, [1], True);  pow_12 = None
        add_22: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.add.Tensor(mean_11, 1e-06);  mean_11 = None
        rsqrt_11: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.rsqrt.default(add_22);  add_22 = None
        alias_123: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(rsqrt_11)
        alias_124: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_123);  alias_123 = None
        alias_125: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_124);  alias_124 = None
        mul_59: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(add_21, rsqrt_11)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_60: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_59, primals_45)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:76 in forward, code: attn_out = x + self.attention(self.do(self.attn_norm(x)), padding_mask=padding_mask, is_causal=is_causal, jagged=jagged, use_cache=not self.training and self.enable_kv_cache)
        rand_16: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.rand.default([sym_size_int_3, 384], dtype = torch.float32, device = device(type='cuda', index=0), pin_memory = False)
        gt_16: "b8[s6, 384][384, 1]cuda:0" = torch.ops.aten.gt.Scalar(rand_16, 0.3);  rand_16 = None
        mul_61: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(gt_16, mul_60);  mul_60 = None
        mul_62: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_61, 1.4285714285714286);  mul_61 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:200 in forward, code: queries, keys, values = self.qkv(x).chunk(3, dim=-1)
        permute_71: "f32[384, 1152][1, 384]cuda:0" = torch.ops.aten.permute.default(primals_46, [1, 0])
        mm_23: "f32[s6, 1152][1152, 1]cuda:0" = torch.ops.aten.mm.default(mul_62, permute_71);  permute_71 = None
        split_6 = torch.ops.aten.split.Tensor(mm_23, 384, 1);  mm_23 = None
        getitem_53: "f32[s6, 384][1152, 1]cuda:0" = split_6[0]
        getitem_54: "f32[s6, 384][1152, 1]cuda:0" = split_6[1]
        getitem_55: "f32[s6, 384][1152, 1]cuda:0" = split_6[2];  split_6 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:114 in jagged_forward, code: queries = qu.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        view_24: "f32[s6, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.view.default(getitem_53, [sym_size_int_3, 6, 64]);  getitem_53 = None
        alias_126: "f32[s6, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.alias.default(view_24);  view_24 = None
        permute_72: "f32[6, s6, 64][64, 1152, 1]cuda:0" = torch.ops.aten.permute.default(alias_126, [1, 0, 2]);  alias_126 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:115 in jagged_forward, code: keys = ke.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        view_25: "f32[s6, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.view.default(getitem_54, [sym_size_int_3, 6, 64]);  getitem_54 = None
        alias_127: "f32[s6, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.alias.default(view_25);  view_25 = None
        permute_73: "f32[6, s6, 64][64, 1152, 1]cuda:0" = torch.ops.aten.permute.default(alias_127, [1, 0, 2]);  alias_127 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:116 in jagged_forward, code: values = va.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        view_26: "f32[s6, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.view.default(getitem_55, [sym_size_int_3, 6, 64]);  getitem_55 = None
        alias_128: "f32[s6, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.alias.default(view_26);  view_26 = None
        permute_74: "f32[6, s6, 64][64, 1152, 1]cuda:0" = torch.ops.aten.permute.default(alias_128, [1, 0, 2]);  alias_128 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:120 in jagged_forward, code: context_vec = F.scaled_dot_product_attention(
        alias_129: "f32[6, s6, 64][64, 1152, 1]cuda:0" = torch.ops.aten.alias.default(permute_72);  permute_72 = None
        permute_75: "f32[s6, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_129, [1, 0, 2]);  alias_129 = None
        alias_130: "f32[6, s6, 64][64, 1152, 1]cuda:0" = torch.ops.aten.alias.default(permute_73);  permute_73 = None
        permute_76: "f32[s6, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_130, [1, 0, 2]);  alias_130 = None
        alias_131: "f32[6, s6, 64][64, 1152, 1]cuda:0" = torch.ops.aten.alias.default(permute_74);  permute_74 = None
        permute_77: "f32[s6, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_131, [1, 0, 2]);  alias_131 = None
        convert_element_type_12: "i32[257][1]cuda:0" = torch.ops.prims.convert_element_type.default(primals_31, torch.int32)
        convert_element_type_13: "i32[257][1]cuda:0" = torch.ops.prims.convert_element_type.default(primals_31, torch.int32)
        alias_134: "f32[s6, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.alias.default(permute_75);  permute_75 = None
        alias_135: "f32[s6, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.alias.default(permute_76);  permute_76 = None
        alias_136: "f32[s6, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.alias.default(permute_77);  permute_77 = None
        unsqueeze_18: "f32[1, s6, 6, 64][1152*s6, 1152, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(alias_134, 0);  alias_134 = None
        unsqueeze_19: "f32[1, s6, 6, 64][1152*s6, 1152, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(alias_135, 0);  alias_135 = None
        unsqueeze_20: "f32[1, s6, 6, 64][1152*s6, 1152, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(alias_136, 0);  alias_136 = None
        _efficient_attention_forward_6 = torch.ops.aten._efficient_attention_forward.default(unsqueeze_18, unsqueeze_19, unsqueeze_20, None, convert_element_type_12, convert_element_type_13, sym_size_int_4, sym_size_int_4, 0.0, 1, True)
        getitem_56: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = _efficient_attention_forward_6[0]
        getitem_57: "f32[256, 6, 32*CeilToInt(IntTrueDiv(s9, 32))][192*CeilToInt(IntTrueDiv(s9, 32)), 32*CeilToInt(IntTrueDiv(s9, 32)), 1]cuda:0" = _efficient_attention_forward_6[1]
        getitem_58: "i64[][]cuda:0" = _efficient_attention_forward_6[2]
        getitem_59: "i64[][]cuda:0" = _efficient_attention_forward_6[3];  _efficient_attention_forward_6 = None
        alias_137: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = torch.ops.aten.alias.default(getitem_56)
        alias_138: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = torch.ops.aten.alias.default(alias_137);  alias_137 = None
        squeeze_6: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_56, 0);  getitem_56 = None
        alias_139: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(squeeze_6);  squeeze_6 = None
        permute_78: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_139, [1, 0, 2]);  alias_139 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:123 in jagged_forward, code: context_vec = context_vec.transpose(1, 2).flatten(-2)
        alias_140: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_78);  permute_78 = None
        permute_79: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_140, [1, 0, 2]);  alias_140 = None
        view_27: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_79, [sym_size_int_3, 384]);  permute_79 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:231 in forward, code: context_vec = self.proj(context_vec)
        permute_80: "f32[384, 384][1, 384]cuda:0" = torch.ops.aten.permute.default(primals_47, [1, 0])
        mm_24: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(view_27, permute_80);  permute_80 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:76 in forward, code: attn_out = x + self.attention(self.do(self.attn_norm(x)), padding_mask=padding_mask, is_causal=is_causal, jagged=jagged, use_cache=not self.training and self.enable_kv_cache)
        add_23: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_21, mm_24);  mm_24 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        pow_13: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(add_21, 2)
        mean_12: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mean.dim(pow_13, [1], True);  pow_13 = None
        add_24: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.add.Tensor(mean_12, 1e-06);  mean_12 = None
        rsqrt_12: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.rsqrt.default(add_24);  add_24 = None
        alias_141: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(rsqrt_12)
        alias_142: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_141);  alias_141 = None
        alias_143: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_142);  alias_142 = None
        mul_63: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(add_21, rsqrt_12)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_64: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_63, primals_48)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:79 in forward, code: x=self.do(self.cross_attn_norm(x)), x_kv=x_kv, padding_mask=padding_mask, is_causal=False, jagged=jagged, use_cache=not self.training and self.enable_kv_cache
        rand_17: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.rand.default([sym_size_int_3, 384], dtype = torch.float32, device = device(type='cuda', index=0), pin_memory = False)
        gt_17: "b8[s6, 384][384, 1]cuda:0" = torch.ops.aten.gt.Scalar(rand_17, 0.3);  rand_17 = None
        mul_65: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(gt_17, mul_64);  mul_64 = None
        mul_66: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_65, 1.4285714285714286);  mul_65 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:197 in forward, code: queries = self.q(x)
        permute_81: "f32[384, 384][1, 384]cuda:0" = torch.ops.aten.permute.default(primals_49, [1, 0])
        mm_25: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(mul_66, permute_81);  permute_81 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:198 in forward, code: keys, values = self.kv(x_kv).chunk(2, dim=-1)
        permute_82: "f32[384, 768][1, 384]cuda:0" = torch.ops.aten.permute.default(primals_50, [1, 0])
        mm_26: "f32[s1, 768][768, 1]cuda:0" = torch.ops.aten.mm.default(add_15, permute_82);  permute_82 = None
        split_7 = torch.ops.aten.split.Tensor(mm_26, 384, 1);  mm_26 = None
        getitem_62: "f32[s1, 384][768, 1]cuda:0" = split_7[0]
        getitem_63: "f32[s1, 384][768, 1]cuda:0" = split_7[1];  split_7 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:114 in jagged_forward, code: queries = qu.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        view_28: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.view.default(mm_25, [sym_size_int_3, 6, 64]);  mm_25 = None
        alias_144: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(view_28);  view_28 = None
        permute_83: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_144, [1, 0, 2]);  alias_144 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:115 in jagged_forward, code: keys = ke.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        view_29: "f32[s1, 6, 64][768, 64, 1]cuda:0" = torch.ops.aten.view.default(getitem_62, [sym_size_int, 6, 64]);  getitem_62 = None
        alias_145: "f32[s1, 6, 64][768, 64, 1]cuda:0" = torch.ops.aten.alias.default(view_29);  view_29 = None
        permute_84: "f32[6, s1, 64][64, 768, 1]cuda:0" = torch.ops.aten.permute.default(alias_145, [1, 0, 2]);  alias_145 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:116 in jagged_forward, code: values = va.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        view_30: "f32[s1, 6, 64][768, 64, 1]cuda:0" = torch.ops.aten.view.default(getitem_63, [sym_size_int, 6, 64]);  getitem_63 = None
        alias_146: "f32[s1, 6, 64][768, 64, 1]cuda:0" = torch.ops.aten.alias.default(view_30);  view_30 = None
        permute_85: "f32[6, s1, 64][64, 768, 1]cuda:0" = torch.ops.aten.permute.default(alias_146, [1, 0, 2]);  alias_146 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:120 in jagged_forward, code: context_vec = F.scaled_dot_product_attention(
        alias_147: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_83);  permute_83 = None
        permute_86: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_147, [1, 0, 2]);  alias_147 = None
        alias_148: "f32[6, s1, 64][64, 768, 1]cuda:0" = torch.ops.aten.alias.default(permute_84);  permute_84 = None
        permute_87: "f32[s1, 6, 64][768, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_148, [1, 0, 2]);  alias_148 = None
        alias_149: "f32[6, s1, 64][64, 768, 1]cuda:0" = torch.ops.aten.alias.default(permute_85);  permute_85 = None
        permute_88: "f32[s1, 6, 64][768, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_149, [1, 0, 2]);  alias_149 = None
        convert_element_type_14: "i32[257][1]cuda:0" = torch.ops.prims.convert_element_type.default(primals_31, torch.int32)
        convert_element_type_15: "i32[257][1]cuda:0" = torch.ops.prims.convert_element_type.default(primals_2, torch.int32)
        alias_152: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(permute_86);  permute_86 = None
        alias_153: "f32[s1, 6, 64][768, 64, 1]cuda:0" = torch.ops.aten.alias.default(permute_87);  permute_87 = None
        alias_154: "f32[s1, 6, 64][768, 64, 1]cuda:0" = torch.ops.aten.alias.default(permute_88);  permute_88 = None
        unsqueeze_21: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(alias_152, 0);  alias_152 = None
        unsqueeze_22: "f32[1, s1, 6, 64][768*s1, 768, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(alias_153, 0);  alias_153 = None
        unsqueeze_23: "f32[1, s1, 6, 64][768*s1, 768, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(alias_154, 0);  alias_154 = None
        _efficient_attention_forward_7 = torch.ops.aten._efficient_attention_forward.default(unsqueeze_21, unsqueeze_22, unsqueeze_23, None, convert_element_type_14, convert_element_type_15, sym_size_int_4, sym_size_int_1, 0.0, 0, True)
        getitem_64: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = _efficient_attention_forward_7[0]
        getitem_65: "f32[256, 6, 32*CeilToInt(IntTrueDiv(s9, 32))][192*CeilToInt(IntTrueDiv(s9, 32)), 32*CeilToInt(IntTrueDiv(s9, 32)), 1]cuda:0" = _efficient_attention_forward_7[1]
        getitem_66: "i64[][]cuda:0" = _efficient_attention_forward_7[2]
        getitem_67: "i64[][]cuda:0" = _efficient_attention_forward_7[3];  _efficient_attention_forward_7 = None
        alias_155: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = torch.ops.aten.alias.default(getitem_64)
        alias_156: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = torch.ops.aten.alias.default(alias_155);  alias_155 = None
        squeeze_7: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_64, 0);  getitem_64 = None
        alias_157: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(squeeze_7);  squeeze_7 = None
        permute_89: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_157, [1, 0, 2]);  alias_157 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:123 in jagged_forward, code: context_vec = context_vec.transpose(1, 2).flatten(-2)
        alias_158: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_89);  permute_89 = None
        permute_90: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_158, [1, 0, 2]);  alias_158 = None
        view_31: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_90, [sym_size_int_3, 384]);  permute_90 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:231 in forward, code: context_vec = self.proj(context_vec)
        permute_91: "f32[384, 384][1, 384]cuda:0" = torch.ops.aten.permute.default(primals_51, [1, 0])
        mm_27: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(view_31, permute_91);  permute_91 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:78 in forward, code: attn_out = attn_out + self.cross_attention(
        add_25: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_23, mm_27);  add_23 = mm_27 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        pow_14: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(add_25, 2)
        mean_13: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mean.dim(pow_14, [1], True);  pow_14 = None
        add_26: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.add.Tensor(mean_13, 1e-06);  mean_13 = None
        rsqrt_13: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.rsqrt.default(add_26);  add_26 = None
        alias_159: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(rsqrt_13)
        alias_160: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_159);  alias_159 = None
        alias_161: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_160);  alias_160 = None
        mul_67: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(add_25, rsqrt_13)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_68: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_67, primals_52)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/encoder.py:36 in forward, code: return self.mlp(x)
        permute_92: "f32[384, 1024][1, 384]cuda:0" = torch.ops.aten.permute.default(primals_53, [1, 0])
        mm_28: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mm.default(mul_68, permute_92);  permute_92 = None
        sigmoid_5: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.sigmoid.default(mm_28)
        mul_69: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_28, sigmoid_5);  sigmoid_5 = None
        rand_18: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.rand.default([sym_size_int_3, 1024], dtype = torch.float32, device = device(type='cuda', index=0), pin_memory = False)
        gt_18: "b8[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.gt.Scalar(rand_18, 0.3);  rand_18 = None
        mul_70: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(gt_18, mul_69);  mul_69 = None
        mul_71: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_70, 1.4285714285714286);  mul_70 = None
        permute_93: "f32[1024, 384][1, 1024]cuda:0" = torch.ops.aten.permute.default(primals_54, [1, 0])
        mm_29: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(mul_71, permute_93);  permute_93 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:81 in forward, code: proj_out = attn_out + self.ff(attn_out)
        rand_19: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.rand.default([sym_size_int_3, 384], dtype = torch.float32, device = device(type='cuda', index=0), pin_memory = False)
        gt_19: "b8[s6, 384][384, 1]cuda:0" = torch.ops.aten.gt.Scalar(rand_19, 0.3);  rand_19 = None
        mul_72: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(gt_19, mm_29);  mm_29 = None
        mul_73: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_72, 1.4285714285714286);  mul_72 = None
        add_27: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_25, mul_73);  mul_73 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        pow_15: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(add_27, 2)
        mean_14: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mean.dim(pow_15, [1], True);  pow_15 = None
        add_28: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.add.Tensor(mean_14, 1e-06);  mean_14 = None
        rsqrt_14: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.rsqrt.default(add_28);  add_28 = None
        alias_162: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(rsqrt_14)
        alias_163: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_162);  alias_162 = None
        alias_164: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_163);  alias_163 = None
        mul_74: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(add_27, rsqrt_14)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_75: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_74, primals_55)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:76 in forward, code: attn_out = x + self.attention(self.do(self.attn_norm(x)), padding_mask=padding_mask, is_causal=is_causal, jagged=jagged, use_cache=not self.training and self.enable_kv_cache)
        rand_20: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.rand.default([sym_size_int_3, 384], dtype = torch.float32, device = device(type='cuda', index=0), pin_memory = False)
        gt_20: "b8[s6, 384][384, 1]cuda:0" = torch.ops.aten.gt.Scalar(rand_20, 0.3);  rand_20 = None
        mul_76: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(gt_20, mul_75);  mul_75 = None
        mul_77: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_76, 1.4285714285714286);  mul_76 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:200 in forward, code: queries, keys, values = self.qkv(x).chunk(3, dim=-1)
        permute_94: "f32[384, 1152][1, 384]cuda:0" = torch.ops.aten.permute.default(primals_56, [1, 0])
        mm_30: "f32[s6, 1152][1152, 1]cuda:0" = torch.ops.aten.mm.default(mul_77, permute_94);  permute_94 = None
        split_8 = torch.ops.aten.split.Tensor(mm_30, 384, 1);  mm_30 = None
        getitem_70: "f32[s6, 384][1152, 1]cuda:0" = split_8[0]
        getitem_71: "f32[s6, 384][1152, 1]cuda:0" = split_8[1]
        getitem_72: "f32[s6, 384][1152, 1]cuda:0" = split_8[2];  split_8 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:114 in jagged_forward, code: queries = qu.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        view_32: "f32[s6, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.view.default(getitem_70, [sym_size_int_3, 6, 64]);  getitem_70 = None
        alias_165: "f32[s6, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.alias.default(view_32);  view_32 = None
        permute_95: "f32[6, s6, 64][64, 1152, 1]cuda:0" = torch.ops.aten.permute.default(alias_165, [1, 0, 2]);  alias_165 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:115 in jagged_forward, code: keys = ke.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        view_33: "f32[s6, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.view.default(getitem_71, [sym_size_int_3, 6, 64]);  getitem_71 = None
        alias_166: "f32[s6, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.alias.default(view_33);  view_33 = None
        permute_96: "f32[6, s6, 64][64, 1152, 1]cuda:0" = torch.ops.aten.permute.default(alias_166, [1, 0, 2]);  alias_166 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:116 in jagged_forward, code: values = va.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        view_34: "f32[s6, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.view.default(getitem_72, [sym_size_int_3, 6, 64]);  getitem_72 = None
        alias_167: "f32[s6, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.alias.default(view_34);  view_34 = None
        permute_97: "f32[6, s6, 64][64, 1152, 1]cuda:0" = torch.ops.aten.permute.default(alias_167, [1, 0, 2]);  alias_167 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:120 in jagged_forward, code: context_vec = F.scaled_dot_product_attention(
        alias_168: "f32[6, s6, 64][64, 1152, 1]cuda:0" = torch.ops.aten.alias.default(permute_95);  permute_95 = None
        permute_98: "f32[s6, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_168, [1, 0, 2]);  alias_168 = None
        alias_169: "f32[6, s6, 64][64, 1152, 1]cuda:0" = torch.ops.aten.alias.default(permute_96);  permute_96 = None
        permute_99: "f32[s6, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_169, [1, 0, 2]);  alias_169 = None
        alias_170: "f32[6, s6, 64][64, 1152, 1]cuda:0" = torch.ops.aten.alias.default(permute_97);  permute_97 = None
        permute_100: "f32[s6, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_170, [1, 0, 2]);  alias_170 = None
        convert_element_type_16: "i32[257][1]cuda:0" = torch.ops.prims.convert_element_type.default(primals_31, torch.int32)
        convert_element_type_17: "i32[257][1]cuda:0" = torch.ops.prims.convert_element_type.default(primals_31, torch.int32)
        alias_173: "f32[s6, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.alias.default(permute_98);  permute_98 = None
        alias_174: "f32[s6, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.alias.default(permute_99);  permute_99 = None
        alias_175: "f32[s6, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.alias.default(permute_100);  permute_100 = None
        unsqueeze_24: "f32[1, s6, 6, 64][1152*s6, 1152, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(alias_173, 0);  alias_173 = None
        unsqueeze_25: "f32[1, s6, 6, 64][1152*s6, 1152, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(alias_174, 0);  alias_174 = None
        unsqueeze_26: "f32[1, s6, 6, 64][1152*s6, 1152, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(alias_175, 0);  alias_175 = None
        _efficient_attention_forward_8 = torch.ops.aten._efficient_attention_forward.default(unsqueeze_24, unsqueeze_25, unsqueeze_26, None, convert_element_type_16, convert_element_type_17, sym_size_int_4, sym_size_int_4, 0.0, 1, True)
        getitem_73: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = _efficient_attention_forward_8[0]
        getitem_74: "f32[256, 6, 32*CeilToInt(IntTrueDiv(s9, 32))][192*CeilToInt(IntTrueDiv(s9, 32)), 32*CeilToInt(IntTrueDiv(s9, 32)), 1]cuda:0" = _efficient_attention_forward_8[1]
        getitem_75: "i64[][]cuda:0" = _efficient_attention_forward_8[2]
        getitem_76: "i64[][]cuda:0" = _efficient_attention_forward_8[3];  _efficient_attention_forward_8 = None
        alias_176: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = torch.ops.aten.alias.default(getitem_73)
        alias_177: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = torch.ops.aten.alias.default(alias_176);  alias_176 = None
        squeeze_8: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_73, 0);  getitem_73 = None
        alias_178: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(squeeze_8);  squeeze_8 = None
        permute_101: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_178, [1, 0, 2]);  alias_178 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:123 in jagged_forward, code: context_vec = context_vec.transpose(1, 2).flatten(-2)
        alias_179: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_101);  permute_101 = None
        permute_102: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_179, [1, 0, 2]);  alias_179 = None
        view_35: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_102, [sym_size_int_3, 384]);  permute_102 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:231 in forward, code: context_vec = self.proj(context_vec)
        permute_103: "f32[384, 384][1, 384]cuda:0" = torch.ops.aten.permute.default(primals_57, [1, 0])
        mm_31: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(view_35, permute_103);  permute_103 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:76 in forward, code: attn_out = x + self.attention(self.do(self.attn_norm(x)), padding_mask=padding_mask, is_causal=is_causal, jagged=jagged, use_cache=not self.training and self.enable_kv_cache)
        add_29: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_27, mm_31);  mm_31 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        pow_16: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(add_27, 2)
        mean_15: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mean.dim(pow_16, [1], True);  pow_16 = None
        add_30: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.add.Tensor(mean_15, 1e-06);  mean_15 = None
        rsqrt_15: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.rsqrt.default(add_30);  add_30 = None
        alias_180: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(rsqrt_15)
        alias_181: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_180);  alias_180 = None
        alias_182: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_181);  alias_181 = None
        mul_78: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(add_27, rsqrt_15)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_79: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_78, primals_58)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:79 in forward, code: x=self.do(self.cross_attn_norm(x)), x_kv=x_kv, padding_mask=padding_mask, is_causal=False, jagged=jagged, use_cache=not self.training and self.enable_kv_cache
        rand_21: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.rand.default([sym_size_int_3, 384], dtype = torch.float32, device = device(type='cuda', index=0), pin_memory = False)
        gt_21: "b8[s6, 384][384, 1]cuda:0" = torch.ops.aten.gt.Scalar(rand_21, 0.3);  rand_21 = None
        mul_80: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(gt_21, mul_79);  mul_79 = None
        mul_81: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_80, 1.4285714285714286);  mul_80 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:197 in forward, code: queries = self.q(x)
        permute_104: "f32[384, 384][1, 384]cuda:0" = torch.ops.aten.permute.default(primals_59, [1, 0])
        mm_32: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(mul_81, permute_104);  permute_104 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:198 in forward, code: keys, values = self.kv(x_kv).chunk(2, dim=-1)
        permute_105: "f32[384, 768][1, 384]cuda:0" = torch.ops.aten.permute.default(primals_60, [1, 0])
        mm_33: "f32[s1, 768][768, 1]cuda:0" = torch.ops.aten.mm.default(add_15, permute_105);  permute_105 = None
        split_9 = torch.ops.aten.split.Tensor(mm_33, 384, 1);  mm_33 = None
        getitem_79: "f32[s1, 384][768, 1]cuda:0" = split_9[0]
        getitem_80: "f32[s1, 384][768, 1]cuda:0" = split_9[1];  split_9 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:114 in jagged_forward, code: queries = qu.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        view_36: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.view.default(mm_32, [sym_size_int_3, 6, 64]);  mm_32 = None
        alias_183: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(view_36);  view_36 = None
        permute_106: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_183, [1, 0, 2]);  alias_183 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:115 in jagged_forward, code: keys = ke.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        view_37: "f32[s1, 6, 64][768, 64, 1]cuda:0" = torch.ops.aten.view.default(getitem_79, [sym_size_int, 6, 64]);  getitem_79 = None
        alias_184: "f32[s1, 6, 64][768, 64, 1]cuda:0" = torch.ops.aten.alias.default(view_37);  view_37 = None
        permute_107: "f32[6, s1, 64][64, 768, 1]cuda:0" = torch.ops.aten.permute.default(alias_184, [1, 0, 2]);  alias_184 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:116 in jagged_forward, code: values = va.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        view_38: "f32[s1, 6, 64][768, 64, 1]cuda:0" = torch.ops.aten.view.default(getitem_80, [sym_size_int, 6, 64]);  getitem_80 = None
        alias_185: "f32[s1, 6, 64][768, 64, 1]cuda:0" = torch.ops.aten.alias.default(view_38);  view_38 = None
        permute_108: "f32[6, s1, 64][64, 768, 1]cuda:0" = torch.ops.aten.permute.default(alias_185, [1, 0, 2]);  alias_185 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:120 in jagged_forward, code: context_vec = F.scaled_dot_product_attention(
        alias_186: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_106);  permute_106 = None
        permute_109: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_186, [1, 0, 2]);  alias_186 = None
        alias_187: "f32[6, s1, 64][64, 768, 1]cuda:0" = torch.ops.aten.alias.default(permute_107);  permute_107 = None
        permute_110: "f32[s1, 6, 64][768, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_187, [1, 0, 2]);  alias_187 = None
        alias_188: "f32[6, s1, 64][64, 768, 1]cuda:0" = torch.ops.aten.alias.default(permute_108);  permute_108 = None
        permute_111: "f32[s1, 6, 64][768, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_188, [1, 0, 2]);  alias_188 = None
        convert_element_type_18: "i32[257][1]cuda:0" = torch.ops.prims.convert_element_type.default(primals_31, torch.int32)
        convert_element_type_19: "i32[257][1]cuda:0" = torch.ops.prims.convert_element_type.default(primals_2, torch.int32)
        alias_191: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(permute_109);  permute_109 = None
        alias_192: "f32[s1, 6, 64][768, 64, 1]cuda:0" = torch.ops.aten.alias.default(permute_110);  permute_110 = None
        alias_193: "f32[s1, 6, 64][768, 64, 1]cuda:0" = torch.ops.aten.alias.default(permute_111);  permute_111 = None
        unsqueeze_27: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(alias_191, 0);  alias_191 = None
        unsqueeze_28: "f32[1, s1, 6, 64][768*s1, 768, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(alias_192, 0);  alias_192 = None
        unsqueeze_29: "f32[1, s1, 6, 64][768*s1, 768, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(alias_193, 0);  alias_193 = None
        _efficient_attention_forward_9 = torch.ops.aten._efficient_attention_forward.default(unsqueeze_27, unsqueeze_28, unsqueeze_29, None, convert_element_type_18, convert_element_type_19, sym_size_int_4, sym_size_int_1, 0.0, 0, True)
        getitem_81: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = _efficient_attention_forward_9[0]
        getitem_82: "f32[256, 6, 32*CeilToInt(IntTrueDiv(s9, 32))][192*CeilToInt(IntTrueDiv(s9, 32)), 32*CeilToInt(IntTrueDiv(s9, 32)), 1]cuda:0" = _efficient_attention_forward_9[1]
        getitem_83: "i64[][]cuda:0" = _efficient_attention_forward_9[2]
        getitem_84: "i64[][]cuda:0" = _efficient_attention_forward_9[3];  _efficient_attention_forward_9 = None
        alias_194: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = torch.ops.aten.alias.default(getitem_81)
        alias_195: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = torch.ops.aten.alias.default(alias_194);  alias_194 = None
        squeeze_9: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_81, 0);  getitem_81 = None
        alias_196: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(squeeze_9);  squeeze_9 = None
        permute_112: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_196, [1, 0, 2]);  alias_196 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:123 in jagged_forward, code: context_vec = context_vec.transpose(1, 2).flatten(-2)
        alias_197: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_112);  permute_112 = None
        permute_113: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_197, [1, 0, 2]);  alias_197 = None
        view_39: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_113, [sym_size_int_3, 384]);  permute_113 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:231 in forward, code: context_vec = self.proj(context_vec)
        permute_114: "f32[384, 384][1, 384]cuda:0" = torch.ops.aten.permute.default(primals_61, [1, 0])
        mm_34: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(view_39, permute_114);  permute_114 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:78 in forward, code: attn_out = attn_out + self.cross_attention(
        add_31: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_29, mm_34);  add_29 = mm_34 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        pow_17: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(add_31, 2)
        mean_16: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mean.dim(pow_17, [1], True);  pow_17 = None
        add_32: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.add.Tensor(mean_16, 1e-06);  mean_16 = None
        rsqrt_16: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.rsqrt.default(add_32);  add_32 = None
        alias_198: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(rsqrt_16)
        alias_199: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_198);  alias_198 = None
        alias_200: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_199);  alias_199 = None
        mul_82: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(add_31, rsqrt_16)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_83: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_82, primals_62)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/encoder.py:36 in forward, code: return self.mlp(x)
        permute_115: "f32[384, 1024][1, 384]cuda:0" = torch.ops.aten.permute.default(primals_63, [1, 0])
        mm_35: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mm.default(mul_83, permute_115);  permute_115 = None
        sigmoid_6: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.sigmoid.default(mm_35)
        mul_84: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_35, sigmoid_6);  sigmoid_6 = None
        rand_22: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.rand.default([sym_size_int_3, 1024], dtype = torch.float32, device = device(type='cuda', index=0), pin_memory = False)
        gt_22: "b8[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.gt.Scalar(rand_22, 0.3);  rand_22 = None
        mul_85: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(gt_22, mul_84);  mul_84 = None
        mul_86: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_85, 1.4285714285714286);  mul_85 = None
        permute_116: "f32[1024, 384][1, 1024]cuda:0" = torch.ops.aten.permute.default(primals_64, [1, 0])
        mm_36: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(mul_86, permute_116);  permute_116 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:81 in forward, code: proj_out = attn_out + self.ff(attn_out)
        rand_23: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.rand.default([sym_size_int_3, 384], dtype = torch.float32, device = device(type='cuda', index=0), pin_memory = False)
        gt_23: "b8[s6, 384][384, 1]cuda:0" = torch.ops.aten.gt.Scalar(rand_23, 0.3);  rand_23 = None
        mul_87: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(gt_23, mm_36);  mm_36 = None
        mul_88: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_87, 1.4285714285714286);  mul_87 = None
        add_33: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_31, mul_88);  mul_88 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        pow_18: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(add_33, 2)
        mean_17: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mean.dim(pow_18, [1], True);  pow_18 = None
        add_34: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.add.Tensor(mean_17, 1e-06);  mean_17 = None
        rsqrt_17: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.rsqrt.default(add_34);  add_34 = None
        alias_201: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(rsqrt_17)
        alias_202: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_201);  alias_201 = None
        alias_203: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_202);  alias_202 = None
        mul_89: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(add_33, rsqrt_17)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_90: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_89, primals_65)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:76 in forward, code: attn_out = x + self.attention(self.do(self.attn_norm(x)), padding_mask=padding_mask, is_causal=is_causal, jagged=jagged, use_cache=not self.training and self.enable_kv_cache)
        rand_24: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.rand.default([sym_size_int_3, 384], dtype = torch.float32, device = device(type='cuda', index=0), pin_memory = False)
        gt_24: "b8[s6, 384][384, 1]cuda:0" = torch.ops.aten.gt.Scalar(rand_24, 0.3);  rand_24 = None
        mul_91: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(gt_24, mul_90);  mul_90 = None
        mul_92: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_91, 1.4285714285714286);  mul_91 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:200 in forward, code: queries, keys, values = self.qkv(x).chunk(3, dim=-1)
        permute_117: "f32[384, 1152][1, 384]cuda:0" = torch.ops.aten.permute.default(primals_66, [1, 0])
        mm_37: "f32[s6, 1152][1152, 1]cuda:0" = torch.ops.aten.mm.default(mul_92, permute_117);  permute_117 = None
        split_10 = torch.ops.aten.split.Tensor(mm_37, 384, 1);  mm_37 = None
        getitem_87: "f32[s6, 384][1152, 1]cuda:0" = split_10[0]
        getitem_88: "f32[s6, 384][1152, 1]cuda:0" = split_10[1]
        getitem_89: "f32[s6, 384][1152, 1]cuda:0" = split_10[2];  split_10 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:114 in jagged_forward, code: queries = qu.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        view_40: "f32[s6, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.view.default(getitem_87, [sym_size_int_3, 6, 64]);  getitem_87 = None
        alias_204: "f32[s6, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.alias.default(view_40);  view_40 = None
        permute_118: "f32[6, s6, 64][64, 1152, 1]cuda:0" = torch.ops.aten.permute.default(alias_204, [1, 0, 2]);  alias_204 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:115 in jagged_forward, code: keys = ke.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        view_41: "f32[s6, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.view.default(getitem_88, [sym_size_int_3, 6, 64]);  getitem_88 = None
        alias_205: "f32[s6, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.alias.default(view_41);  view_41 = None
        permute_119: "f32[6, s6, 64][64, 1152, 1]cuda:0" = torch.ops.aten.permute.default(alias_205, [1, 0, 2]);  alias_205 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:116 in jagged_forward, code: values = va.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        view_42: "f32[s6, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.view.default(getitem_89, [sym_size_int_3, 6, 64]);  getitem_89 = None
        alias_206: "f32[s6, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.alias.default(view_42);  view_42 = None
        permute_120: "f32[6, s6, 64][64, 1152, 1]cuda:0" = torch.ops.aten.permute.default(alias_206, [1, 0, 2]);  alias_206 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:120 in jagged_forward, code: context_vec = F.scaled_dot_product_attention(
        alias_207: "f32[6, s6, 64][64, 1152, 1]cuda:0" = torch.ops.aten.alias.default(permute_118);  permute_118 = None
        permute_121: "f32[s6, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_207, [1, 0, 2]);  alias_207 = None
        alias_208: "f32[6, s6, 64][64, 1152, 1]cuda:0" = torch.ops.aten.alias.default(permute_119);  permute_119 = None
        permute_122: "f32[s6, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_208, [1, 0, 2]);  alias_208 = None
        alias_209: "f32[6, s6, 64][64, 1152, 1]cuda:0" = torch.ops.aten.alias.default(permute_120);  permute_120 = None
        permute_123: "f32[s6, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_209, [1, 0, 2]);  alias_209 = None
        convert_element_type_20: "i32[257][1]cuda:0" = torch.ops.prims.convert_element_type.default(primals_31, torch.int32)
        convert_element_type_21: "i32[257][1]cuda:0" = torch.ops.prims.convert_element_type.default(primals_31, torch.int32)
        alias_212: "f32[s6, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.alias.default(permute_121);  permute_121 = None
        alias_213: "f32[s6, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.alias.default(permute_122);  permute_122 = None
        alias_214: "f32[s6, 6, 64][1152, 64, 1]cuda:0" = torch.ops.aten.alias.default(permute_123);  permute_123 = None
        unsqueeze_30: "f32[1, s6, 6, 64][1152*s6, 1152, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(alias_212, 0);  alias_212 = None
        unsqueeze_31: "f32[1, s6, 6, 64][1152*s6, 1152, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(alias_213, 0);  alias_213 = None
        unsqueeze_32: "f32[1, s6, 6, 64][1152*s6, 1152, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(alias_214, 0);  alias_214 = None
        _efficient_attention_forward_10 = torch.ops.aten._efficient_attention_forward.default(unsqueeze_30, unsqueeze_31, unsqueeze_32, None, convert_element_type_20, convert_element_type_21, sym_size_int_4, sym_size_int_4, 0.0, 1, True)
        getitem_90: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = _efficient_attention_forward_10[0]
        getitem_91: "f32[256, 6, 32*CeilToInt(IntTrueDiv(s9, 32))][192*CeilToInt(IntTrueDiv(s9, 32)), 32*CeilToInt(IntTrueDiv(s9, 32)), 1]cuda:0" = _efficient_attention_forward_10[1]
        getitem_92: "i64[][]cuda:0" = _efficient_attention_forward_10[2]
        getitem_93: "i64[][]cuda:0" = _efficient_attention_forward_10[3];  _efficient_attention_forward_10 = None
        alias_215: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = torch.ops.aten.alias.default(getitem_90)
        alias_216: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = torch.ops.aten.alias.default(alias_215);  alias_215 = None
        squeeze_10: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_90, 0);  getitem_90 = None
        alias_217: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(squeeze_10);  squeeze_10 = None
        permute_124: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_217, [1, 0, 2]);  alias_217 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:123 in jagged_forward, code: context_vec = context_vec.transpose(1, 2).flatten(-2)
        alias_218: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_124);  permute_124 = None
        permute_125: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_218, [1, 0, 2]);  alias_218 = None
        view_43: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_125, [sym_size_int_3, 384]);  permute_125 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:231 in forward, code: context_vec = self.proj(context_vec)
        permute_126: "f32[384, 384][1, 384]cuda:0" = torch.ops.aten.permute.default(primals_67, [1, 0])
        mm_38: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(view_43, permute_126);  permute_126 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:76 in forward, code: attn_out = x + self.attention(self.do(self.attn_norm(x)), padding_mask=padding_mask, is_causal=is_causal, jagged=jagged, use_cache=not self.training and self.enable_kv_cache)
        add_35: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_33, mm_38);  mm_38 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        pow_19: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(add_33, 2)
        mean_18: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mean.dim(pow_19, [1], True);  pow_19 = None
        add_36: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.add.Tensor(mean_18, 1e-06);  mean_18 = None
        rsqrt_18: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.rsqrt.default(add_36);  add_36 = None
        alias_219: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(rsqrt_18)
        alias_220: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_219);  alias_219 = None
        alias_221: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_220);  alias_220 = None
        mul_93: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(add_33, rsqrt_18)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_94: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_93, primals_68)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:79 in forward, code: x=self.do(self.cross_attn_norm(x)), x_kv=x_kv, padding_mask=padding_mask, is_causal=False, jagged=jagged, use_cache=not self.training and self.enable_kv_cache
        rand_25: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.rand.default([sym_size_int_3, 384], dtype = torch.float32, device = device(type='cuda', index=0), pin_memory = False)
        gt_25: "b8[s6, 384][384, 1]cuda:0" = torch.ops.aten.gt.Scalar(rand_25, 0.3);  rand_25 = None
        mul_95: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(gt_25, mul_94);  mul_94 = None
        mul_96: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_95, 1.4285714285714286);  mul_95 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:197 in forward, code: queries = self.q(x)
        permute_127: "f32[384, 384][1, 384]cuda:0" = torch.ops.aten.permute.default(primals_69, [1, 0])
        mm_39: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(mul_96, permute_127);  permute_127 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:198 in forward, code: keys, values = self.kv(x_kv).chunk(2, dim=-1)
        permute_128: "f32[384, 768][1, 384]cuda:0" = torch.ops.aten.permute.default(primals_70, [1, 0])
        mm_40: "f32[s1, 768][768, 1]cuda:0" = torch.ops.aten.mm.default(add_15, permute_128);  permute_128 = None
        split_11 = torch.ops.aten.split.Tensor(mm_40, 384, 1);  mm_40 = None
        getitem_96: "f32[s1, 384][768, 1]cuda:0" = split_11[0]
        getitem_97: "f32[s1, 384][768, 1]cuda:0" = split_11[1];  split_11 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:114 in jagged_forward, code: queries = qu.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        view_44: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.view.default(mm_39, [sym_size_int_3, 6, 64]);  mm_39 = None
        alias_222: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(view_44);  view_44 = None
        permute_129: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_222, [1, 0, 2]);  alias_222 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:115 in jagged_forward, code: keys = ke.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        view_45: "f32[s1, 6, 64][768, 64, 1]cuda:0" = torch.ops.aten.view.default(getitem_96, [sym_size_int, 6, 64]);  getitem_96 = None
        alias_223: "f32[s1, 6, 64][768, 64, 1]cuda:0" = torch.ops.aten.alias.default(view_45);  view_45 = None
        permute_130: "f32[6, s1, 64][64, 768, 1]cuda:0" = torch.ops.aten.permute.default(alias_223, [1, 0, 2]);  alias_223 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:116 in jagged_forward, code: values = va.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        view_46: "f32[s1, 6, 64][768, 64, 1]cuda:0" = torch.ops.aten.view.default(getitem_97, [sym_size_int, 6, 64]);  getitem_97 = None
        alias_224: "f32[s1, 6, 64][768, 64, 1]cuda:0" = torch.ops.aten.alias.default(view_46);  view_46 = None
        permute_131: "f32[6, s1, 64][64, 768, 1]cuda:0" = torch.ops.aten.permute.default(alias_224, [1, 0, 2]);  alias_224 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:120 in jagged_forward, code: context_vec = F.scaled_dot_product_attention(
        alias_225: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_129);  permute_129 = None
        permute_132: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_225, [1, 0, 2]);  alias_225 = None
        alias_226: "f32[6, s1, 64][64, 768, 1]cuda:0" = torch.ops.aten.alias.default(permute_130);  permute_130 = None
        permute_133: "f32[s1, 6, 64][768, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_226, [1, 0, 2]);  alias_226 = None
        alias_227: "f32[6, s1, 64][64, 768, 1]cuda:0" = torch.ops.aten.alias.default(permute_131);  permute_131 = None
        permute_134: "f32[s1, 6, 64][768, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_227, [1, 0, 2]);  alias_227 = None
        convert_element_type_22: "i32[257][1]cuda:0" = torch.ops.prims.convert_element_type.default(primals_31, torch.int32)
        convert_element_type_23: "i32[257][1]cuda:0" = torch.ops.prims.convert_element_type.default(primals_2, torch.int32)
        alias_230: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(permute_132);  permute_132 = None
        alias_231: "f32[s1, 6, 64][768, 64, 1]cuda:0" = torch.ops.aten.alias.default(permute_133);  permute_133 = None
        alias_232: "f32[s1, 6, 64][768, 64, 1]cuda:0" = torch.ops.aten.alias.default(permute_134);  permute_134 = None
        unsqueeze_33: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(alias_230, 0);  alias_230 = None
        unsqueeze_34: "f32[1, s1, 6, 64][768*s1, 768, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(alias_231, 0);  alias_231 = None
        unsqueeze_35: "f32[1, s1, 6, 64][768*s1, 768, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(alias_232, 0);  alias_232 = None
        _efficient_attention_forward_11 = torch.ops.aten._efficient_attention_forward.default(unsqueeze_33, unsqueeze_34, unsqueeze_35, None, convert_element_type_22, convert_element_type_23, sym_size_int_4, sym_size_int_1, 0.0, 0, True)
        getitem_98: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = _efficient_attention_forward_11[0]
        getitem_99: "f32[256, 6, 32*CeilToInt(IntTrueDiv(s9, 32))][192*CeilToInt(IntTrueDiv(s9, 32)), 32*CeilToInt(IntTrueDiv(s9, 32)), 1]cuda:0" = _efficient_attention_forward_11[1]
        getitem_100: "i64[][]cuda:0" = _efficient_attention_forward_11[2]
        getitem_101: "i64[][]cuda:0" = _efficient_attention_forward_11[3];  _efficient_attention_forward_11 = None
        alias_233: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = torch.ops.aten.alias.default(getitem_98)
        alias_234: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = torch.ops.aten.alias.default(alias_233);  alias_233 = None
        squeeze_11: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_98, 0);  getitem_98 = None
        alias_235: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(squeeze_11);  squeeze_11 = None
        permute_135: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_235, [1, 0, 2]);  alias_235 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:123 in jagged_forward, code: context_vec = context_vec.transpose(1, 2).flatten(-2)
        alias_236: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_135);  permute_135 = None
        permute_136: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_236, [1, 0, 2]);  alias_236 = None
        view_47: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_136, [sym_size_int_3, 384]);  permute_136 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:231 in forward, code: context_vec = self.proj(context_vec)
        permute_137: "f32[384, 384][1, 384]cuda:0" = torch.ops.aten.permute.default(primals_71, [1, 0])
        mm_41: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(view_47, permute_137);  permute_137 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:78 in forward, code: attn_out = attn_out + self.cross_attention(
        add_37: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_35, mm_41);  add_35 = mm_41 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        pow_20: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(add_37, 2)
        mean_19: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mean.dim(pow_20, [1], True);  pow_20 = None
        add_38: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.add.Tensor(mean_19, 1e-06);  mean_19 = None
        rsqrt_19: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.rsqrt.default(add_38);  add_38 = None
        alias_237: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(rsqrt_19)
        alias_238: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_237);  alias_237 = None
        alias_239: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_238);  alias_238 = None
        mul_97: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(add_37, rsqrt_19)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_98: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_97, primals_72)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/encoder.py:36 in forward, code: return self.mlp(x)
        permute_138: "f32[384, 1024][1, 384]cuda:0" = torch.ops.aten.permute.default(primals_73, [1, 0])
        mm_42: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mm.default(mul_98, permute_138);  permute_138 = None
        sigmoid_7: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.sigmoid.default(mm_42)
        mul_99: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_42, sigmoid_7);  sigmoid_7 = None
        rand_26: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.rand.default([sym_size_int_3, 1024], dtype = torch.float32, device = device(type='cuda', index=0), pin_memory = False)
        gt_26: "b8[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.gt.Scalar(rand_26, 0.3);  rand_26 = None
        mul_100: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(gt_26, mul_99);  mul_99 = None
        mul_101: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_100, 1.4285714285714286);  mul_100 = None
        permute_139: "f32[1024, 384][1, 1024]cuda:0" = torch.ops.aten.permute.default(primals_74, [1, 0])
        mm_43: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(mul_101, permute_139);  permute_139 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:81 in forward, code: proj_out = attn_out + self.ff(attn_out)
        rand_27: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.rand.default([sym_size_int_3, 384], dtype = torch.float32, device = device(type='cuda', index=0), pin_memory = False)
        gt_27: "b8[s6, 384][384, 1]cuda:0" = torch.ops.aten.gt.Scalar(rand_27, 0.3);  rand_27 = None
        mul_102: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(gt_27, mm_43);  mm_43 = None
        mul_103: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_102, 1.4285714285714286);  mul_102 = None
        add_39: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_37, mul_103);  mul_103 = None
        convert_element_type_24: "f32[s6, 384][384, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_27, torch.float32);  gt_27 = None
        mul_104: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_24, 1.4285714285714286);  convert_element_type_24 = None
        mul_105: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(tangents_1, mul_104);  mul_104 = None
        clone: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.clone.default(mul_105, memory_format = torch.contiguous_format);  mul_105 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/encoder.py:36 in forward, code: return self.mlp(x)
        mm_44: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mm.default(clone, primals_74);  primals_74 = None
        permute_140: "f32[384, s6][1, 384]cuda:0" = torch.ops.aten.permute.default(clone, [1, 0]);  clone = None
        mm_45: "f32[384, 1024][1024, 1]cuda:0" = torch.ops.aten.mm.default(permute_140, mul_101);  permute_140 = mul_101 = None
        convert_element_type_25: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_26, torch.float32);  gt_26 = None
        mul_106: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_25, 1.4285714285714286);  convert_element_type_25 = None
        mul_107: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_44, mul_106);  mm_44 = mul_106 = None
        clone_1: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.clone.default(mul_107, memory_format = torch.contiguous_format);  mul_107 = None
        sigmoid_8: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.sigmoid.default(mm_42)
        full_24: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.full.default([sym_size_int_3, 1024], 1, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        sub: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.sub.Tensor(full_24, sigmoid_8);  full_24 = None
        mul_108: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_42, sub);  mm_42 = sub = None
        add_40: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.add.Scalar(mul_108, 1);  mul_108 = None
        mul_109: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(sigmoid_8, add_40);  sigmoid_8 = add_40 = None
        mul_110: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(clone_1, mul_109);  clone_1 = mul_109 = None
        mm_46: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(mul_110, primals_73);  primals_73 = None
        permute_142: "f32[1024, s6][1, 1024]cuda:0" = torch.ops.aten.permute.default(mul_110, [1, 0]);  mul_110 = None
        mm_47: "f32[1024, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_142, mul_98);  permute_142 = mul_98 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_111: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_46, mul_97);  mul_97 = None
        mul_112: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_46, primals_72);  mm_46 = primals_72 = None
        sum_1: "f32[1, 384][384, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_111, [0], True);  mul_111 = None
        unsqueeze_36: "f32[1, 1, 384][384, 384, 1]cuda:0" = torch.ops.aten.unsqueeze.default(sum_1, 0);  sum_1 = None
        view_48: "f32[384][1]cuda:0" = torch.ops.aten.view.default(unsqueeze_36, [384]);  unsqueeze_36 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_113: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_112, add_37)
        mul_114: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_112, rsqrt_19);  mul_112 = rsqrt_19 = None
        sum_2: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_113, [1], True);  mul_113 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_41: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(tangents_1, mul_114);  tangents_1 = mul_114 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        alias_240: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_239);  alias_239 = None
        alias_241: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_240);  alias_240 = None
        alias_242: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_241);  alias_241 = None
        pow_21: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(alias_242, 3);  alias_242 = None
        mul_115: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mul.Scalar(sum_2, -0.5);  sum_2 = None
        mul_116: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_115, pow_21);  mul_115 = pow_21 = None
        expand: "f32[s6, 384][1, 0]cuda:0" = torch.ops.aten.expand.default(mul_116, [-1, 384]);  mul_116 = None
        div: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.div.Scalar(expand, 384);  expand = None
        pow_22: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(add_37, 1.0);  add_37 = None
        mul_117: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Scalar(pow_22, 2.0);  pow_22 = None
        mul_118: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(div, mul_117);  div = mul_117 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_42: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_41, mul_118);  add_41 = mul_118 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:231 in forward, code: context_vec = self.proj(context_vec)
        mm_48: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(add_42, primals_71);  primals_71 = None
        permute_143: "f32[384, s6][1, 384]cuda:0" = torch.ops.aten.permute.default(add_42, [1, 0])
        mm_49: "f32[384, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_143, view_47);  permute_143 = view_47 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:123 in jagged_forward, code: context_vec = context_vec.transpose(1, 2).flatten(-2)
        view_49: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.view.default(mm_48, [sym_size_int_3, 6, 64]);  mm_48 = None
        alias_243: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(view_49);  view_49 = None
        permute_144: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_243, [1, 0, 2]);  alias_243 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:120 in jagged_forward, code: context_vec = F.scaled_dot_product_attention(
        alias_244: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_144);  permute_144 = None
        permute_145: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_244, [1, 0, 2]);  alias_244 = None
        alias_245: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(permute_145);  permute_145 = None
        unsqueeze_37: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(alias_245, 0);  alias_245 = None
        alias_246: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = torch.ops.aten.alias.default(alias_234);  alias_234 = None
        alias_247: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = torch.ops.aten.alias.default(alias_246);  alias_246 = None
        _efficient_attention_backward = torch.ops.aten._efficient_attention_backward.default(unsqueeze_37, unsqueeze_33, unsqueeze_34, unsqueeze_35, None, alias_247, convert_element_type_22, convert_element_type_23, sym_size_int_4, sym_size_int_1, getitem_99, 0.0, getitem_100, getitem_101, 0, False);  unsqueeze_37 = unsqueeze_33 = unsqueeze_34 = unsqueeze_35 = alias_247 = convert_element_type_22 = convert_element_type_23 = getitem_99 = getitem_100 = getitem_101 = None
        getitem_104: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = _efficient_attention_backward[0]
        getitem_105: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = _efficient_attention_backward[1]
        getitem_106: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = _efficient_attention_backward[2];  _efficient_attention_backward = None
        squeeze_12: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_106, 0);  getitem_106 = None
        squeeze_13: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_105, 0);  getitem_105 = None
        squeeze_14: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_104, 0);  getitem_104 = None
        alias_248: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(squeeze_12);  squeeze_12 = None
        permute_146: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_248, [1, 0, 2]);  alias_248 = None
        alias_249: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(squeeze_13);  squeeze_13 = None
        permute_147: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_249, [1, 0, 2]);  alias_249 = None
        alias_250: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(squeeze_14);  squeeze_14 = None
        permute_148: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_250, [1, 0, 2]);  alias_250 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:116 in jagged_forward, code: values = va.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        alias_251: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_146);  permute_146 = None
        permute_149: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_251, [1, 0, 2]);  alias_251 = None
        view_50: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_149, [sym_size_int, 384]);  permute_149 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:115 in jagged_forward, code: keys = ke.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        alias_252: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_147);  permute_147 = None
        permute_150: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_252, [1, 0, 2]);  alias_252 = None
        view_51: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_150, [sym_size_int, 384]);  permute_150 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:114 in jagged_forward, code: queries = qu.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        alias_253: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_148);  permute_148 = None
        permute_151: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_253, [1, 0, 2]);  alias_253 = None
        view_52: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_151, [sym_size_int_3, 384]);  permute_151 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:198 in forward, code: keys, values = self.kv(x_kv).chunk(2, dim=-1)
        full_25: "f32[s1, 768][768, 1]cuda:0" = torch.ops.aten.full.default([sym_size_int, 768], 0, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        split_12 = torch.ops.aten.split.Tensor(full_25, 384, 1)
        getitem_108: "f32[s1, 384][768, 1]cuda:0" = split_12[0];  split_12 = None
        alias_254: "f32[s1, 384][768, 1]cuda:0" = torch.ops.aten.alias.default(getitem_108);  getitem_108 = None
        alias_255: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.alias.default(view_51);  view_51 = None
        copy: "f32[s1, 384][768, 1]cuda:0" = torch.ops.aten.copy.default(alias_254, alias_255);  alias_254 = alias_255 = None
        slice_scatter: "f32[s1, 768][768, 1]cuda:0" = torch.ops.aten.slice_scatter.default(full_25, copy, 1, 0, 384);  full_25 = copy = None
        alias_258: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.alias.default(view_50);  view_50 = None
        split_15 = torch.ops.aten.split.Tensor(slice_scatter, 384, 1)
        getitem_115: "f32[s1, 384][768, 1]cuda:0" = split_15[1];  split_15 = None
        alias_259: "f32[s1, 384][768, 1]cuda:0" = torch.ops.aten.alias.default(getitem_115);  getitem_115 = None
        copy_1: "f32[s1, 384][768, 1]cuda:0" = torch.ops.aten.copy.default(alias_259, alias_258);  alias_259 = alias_258 = None
        slice_scatter_1: "f32[s1, 768][768, 1]cuda:0" = torch.ops.aten.slice_scatter.default(slice_scatter, copy_1, 1, 384, 768);  slice_scatter = copy_1 = None
        mm_50: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(slice_scatter_1, primals_70);  primals_70 = None
        permute_153: "f32[768, s1][1, 768]cuda:0" = torch.ops.aten.permute.default(slice_scatter_1, [1, 0]);  slice_scatter_1 = None
        mm_51: "f32[768, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_153, add_15);  permute_153 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:197 in forward, code: queries = self.q(x)
        mm_52: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(view_52, primals_69);  primals_69 = None
        permute_154: "f32[384, s6][1, 384]cuda:0" = torch.ops.aten.permute.default(view_52, [1, 0]);  view_52 = None
        mm_53: "f32[384, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_154, mul_96);  permute_154 = mul_96 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:79 in forward, code: x=self.do(self.cross_attn_norm(x)), x_kv=x_kv, padding_mask=padding_mask, is_causal=False, jagged=jagged, use_cache=not self.training and self.enable_kv_cache
        convert_element_type_26: "f32[s6, 384][384, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_25, torch.float32);  gt_25 = None
        mul_119: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_26, 1.4285714285714286);  convert_element_type_26 = None
        mul_120: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_52, mul_119);  mm_52 = mul_119 = None
        clone_2: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.clone.default(mul_120, memory_format = torch.contiguous_format);  mul_120 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_121: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(clone_2, mul_93);  mul_93 = None
        mul_122: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(clone_2, primals_68);  clone_2 = primals_68 = None
        sum_3: "f32[1, 384][384, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_121, [0], True);  mul_121 = None
        unsqueeze_38: "f32[1, 1, 384][384, 384, 1]cuda:0" = torch.ops.aten.unsqueeze.default(sum_3, 0);  sum_3 = None
        view_53: "f32[384][1]cuda:0" = torch.ops.aten.view.default(unsqueeze_38, [384]);  unsqueeze_38 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_123: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_122, add_33)
        mul_124: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_122, rsqrt_18);  mul_122 = rsqrt_18 = None
        sum_4: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_123, [1], True);  mul_123 = None
        alias_261: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_221);  alias_221 = None
        alias_262: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_261);  alias_261 = None
        alias_263: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_262);  alias_262 = None
        pow_23: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(alias_263, 3);  alias_263 = None
        mul_125: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mul.Scalar(sum_4, -0.5);  sum_4 = None
        mul_126: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_125, pow_23);  mul_125 = pow_23 = None
        expand_1: "f32[s6, 384][1, 0]cuda:0" = torch.ops.aten.expand.default(mul_126, [-1, 384]);  mul_126 = None
        div_1: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.div.Scalar(expand_1, 384);  expand_1 = None
        pow_24: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(add_33, 1.0)
        mul_127: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Scalar(pow_24, 2.0);  pow_24 = None
        mul_128: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(div_1, mul_127);  div_1 = mul_127 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_43: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(mul_124, mul_128);  mul_124 = mul_128 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:76 in forward, code: attn_out = x + self.attention(self.do(self.attn_norm(x)), padding_mask=padding_mask, is_causal=is_causal, jagged=jagged, use_cache=not self.training and self.enable_kv_cache)
        add_44: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_43, add_42);  add_43 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:231 in forward, code: context_vec = self.proj(context_vec)
        mm_54: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(add_42, primals_67);  primals_67 = None
        permute_155: "f32[384, s6][1, 384]cuda:0" = torch.ops.aten.permute.default(add_42, [1, 0]);  add_42 = None
        mm_55: "f32[384, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_155, view_43);  permute_155 = view_43 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:123 in jagged_forward, code: context_vec = context_vec.transpose(1, 2).flatten(-2)
        view_54: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.view.default(mm_54, [sym_size_int_3, 6, 64]);  mm_54 = None
        alias_264: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(view_54);  view_54 = None
        permute_156: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_264, [1, 0, 2]);  alias_264 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:120 in jagged_forward, code: context_vec = F.scaled_dot_product_attention(
        alias_265: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_156);  permute_156 = None
        permute_157: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_265, [1, 0, 2]);  alias_265 = None
        alias_266: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(permute_157);  permute_157 = None
        unsqueeze_39: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(alias_266, 0);  alias_266 = None
        alias_267: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = torch.ops.aten.alias.default(alias_216);  alias_216 = None
        alias_268: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = torch.ops.aten.alias.default(alias_267);  alias_267 = None
        _efficient_attention_backward_1 = torch.ops.aten._efficient_attention_backward.default(unsqueeze_39, unsqueeze_30, unsqueeze_31, unsqueeze_32, None, alias_268, convert_element_type_20, convert_element_type_21, sym_size_int_4, sym_size_int_4, getitem_91, 0.0, getitem_92, getitem_93, 1, False);  unsqueeze_39 = unsqueeze_30 = unsqueeze_31 = unsqueeze_32 = alias_268 = convert_element_type_20 = convert_element_type_21 = getitem_91 = getitem_92 = getitem_93 = None
        getitem_120: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = _efficient_attention_backward_1[0]
        getitem_121: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = _efficient_attention_backward_1[1]
        getitem_122: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = _efficient_attention_backward_1[2];  _efficient_attention_backward_1 = None
        squeeze_15: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_122, 0);  getitem_122 = None
        squeeze_16: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_121, 0);  getitem_121 = None
        squeeze_17: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_120, 0);  getitem_120 = None
        alias_269: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(squeeze_15);  squeeze_15 = None
        permute_158: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_269, [1, 0, 2]);  alias_269 = None
        alias_270: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(squeeze_16);  squeeze_16 = None
        permute_159: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_270, [1, 0, 2]);  alias_270 = None
        alias_271: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(squeeze_17);  squeeze_17 = None
        permute_160: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_271, [1, 0, 2]);  alias_271 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:116 in jagged_forward, code: values = va.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        alias_272: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_158);  permute_158 = None
        permute_161: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_272, [1, 0, 2]);  alias_272 = None
        view_55: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_161, [sym_size_int_3, 384]);  permute_161 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:115 in jagged_forward, code: keys = ke.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        alias_273: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_159);  permute_159 = None
        permute_162: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_273, [1, 0, 2]);  alias_273 = None
        view_56: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_162, [sym_size_int_3, 384]);  permute_162 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:114 in jagged_forward, code: queries = qu.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        alias_274: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_160);  permute_160 = None
        permute_163: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_274, [1, 0, 2]);  alias_274 = None
        view_57: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_163, [sym_size_int_3, 384]);  permute_163 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:200 in forward, code: queries, keys, values = self.qkv(x).chunk(3, dim=-1)
        full_26: "f32[s6, 1152][1152, 1]cuda:0" = torch.ops.aten.full.default([sym_size_int_3, 1152], 0, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        split_18 = torch.ops.aten.split.Tensor(full_26, 384, 1)
        getitem_124: "f32[s6, 384][1152, 1]cuda:0" = split_18[0];  split_18 = None
        alias_275: "f32[s6, 384][1152, 1]cuda:0" = torch.ops.aten.alias.default(getitem_124);  getitem_124 = None
        alias_276: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.alias.default(view_57);  view_57 = None
        copy_2: "f32[s6, 384][1152, 1]cuda:0" = torch.ops.aten.copy.default(alias_275, alias_276);  alias_275 = alias_276 = None
        slice_scatter_2: "f32[s6, 1152][1152, 1]cuda:0" = torch.ops.aten.slice_scatter.default(full_26, copy_2, 1, 0, 384);  full_26 = copy_2 = None
        alias_279: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.alias.default(view_56);  view_56 = None
        split_21 = torch.ops.aten.split.Tensor(slice_scatter_2, 384, 1)
        getitem_134: "f32[s6, 384][1152, 1]cuda:0" = split_21[1];  split_21 = None
        alias_280: "f32[s6, 384][1152, 1]cuda:0" = torch.ops.aten.alias.default(getitem_134);  getitem_134 = None
        copy_3: "f32[s6, 384][1152, 1]cuda:0" = torch.ops.aten.copy.default(alias_280, alias_279);  alias_280 = alias_279 = None
        slice_scatter_3: "f32[s6, 1152][1152, 1]cuda:0" = torch.ops.aten.slice_scatter.default(slice_scatter_2, copy_3, 1, 384, 768);  slice_scatter_2 = copy_3 = None
        alias_283: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.alias.default(view_55);  view_55 = None
        split_24 = torch.ops.aten.split.Tensor(slice_scatter_3, 384, 1)
        getitem_144: "f32[s6, 384][1152, 1]cuda:0" = split_24[2];  split_24 = None
        alias_284: "f32[s6, 384][1152, 1]cuda:0" = torch.ops.aten.alias.default(getitem_144);  getitem_144 = None
        copy_4: "f32[s6, 384][1152, 1]cuda:0" = torch.ops.aten.copy.default(alias_284, alias_283);  alias_284 = alias_283 = None
        slice_scatter_4: "f32[s6, 1152][1152, 1]cuda:0" = torch.ops.aten.slice_scatter.default(slice_scatter_3, copy_4, 1, 768, 1152);  slice_scatter_3 = copy_4 = None
        mm_56: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(slice_scatter_4, primals_66);  primals_66 = None
        permute_165: "f32[1152, s6][1, 1152]cuda:0" = torch.ops.aten.permute.default(slice_scatter_4, [1, 0]);  slice_scatter_4 = None
        mm_57: "f32[1152, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_165, mul_92);  permute_165 = mul_92 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:76 in forward, code: attn_out = x + self.attention(self.do(self.attn_norm(x)), padding_mask=padding_mask, is_causal=is_causal, jagged=jagged, use_cache=not self.training and self.enable_kv_cache)
        convert_element_type_27: "f32[s6, 384][384, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_24, torch.float32);  gt_24 = None
        mul_129: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_27, 1.4285714285714286);  convert_element_type_27 = None
        mul_130: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_56, mul_129);  mm_56 = mul_129 = None
        clone_3: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.clone.default(mul_130, memory_format = torch.contiguous_format);  mul_130 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_131: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(clone_3, mul_89);  mul_89 = None
        mul_132: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(clone_3, primals_65);  clone_3 = primals_65 = None
        sum_5: "f32[1, 384][384, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_131, [0], True);  mul_131 = None
        unsqueeze_40: "f32[1, 1, 384][384, 384, 1]cuda:0" = torch.ops.aten.unsqueeze.default(sum_5, 0);  sum_5 = None
        view_58: "f32[384][1]cuda:0" = torch.ops.aten.view.default(unsqueeze_40, [384]);  unsqueeze_40 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_133: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_132, add_33)
        mul_134: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_132, rsqrt_17);  mul_132 = rsqrt_17 = None
        sum_6: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_133, [1], True);  mul_133 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_45: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_44, mul_134);  add_44 = mul_134 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        alias_286: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_203);  alias_203 = None
        alias_287: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_286);  alias_286 = None
        alias_288: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_287);  alias_287 = None
        pow_25: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(alias_288, 3);  alias_288 = None
        mul_135: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mul.Scalar(sum_6, -0.5);  sum_6 = None
        mul_136: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_135, pow_25);  mul_135 = pow_25 = None
        expand_2: "f32[s6, 384][1, 0]cuda:0" = torch.ops.aten.expand.default(mul_136, [-1, 384]);  mul_136 = None
        div_2: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.div.Scalar(expand_2, 384);  expand_2 = None
        pow_26: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(add_33, 1.0);  add_33 = None
        mul_137: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Scalar(pow_26, 2.0);  pow_26 = None
        mul_138: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(div_2, mul_137);  div_2 = mul_137 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_46: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_45, mul_138);  add_45 = mul_138 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:81 in forward, code: proj_out = attn_out + self.ff(attn_out)
        convert_element_type_28: "f32[s6, 384][384, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_23, torch.float32);  gt_23 = None
        mul_139: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_28, 1.4285714285714286);  convert_element_type_28 = None
        mul_140: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(add_46, mul_139);  mul_139 = None
        clone_4: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.clone.default(mul_140, memory_format = torch.contiguous_format);  mul_140 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/encoder.py:36 in forward, code: return self.mlp(x)
        mm_58: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mm.default(clone_4, primals_64);  primals_64 = None
        permute_166: "f32[384, s6][1, 384]cuda:0" = torch.ops.aten.permute.default(clone_4, [1, 0]);  clone_4 = None
        mm_59: "f32[384, 1024][1024, 1]cuda:0" = torch.ops.aten.mm.default(permute_166, mul_86);  permute_166 = mul_86 = None
        convert_element_type_29: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_22, torch.float32);  gt_22 = None
        mul_141: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_29, 1.4285714285714286);  convert_element_type_29 = None
        mul_142: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_58, mul_141);  mm_58 = mul_141 = None
        clone_5: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.clone.default(mul_142, memory_format = torch.contiguous_format);  mul_142 = None
        sigmoid_9: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.sigmoid.default(mm_35)
        full_27: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.full.default([sym_size_int_3, 1024], 1, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        sub_1: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.sub.Tensor(full_27, sigmoid_9);  full_27 = None
        mul_143: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_35, sub_1);  mm_35 = sub_1 = None
        add_47: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.add.Scalar(mul_143, 1);  mul_143 = None
        mul_144: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(sigmoid_9, add_47);  sigmoid_9 = add_47 = None
        mul_145: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(clone_5, mul_144);  clone_5 = mul_144 = None
        mm_60: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(mul_145, primals_63);  primals_63 = None
        permute_168: "f32[1024, s6][1, 1024]cuda:0" = torch.ops.aten.permute.default(mul_145, [1, 0]);  mul_145 = None
        mm_61: "f32[1024, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_168, mul_83);  permute_168 = mul_83 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_146: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_60, mul_82);  mul_82 = None
        mul_147: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_60, primals_62);  mm_60 = primals_62 = None
        sum_7: "f32[1, 384][384, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_146, [0], True);  mul_146 = None
        unsqueeze_41: "f32[1, 1, 384][384, 384, 1]cuda:0" = torch.ops.aten.unsqueeze.default(sum_7, 0);  sum_7 = None
        view_59: "f32[384][1]cuda:0" = torch.ops.aten.view.default(unsqueeze_41, [384]);  unsqueeze_41 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_148: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_147, add_31)
        mul_149: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_147, rsqrt_16);  mul_147 = rsqrt_16 = None
        sum_8: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_148, [1], True);  mul_148 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_48: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_46, mul_149);  add_46 = mul_149 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        alias_289: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_200);  alias_200 = None
        alias_290: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_289);  alias_289 = None
        alias_291: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_290);  alias_290 = None
        pow_27: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(alias_291, 3);  alias_291 = None
        mul_150: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mul.Scalar(sum_8, -0.5);  sum_8 = None
        mul_151: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_150, pow_27);  mul_150 = pow_27 = None
        expand_3: "f32[s6, 384][1, 0]cuda:0" = torch.ops.aten.expand.default(mul_151, [-1, 384]);  mul_151 = None
        div_3: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.div.Scalar(expand_3, 384);  expand_3 = None
        pow_28: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(add_31, 1.0);  add_31 = None
        mul_152: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Scalar(pow_28, 2.0);  pow_28 = None
        mul_153: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(div_3, mul_152);  div_3 = mul_152 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_49: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_48, mul_153);  add_48 = mul_153 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:231 in forward, code: context_vec = self.proj(context_vec)
        mm_62: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(add_49, primals_61);  primals_61 = None
        permute_169: "f32[384, s6][1, 384]cuda:0" = torch.ops.aten.permute.default(add_49, [1, 0])
        mm_63: "f32[384, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_169, view_39);  permute_169 = view_39 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:123 in jagged_forward, code: context_vec = context_vec.transpose(1, 2).flatten(-2)
        view_60: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.view.default(mm_62, [sym_size_int_3, 6, 64]);  mm_62 = None
        alias_292: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(view_60);  view_60 = None
        permute_170: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_292, [1, 0, 2]);  alias_292 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:120 in jagged_forward, code: context_vec = F.scaled_dot_product_attention(
        alias_293: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_170);  permute_170 = None
        permute_171: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_293, [1, 0, 2]);  alias_293 = None
        alias_294: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(permute_171);  permute_171 = None
        unsqueeze_42: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(alias_294, 0);  alias_294 = None
        alias_295: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = torch.ops.aten.alias.default(alias_195);  alias_195 = None
        alias_296: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = torch.ops.aten.alias.default(alias_295);  alias_295 = None
        _efficient_attention_backward_2 = torch.ops.aten._efficient_attention_backward.default(unsqueeze_42, unsqueeze_27, unsqueeze_28, unsqueeze_29, None, alias_296, convert_element_type_18, convert_element_type_19, sym_size_int_4, sym_size_int_1, getitem_82, 0.0, getitem_83, getitem_84, 0, False);  unsqueeze_42 = unsqueeze_27 = unsqueeze_28 = unsqueeze_29 = alias_296 = convert_element_type_18 = convert_element_type_19 = getitem_82 = getitem_83 = getitem_84 = None
        getitem_151: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = _efficient_attention_backward_2[0]
        getitem_152: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = _efficient_attention_backward_2[1]
        getitem_153: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = _efficient_attention_backward_2[2];  _efficient_attention_backward_2 = None
        squeeze_18: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_153, 0);  getitem_153 = None
        squeeze_19: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_152, 0);  getitem_152 = None
        squeeze_20: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_151, 0);  getitem_151 = None
        alias_297: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(squeeze_18);  squeeze_18 = None
        permute_172: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_297, [1, 0, 2]);  alias_297 = None
        alias_298: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(squeeze_19);  squeeze_19 = None
        permute_173: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_298, [1, 0, 2]);  alias_298 = None
        alias_299: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(squeeze_20);  squeeze_20 = None
        permute_174: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_299, [1, 0, 2]);  alias_299 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:116 in jagged_forward, code: values = va.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        alias_300: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_172);  permute_172 = None
        permute_175: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_300, [1, 0, 2]);  alias_300 = None
        view_61: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_175, [sym_size_int, 384]);  permute_175 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:115 in jagged_forward, code: keys = ke.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        alias_301: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_173);  permute_173 = None
        permute_176: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_301, [1, 0, 2]);  alias_301 = None
        view_62: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_176, [sym_size_int, 384]);  permute_176 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:114 in jagged_forward, code: queries = qu.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        alias_302: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_174);  permute_174 = None
        permute_177: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_302, [1, 0, 2]);  alias_302 = None
        view_63: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_177, [sym_size_int_3, 384]);  permute_177 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:198 in forward, code: keys, values = self.kv(x_kv).chunk(2, dim=-1)
        full_28: "f32[s1, 768][768, 1]cuda:0" = torch.ops.aten.full.default([sym_size_int, 768], 0, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        split_27 = torch.ops.aten.split.Tensor(full_28, 384, 1)
        getitem_155: "f32[s1, 384][768, 1]cuda:0" = split_27[0];  split_27 = None
        alias_303: "f32[s1, 384][768, 1]cuda:0" = torch.ops.aten.alias.default(getitem_155);  getitem_155 = None
        alias_304: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.alias.default(view_62);  view_62 = None
        copy_5: "f32[s1, 384][768, 1]cuda:0" = torch.ops.aten.copy.default(alias_303, alias_304);  alias_303 = alias_304 = None
        slice_scatter_5: "f32[s1, 768][768, 1]cuda:0" = torch.ops.aten.slice_scatter.default(full_28, copy_5, 1, 0, 384);  full_28 = copy_5 = None
        alias_307: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.alias.default(view_61);  view_61 = None
        split_30 = torch.ops.aten.split.Tensor(slice_scatter_5, 384, 1)
        getitem_162: "f32[s1, 384][768, 1]cuda:0" = split_30[1];  split_30 = None
        alias_308: "f32[s1, 384][768, 1]cuda:0" = torch.ops.aten.alias.default(getitem_162);  getitem_162 = None
        copy_6: "f32[s1, 384][768, 1]cuda:0" = torch.ops.aten.copy.default(alias_308, alias_307);  alias_308 = alias_307 = None
        slice_scatter_6: "f32[s1, 768][768, 1]cuda:0" = torch.ops.aten.slice_scatter.default(slice_scatter_5, copy_6, 1, 384, 768);  slice_scatter_5 = copy_6 = None
        mm_64: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(slice_scatter_6, primals_60);  primals_60 = None
        permute_179: "f32[768, s1][1, 768]cuda:0" = torch.ops.aten.permute.default(slice_scatter_6, [1, 0]);  slice_scatter_6 = None
        mm_65: "f32[768, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_179, add_15);  permute_179 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:198 in forward, code: keys, values = self.kv(x_kv).chunk(2, dim=-1)
        add_50: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(mm_50, mm_64);  mm_50 = mm_64 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:197 in forward, code: queries = self.q(x)
        mm_66: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(view_63, primals_59);  primals_59 = None
        permute_180: "f32[384, s6][1, 384]cuda:0" = torch.ops.aten.permute.default(view_63, [1, 0]);  view_63 = None
        mm_67: "f32[384, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_180, mul_81);  permute_180 = mul_81 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:79 in forward, code: x=self.do(self.cross_attn_norm(x)), x_kv=x_kv, padding_mask=padding_mask, is_causal=False, jagged=jagged, use_cache=not self.training and self.enable_kv_cache
        convert_element_type_30: "f32[s6, 384][384, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_21, torch.float32);  gt_21 = None
        mul_154: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_30, 1.4285714285714286);  convert_element_type_30 = None
        mul_155: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_66, mul_154);  mm_66 = mul_154 = None
        clone_6: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.clone.default(mul_155, memory_format = torch.contiguous_format);  mul_155 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_156: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(clone_6, mul_78);  mul_78 = None
        mul_157: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(clone_6, primals_58);  clone_6 = primals_58 = None
        sum_9: "f32[1, 384][384, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_156, [0], True);  mul_156 = None
        unsqueeze_43: "f32[1, 1, 384][384, 384, 1]cuda:0" = torch.ops.aten.unsqueeze.default(sum_9, 0);  sum_9 = None
        view_64: "f32[384][1]cuda:0" = torch.ops.aten.view.default(unsqueeze_43, [384]);  unsqueeze_43 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_158: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_157, add_27)
        mul_159: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_157, rsqrt_15);  mul_157 = rsqrt_15 = None
        sum_10: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_158, [1], True);  mul_158 = None
        alias_310: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_182);  alias_182 = None
        alias_311: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_310);  alias_310 = None
        alias_312: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_311);  alias_311 = None
        pow_29: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(alias_312, 3);  alias_312 = None
        mul_160: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mul.Scalar(sum_10, -0.5);  sum_10 = None
        mul_161: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_160, pow_29);  mul_160 = pow_29 = None
        expand_4: "f32[s6, 384][1, 0]cuda:0" = torch.ops.aten.expand.default(mul_161, [-1, 384]);  mul_161 = None
        div_4: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.div.Scalar(expand_4, 384);  expand_4 = None
        pow_30: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(add_27, 1.0)
        mul_162: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Scalar(pow_30, 2.0);  pow_30 = None
        mul_163: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(div_4, mul_162);  div_4 = mul_162 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_51: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(mul_159, mul_163);  mul_159 = mul_163 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:76 in forward, code: attn_out = x + self.attention(self.do(self.attn_norm(x)), padding_mask=padding_mask, is_causal=is_causal, jagged=jagged, use_cache=not self.training and self.enable_kv_cache)
        add_52: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_51, add_49);  add_51 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:231 in forward, code: context_vec = self.proj(context_vec)
        mm_68: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(add_49, primals_57);  primals_57 = None
        permute_181: "f32[384, s6][1, 384]cuda:0" = torch.ops.aten.permute.default(add_49, [1, 0]);  add_49 = None
        mm_69: "f32[384, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_181, view_35);  permute_181 = view_35 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:123 in jagged_forward, code: context_vec = context_vec.transpose(1, 2).flatten(-2)
        view_65: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.view.default(mm_68, [sym_size_int_3, 6, 64]);  mm_68 = None
        alias_313: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(view_65);  view_65 = None
        permute_182: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_313, [1, 0, 2]);  alias_313 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:120 in jagged_forward, code: context_vec = F.scaled_dot_product_attention(
        alias_314: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_182);  permute_182 = None
        permute_183: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_314, [1, 0, 2]);  alias_314 = None
        alias_315: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(permute_183);  permute_183 = None
        unsqueeze_44: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(alias_315, 0);  alias_315 = None
        alias_316: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = torch.ops.aten.alias.default(alias_177);  alias_177 = None
        alias_317: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = torch.ops.aten.alias.default(alias_316);  alias_316 = None
        _efficient_attention_backward_3 = torch.ops.aten._efficient_attention_backward.default(unsqueeze_44, unsqueeze_24, unsqueeze_25, unsqueeze_26, None, alias_317, convert_element_type_16, convert_element_type_17, sym_size_int_4, sym_size_int_4, getitem_74, 0.0, getitem_75, getitem_76, 1, False);  unsqueeze_44 = unsqueeze_24 = unsqueeze_25 = unsqueeze_26 = alias_317 = convert_element_type_16 = convert_element_type_17 = getitem_74 = getitem_75 = getitem_76 = None
        getitem_167: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = _efficient_attention_backward_3[0]
        getitem_168: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = _efficient_attention_backward_3[1]
        getitem_169: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = _efficient_attention_backward_3[2];  _efficient_attention_backward_3 = None
        squeeze_21: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_169, 0);  getitem_169 = None
        squeeze_22: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_168, 0);  getitem_168 = None
        squeeze_23: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_167, 0);  getitem_167 = None
        alias_318: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(squeeze_21);  squeeze_21 = None
        permute_184: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_318, [1, 0, 2]);  alias_318 = None
        alias_319: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(squeeze_22);  squeeze_22 = None
        permute_185: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_319, [1, 0, 2]);  alias_319 = None
        alias_320: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(squeeze_23);  squeeze_23 = None
        permute_186: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_320, [1, 0, 2]);  alias_320 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:116 in jagged_forward, code: values = va.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        alias_321: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_184);  permute_184 = None
        permute_187: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_321, [1, 0, 2]);  alias_321 = None
        view_66: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_187, [sym_size_int_3, 384]);  permute_187 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:115 in jagged_forward, code: keys = ke.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        alias_322: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_185);  permute_185 = None
        permute_188: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_322, [1, 0, 2]);  alias_322 = None
        view_67: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_188, [sym_size_int_3, 384]);  permute_188 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:114 in jagged_forward, code: queries = qu.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        alias_323: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_186);  permute_186 = None
        permute_189: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_323, [1, 0, 2]);  alias_323 = None
        view_68: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_189, [sym_size_int_3, 384]);  permute_189 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:200 in forward, code: queries, keys, values = self.qkv(x).chunk(3, dim=-1)
        full_29: "f32[s6, 1152][1152, 1]cuda:0" = torch.ops.aten.full.default([sym_size_int_3, 1152], 0, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        split_33 = torch.ops.aten.split.Tensor(full_29, 384, 1)
        getitem_171: "f32[s6, 384][1152, 1]cuda:0" = split_33[0];  split_33 = None
        alias_324: "f32[s6, 384][1152, 1]cuda:0" = torch.ops.aten.alias.default(getitem_171);  getitem_171 = None
        alias_325: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.alias.default(view_68);  view_68 = None
        copy_7: "f32[s6, 384][1152, 1]cuda:0" = torch.ops.aten.copy.default(alias_324, alias_325);  alias_324 = alias_325 = None
        slice_scatter_7: "f32[s6, 1152][1152, 1]cuda:0" = torch.ops.aten.slice_scatter.default(full_29, copy_7, 1, 0, 384);  full_29 = copy_7 = None
        alias_328: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.alias.default(view_67);  view_67 = None
        split_36 = torch.ops.aten.split.Tensor(slice_scatter_7, 384, 1)
        getitem_181: "f32[s6, 384][1152, 1]cuda:0" = split_36[1];  split_36 = None
        alias_329: "f32[s6, 384][1152, 1]cuda:0" = torch.ops.aten.alias.default(getitem_181);  getitem_181 = None
        copy_8: "f32[s6, 384][1152, 1]cuda:0" = torch.ops.aten.copy.default(alias_329, alias_328);  alias_329 = alias_328 = None
        slice_scatter_8: "f32[s6, 1152][1152, 1]cuda:0" = torch.ops.aten.slice_scatter.default(slice_scatter_7, copy_8, 1, 384, 768);  slice_scatter_7 = copy_8 = None
        alias_332: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.alias.default(view_66);  view_66 = None
        split_39 = torch.ops.aten.split.Tensor(slice_scatter_8, 384, 1)
        getitem_191: "f32[s6, 384][1152, 1]cuda:0" = split_39[2];  split_39 = None
        alias_333: "f32[s6, 384][1152, 1]cuda:0" = torch.ops.aten.alias.default(getitem_191);  getitem_191 = None
        copy_9: "f32[s6, 384][1152, 1]cuda:0" = torch.ops.aten.copy.default(alias_333, alias_332);  alias_333 = alias_332 = None
        slice_scatter_9: "f32[s6, 1152][1152, 1]cuda:0" = torch.ops.aten.slice_scatter.default(slice_scatter_8, copy_9, 1, 768, 1152);  slice_scatter_8 = copy_9 = None
        mm_70: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(slice_scatter_9, primals_56);  primals_56 = None
        permute_191: "f32[1152, s6][1, 1152]cuda:0" = torch.ops.aten.permute.default(slice_scatter_9, [1, 0]);  slice_scatter_9 = None
        mm_71: "f32[1152, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_191, mul_77);  permute_191 = mul_77 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:76 in forward, code: attn_out = x + self.attention(self.do(self.attn_norm(x)), padding_mask=padding_mask, is_causal=is_causal, jagged=jagged, use_cache=not self.training and self.enable_kv_cache)
        convert_element_type_31: "f32[s6, 384][384, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_20, torch.float32);  gt_20 = None
        mul_164: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_31, 1.4285714285714286);  convert_element_type_31 = None
        mul_165: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_70, mul_164);  mm_70 = mul_164 = None
        clone_7: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.clone.default(mul_165, memory_format = torch.contiguous_format);  mul_165 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_166: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(clone_7, mul_74);  mul_74 = None
        mul_167: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(clone_7, primals_55);  clone_7 = primals_55 = None
        sum_11: "f32[1, 384][384, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_166, [0], True);  mul_166 = None
        unsqueeze_45: "f32[1, 1, 384][384, 384, 1]cuda:0" = torch.ops.aten.unsqueeze.default(sum_11, 0);  sum_11 = None
        view_69: "f32[384][1]cuda:0" = torch.ops.aten.view.default(unsqueeze_45, [384]);  unsqueeze_45 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_168: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_167, add_27)
        mul_169: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_167, rsqrt_14);  mul_167 = rsqrt_14 = None
        sum_12: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_168, [1], True);  mul_168 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_53: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_52, mul_169);  add_52 = mul_169 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        alias_335: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_164);  alias_164 = None
        alias_336: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_335);  alias_335 = None
        alias_337: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_336);  alias_336 = None
        pow_31: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(alias_337, 3);  alias_337 = None
        mul_170: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mul.Scalar(sum_12, -0.5);  sum_12 = None
        mul_171: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_170, pow_31);  mul_170 = pow_31 = None
        expand_5: "f32[s6, 384][1, 0]cuda:0" = torch.ops.aten.expand.default(mul_171, [-1, 384]);  mul_171 = None
        div_5: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.div.Scalar(expand_5, 384);  expand_5 = None
        pow_32: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(add_27, 1.0);  add_27 = None
        mul_172: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Scalar(pow_32, 2.0);  pow_32 = None
        mul_173: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(div_5, mul_172);  div_5 = mul_172 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_54: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_53, mul_173);  add_53 = mul_173 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:81 in forward, code: proj_out = attn_out + self.ff(attn_out)
        convert_element_type_32: "f32[s6, 384][384, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_19, torch.float32);  gt_19 = None
        mul_174: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_32, 1.4285714285714286);  convert_element_type_32 = None
        mul_175: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(add_54, mul_174);  mul_174 = None
        clone_8: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.clone.default(mul_175, memory_format = torch.contiguous_format);  mul_175 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/encoder.py:36 in forward, code: return self.mlp(x)
        mm_72: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mm.default(clone_8, primals_54);  primals_54 = None
        permute_192: "f32[384, s6][1, 384]cuda:0" = torch.ops.aten.permute.default(clone_8, [1, 0]);  clone_8 = None
        mm_73: "f32[384, 1024][1024, 1]cuda:0" = torch.ops.aten.mm.default(permute_192, mul_71);  permute_192 = mul_71 = None
        convert_element_type_33: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_18, torch.float32);  gt_18 = None
        mul_176: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_33, 1.4285714285714286);  convert_element_type_33 = None
        mul_177: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_72, mul_176);  mm_72 = mul_176 = None
        clone_9: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.clone.default(mul_177, memory_format = torch.contiguous_format);  mul_177 = None
        sigmoid_10: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.sigmoid.default(mm_28)
        full_30: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.full.default([sym_size_int_3, 1024], 1, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        sub_2: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.sub.Tensor(full_30, sigmoid_10);  full_30 = None
        mul_178: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_28, sub_2);  mm_28 = sub_2 = None
        add_55: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.add.Scalar(mul_178, 1);  mul_178 = None
        mul_179: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(sigmoid_10, add_55);  sigmoid_10 = add_55 = None
        mul_180: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(clone_9, mul_179);  clone_9 = mul_179 = None
        mm_74: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(mul_180, primals_53);  primals_53 = None
        permute_194: "f32[1024, s6][1, 1024]cuda:0" = torch.ops.aten.permute.default(mul_180, [1, 0]);  mul_180 = None
        mm_75: "f32[1024, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_194, mul_68);  permute_194 = mul_68 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_181: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_74, mul_67);  mul_67 = None
        mul_182: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_74, primals_52);  mm_74 = primals_52 = None
        sum_13: "f32[1, 384][384, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_181, [0], True);  mul_181 = None
        unsqueeze_46: "f32[1, 1, 384][384, 384, 1]cuda:0" = torch.ops.aten.unsqueeze.default(sum_13, 0);  sum_13 = None
        view_70: "f32[384][1]cuda:0" = torch.ops.aten.view.default(unsqueeze_46, [384]);  unsqueeze_46 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_183: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_182, add_25)
        mul_184: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_182, rsqrt_13);  mul_182 = rsqrt_13 = None
        sum_14: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_183, [1], True);  mul_183 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_56: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_54, mul_184);  add_54 = mul_184 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        alias_338: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_161);  alias_161 = None
        alias_339: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_338);  alias_338 = None
        alias_340: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_339);  alias_339 = None
        pow_33: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(alias_340, 3);  alias_340 = None
        mul_185: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mul.Scalar(sum_14, -0.5);  sum_14 = None
        mul_186: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_185, pow_33);  mul_185 = pow_33 = None
        expand_6: "f32[s6, 384][1, 0]cuda:0" = torch.ops.aten.expand.default(mul_186, [-1, 384]);  mul_186 = None
        div_6: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.div.Scalar(expand_6, 384);  expand_6 = None
        pow_34: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(add_25, 1.0);  add_25 = None
        mul_187: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Scalar(pow_34, 2.0);  pow_34 = None
        mul_188: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(div_6, mul_187);  div_6 = mul_187 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_57: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_56, mul_188);  add_56 = mul_188 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:231 in forward, code: context_vec = self.proj(context_vec)
        mm_76: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(add_57, primals_51);  primals_51 = None
        permute_195: "f32[384, s6][1, 384]cuda:0" = torch.ops.aten.permute.default(add_57, [1, 0])
        mm_77: "f32[384, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_195, view_31);  permute_195 = view_31 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:123 in jagged_forward, code: context_vec = context_vec.transpose(1, 2).flatten(-2)
        view_71: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.view.default(mm_76, [sym_size_int_3, 6, 64]);  mm_76 = None
        alias_341: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(view_71);  view_71 = None
        permute_196: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_341, [1, 0, 2]);  alias_341 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:120 in jagged_forward, code: context_vec = F.scaled_dot_product_attention(
        alias_342: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_196);  permute_196 = None
        permute_197: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_342, [1, 0, 2]);  alias_342 = None
        alias_343: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(permute_197);  permute_197 = None
        unsqueeze_47: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(alias_343, 0);  alias_343 = None
        alias_344: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = torch.ops.aten.alias.default(alias_156);  alias_156 = None
        alias_345: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = torch.ops.aten.alias.default(alias_344);  alias_344 = None
        _efficient_attention_backward_4 = torch.ops.aten._efficient_attention_backward.default(unsqueeze_47, unsqueeze_21, unsqueeze_22, unsqueeze_23, None, alias_345, convert_element_type_14, convert_element_type_15, sym_size_int_4, sym_size_int_1, getitem_65, 0.0, getitem_66, getitem_67, 0, False);  unsqueeze_47 = unsqueeze_21 = unsqueeze_22 = unsqueeze_23 = alias_345 = convert_element_type_14 = convert_element_type_15 = getitem_65 = getitem_66 = getitem_67 = None
        getitem_198: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = _efficient_attention_backward_4[0]
        getitem_199: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = _efficient_attention_backward_4[1]
        getitem_200: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = _efficient_attention_backward_4[2];  _efficient_attention_backward_4 = None
        squeeze_24: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_200, 0);  getitem_200 = None
        squeeze_25: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_199, 0);  getitem_199 = None
        squeeze_26: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_198, 0);  getitem_198 = None
        alias_346: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(squeeze_24);  squeeze_24 = None
        permute_198: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_346, [1, 0, 2]);  alias_346 = None
        alias_347: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(squeeze_25);  squeeze_25 = None
        permute_199: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_347, [1, 0, 2]);  alias_347 = None
        alias_348: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(squeeze_26);  squeeze_26 = None
        permute_200: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_348, [1, 0, 2]);  alias_348 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:116 in jagged_forward, code: values = va.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        alias_349: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_198);  permute_198 = None
        permute_201: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_349, [1, 0, 2]);  alias_349 = None
        view_72: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_201, [sym_size_int, 384]);  permute_201 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:115 in jagged_forward, code: keys = ke.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        alias_350: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_199);  permute_199 = None
        permute_202: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_350, [1, 0, 2]);  alias_350 = None
        view_73: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_202, [sym_size_int, 384]);  permute_202 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:114 in jagged_forward, code: queries = qu.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        alias_351: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_200);  permute_200 = None
        permute_203: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_351, [1, 0, 2]);  alias_351 = None
        view_74: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_203, [sym_size_int_3, 384]);  permute_203 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:198 in forward, code: keys, values = self.kv(x_kv).chunk(2, dim=-1)
        full_31: "f32[s1, 768][768, 1]cuda:0" = torch.ops.aten.full.default([sym_size_int, 768], 0, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        split_42 = torch.ops.aten.split.Tensor(full_31, 384, 1)
        getitem_202: "f32[s1, 384][768, 1]cuda:0" = split_42[0];  split_42 = None
        alias_352: "f32[s1, 384][768, 1]cuda:0" = torch.ops.aten.alias.default(getitem_202);  getitem_202 = None
        alias_353: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.alias.default(view_73);  view_73 = None
        copy_10: "f32[s1, 384][768, 1]cuda:0" = torch.ops.aten.copy.default(alias_352, alias_353);  alias_352 = alias_353 = None
        slice_scatter_10: "f32[s1, 768][768, 1]cuda:0" = torch.ops.aten.slice_scatter.default(full_31, copy_10, 1, 0, 384);  full_31 = copy_10 = None
        alias_356: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.alias.default(view_72);  view_72 = None
        split_45 = torch.ops.aten.split.Tensor(slice_scatter_10, 384, 1)
        getitem_209: "f32[s1, 384][768, 1]cuda:0" = split_45[1];  split_45 = None
        alias_357: "f32[s1, 384][768, 1]cuda:0" = torch.ops.aten.alias.default(getitem_209);  getitem_209 = None
        copy_11: "f32[s1, 384][768, 1]cuda:0" = torch.ops.aten.copy.default(alias_357, alias_356);  alias_357 = alias_356 = None
        slice_scatter_11: "f32[s1, 768][768, 1]cuda:0" = torch.ops.aten.slice_scatter.default(slice_scatter_10, copy_11, 1, 384, 768);  slice_scatter_10 = copy_11 = None
        mm_78: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(slice_scatter_11, primals_50);  primals_50 = None
        permute_205: "f32[768, s1][1, 768]cuda:0" = torch.ops.aten.permute.default(slice_scatter_11, [1, 0]);  slice_scatter_11 = None
        mm_79: "f32[768, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_205, add_15);  permute_205 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:198 in forward, code: keys, values = self.kv(x_kv).chunk(2, dim=-1)
        add_58: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_50, mm_78);  add_50 = mm_78 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:197 in forward, code: queries = self.q(x)
        mm_80: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(view_74, primals_49);  primals_49 = None
        permute_206: "f32[384, s6][1, 384]cuda:0" = torch.ops.aten.permute.default(view_74, [1, 0]);  view_74 = None
        mm_81: "f32[384, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_206, mul_66);  permute_206 = mul_66 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:79 in forward, code: x=self.do(self.cross_attn_norm(x)), x_kv=x_kv, padding_mask=padding_mask, is_causal=False, jagged=jagged, use_cache=not self.training and self.enable_kv_cache
        convert_element_type_34: "f32[s6, 384][384, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_17, torch.float32);  gt_17 = None
        mul_189: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_34, 1.4285714285714286);  convert_element_type_34 = None
        mul_190: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_80, mul_189);  mm_80 = mul_189 = None
        clone_10: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.clone.default(mul_190, memory_format = torch.contiguous_format);  mul_190 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_191: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(clone_10, mul_63);  mul_63 = None
        mul_192: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(clone_10, primals_48);  clone_10 = primals_48 = None
        sum_15: "f32[1, 384][384, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_191, [0], True);  mul_191 = None
        unsqueeze_48: "f32[1, 1, 384][384, 384, 1]cuda:0" = torch.ops.aten.unsqueeze.default(sum_15, 0);  sum_15 = None
        view_75: "f32[384][1]cuda:0" = torch.ops.aten.view.default(unsqueeze_48, [384]);  unsqueeze_48 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_193: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_192, add_21)
        mul_194: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_192, rsqrt_12);  mul_192 = rsqrt_12 = None
        sum_16: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_193, [1], True);  mul_193 = None
        alias_359: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_143);  alias_143 = None
        alias_360: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_359);  alias_359 = None
        alias_361: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_360);  alias_360 = None
        pow_35: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(alias_361, 3);  alias_361 = None
        mul_195: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mul.Scalar(sum_16, -0.5);  sum_16 = None
        mul_196: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_195, pow_35);  mul_195 = pow_35 = None
        expand_7: "f32[s6, 384][1, 0]cuda:0" = torch.ops.aten.expand.default(mul_196, [-1, 384]);  mul_196 = None
        div_7: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.div.Scalar(expand_7, 384);  expand_7 = None
        pow_36: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(add_21, 1.0)
        mul_197: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Scalar(pow_36, 2.0);  pow_36 = None
        mul_198: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(div_7, mul_197);  div_7 = mul_197 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_59: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(mul_194, mul_198);  mul_194 = mul_198 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:76 in forward, code: attn_out = x + self.attention(self.do(self.attn_norm(x)), padding_mask=padding_mask, is_causal=is_causal, jagged=jagged, use_cache=not self.training and self.enable_kv_cache)
        add_60: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_59, add_57);  add_59 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:231 in forward, code: context_vec = self.proj(context_vec)
        mm_82: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(add_57, primals_47);  primals_47 = None
        permute_207: "f32[384, s6][1, 384]cuda:0" = torch.ops.aten.permute.default(add_57, [1, 0]);  add_57 = None
        mm_83: "f32[384, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_207, view_27);  permute_207 = view_27 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:123 in jagged_forward, code: context_vec = context_vec.transpose(1, 2).flatten(-2)
        view_76: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.view.default(mm_82, [sym_size_int_3, 6, 64]);  mm_82 = None
        alias_362: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(view_76);  view_76 = None
        permute_208: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_362, [1, 0, 2]);  alias_362 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:120 in jagged_forward, code: context_vec = F.scaled_dot_product_attention(
        alias_363: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_208);  permute_208 = None
        permute_209: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_363, [1, 0, 2]);  alias_363 = None
        alias_364: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(permute_209);  permute_209 = None
        unsqueeze_49: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(alias_364, 0);  alias_364 = None
        alias_365: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = torch.ops.aten.alias.default(alias_138);  alias_138 = None
        alias_366: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = torch.ops.aten.alias.default(alias_365);  alias_365 = None
        _efficient_attention_backward_5 = torch.ops.aten._efficient_attention_backward.default(unsqueeze_49, unsqueeze_18, unsqueeze_19, unsqueeze_20, None, alias_366, convert_element_type_12, convert_element_type_13, sym_size_int_4, sym_size_int_4, getitem_57, 0.0, getitem_58, getitem_59, 1, False);  unsqueeze_49 = unsqueeze_18 = unsqueeze_19 = unsqueeze_20 = alias_366 = convert_element_type_12 = convert_element_type_13 = getitem_57 = getitem_58 = getitem_59 = None
        getitem_214: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = _efficient_attention_backward_5[0]
        getitem_215: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = _efficient_attention_backward_5[1]
        getitem_216: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = _efficient_attention_backward_5[2];  _efficient_attention_backward_5 = None
        squeeze_27: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_216, 0);  getitem_216 = None
        squeeze_28: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_215, 0);  getitem_215 = None
        squeeze_29: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_214, 0);  getitem_214 = None
        alias_367: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(squeeze_27);  squeeze_27 = None
        permute_210: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_367, [1, 0, 2]);  alias_367 = None
        alias_368: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(squeeze_28);  squeeze_28 = None
        permute_211: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_368, [1, 0, 2]);  alias_368 = None
        alias_369: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(squeeze_29);  squeeze_29 = None
        permute_212: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_369, [1, 0, 2]);  alias_369 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:116 in jagged_forward, code: values = va.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        alias_370: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_210);  permute_210 = None
        permute_213: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_370, [1, 0, 2]);  alias_370 = None
        view_77: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_213, [sym_size_int_3, 384]);  permute_213 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:115 in jagged_forward, code: keys = ke.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        alias_371: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_211);  permute_211 = None
        permute_214: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_371, [1, 0, 2]);  alias_371 = None
        view_78: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_214, [sym_size_int_3, 384]);  permute_214 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:114 in jagged_forward, code: queries = qu.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        alias_372: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_212);  permute_212 = None
        permute_215: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_372, [1, 0, 2]);  alias_372 = None
        view_79: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_215, [sym_size_int_3, 384]);  permute_215 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:200 in forward, code: queries, keys, values = self.qkv(x).chunk(3, dim=-1)
        full_32: "f32[s6, 1152][1152, 1]cuda:0" = torch.ops.aten.full.default([sym_size_int_3, 1152], 0, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        split_48 = torch.ops.aten.split.Tensor(full_32, 384, 1)
        getitem_218: "f32[s6, 384][1152, 1]cuda:0" = split_48[0];  split_48 = None
        alias_373: "f32[s6, 384][1152, 1]cuda:0" = torch.ops.aten.alias.default(getitem_218);  getitem_218 = None
        alias_374: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.alias.default(view_79);  view_79 = None
        copy_12: "f32[s6, 384][1152, 1]cuda:0" = torch.ops.aten.copy.default(alias_373, alias_374);  alias_373 = alias_374 = None
        slice_scatter_12: "f32[s6, 1152][1152, 1]cuda:0" = torch.ops.aten.slice_scatter.default(full_32, copy_12, 1, 0, 384);  full_32 = copy_12 = None
        alias_377: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.alias.default(view_78);  view_78 = None
        split_51 = torch.ops.aten.split.Tensor(slice_scatter_12, 384, 1)
        getitem_228: "f32[s6, 384][1152, 1]cuda:0" = split_51[1];  split_51 = None
        alias_378: "f32[s6, 384][1152, 1]cuda:0" = torch.ops.aten.alias.default(getitem_228);  getitem_228 = None
        copy_13: "f32[s6, 384][1152, 1]cuda:0" = torch.ops.aten.copy.default(alias_378, alias_377);  alias_378 = alias_377 = None
        slice_scatter_13: "f32[s6, 1152][1152, 1]cuda:0" = torch.ops.aten.slice_scatter.default(slice_scatter_12, copy_13, 1, 384, 768);  slice_scatter_12 = copy_13 = None
        alias_381: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.alias.default(view_77);  view_77 = None
        split_54 = torch.ops.aten.split.Tensor(slice_scatter_13, 384, 1)
        getitem_238: "f32[s6, 384][1152, 1]cuda:0" = split_54[2];  split_54 = None
        alias_382: "f32[s6, 384][1152, 1]cuda:0" = torch.ops.aten.alias.default(getitem_238);  getitem_238 = None
        copy_14: "f32[s6, 384][1152, 1]cuda:0" = torch.ops.aten.copy.default(alias_382, alias_381);  alias_382 = alias_381 = None
        slice_scatter_14: "f32[s6, 1152][1152, 1]cuda:0" = torch.ops.aten.slice_scatter.default(slice_scatter_13, copy_14, 1, 768, 1152);  slice_scatter_13 = copy_14 = None
        mm_84: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(slice_scatter_14, primals_46);  primals_46 = None
        permute_217: "f32[1152, s6][1, 1152]cuda:0" = torch.ops.aten.permute.default(slice_scatter_14, [1, 0]);  slice_scatter_14 = None
        mm_85: "f32[1152, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_217, mul_62);  permute_217 = mul_62 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:76 in forward, code: attn_out = x + self.attention(self.do(self.attn_norm(x)), padding_mask=padding_mask, is_causal=is_causal, jagged=jagged, use_cache=not self.training and self.enable_kv_cache)
        convert_element_type_35: "f32[s6, 384][384, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_16, torch.float32);  gt_16 = None
        mul_199: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_35, 1.4285714285714286);  convert_element_type_35 = None
        mul_200: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_84, mul_199);  mm_84 = mul_199 = None
        clone_11: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.clone.default(mul_200, memory_format = torch.contiguous_format);  mul_200 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_201: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(clone_11, mul_59);  mul_59 = None
        mul_202: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(clone_11, primals_45);  clone_11 = primals_45 = None
        sum_17: "f32[1, 384][384, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_201, [0], True);  mul_201 = None
        unsqueeze_50: "f32[1, 1, 384][384, 384, 1]cuda:0" = torch.ops.aten.unsqueeze.default(sum_17, 0);  sum_17 = None
        view_80: "f32[384][1]cuda:0" = torch.ops.aten.view.default(unsqueeze_50, [384]);  unsqueeze_50 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_203: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_202, add_21)
        mul_204: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_202, rsqrt_11);  mul_202 = rsqrt_11 = None
        sum_18: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_203, [1], True);  mul_203 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_61: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_60, mul_204);  add_60 = mul_204 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        alias_384: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_125);  alias_125 = None
        alias_385: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_384);  alias_384 = None
        alias_386: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_385);  alias_385 = None
        pow_37: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(alias_386, 3);  alias_386 = None
        mul_205: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mul.Scalar(sum_18, -0.5);  sum_18 = None
        mul_206: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_205, pow_37);  mul_205 = pow_37 = None
        expand_8: "f32[s6, 384][1, 0]cuda:0" = torch.ops.aten.expand.default(mul_206, [-1, 384]);  mul_206 = None
        div_8: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.div.Scalar(expand_8, 384);  expand_8 = None
        pow_38: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(add_21, 1.0);  add_21 = None
        mul_207: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Scalar(pow_38, 2.0);  pow_38 = None
        mul_208: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(div_8, mul_207);  div_8 = mul_207 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_62: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_61, mul_208);  add_61 = mul_208 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:81 in forward, code: proj_out = attn_out + self.ff(attn_out)
        convert_element_type_36: "f32[s6, 384][384, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_15, torch.float32);  gt_15 = None
        mul_209: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_36, 1.4285714285714286);  convert_element_type_36 = None
        mul_210: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(add_62, mul_209);  mul_209 = None
        clone_12: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.clone.default(mul_210, memory_format = torch.contiguous_format);  mul_210 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/encoder.py:36 in forward, code: return self.mlp(x)
        mm_86: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mm.default(clone_12, primals_44);  primals_44 = None
        permute_218: "f32[384, s6][1, 384]cuda:0" = torch.ops.aten.permute.default(clone_12, [1, 0]);  clone_12 = None
        mm_87: "f32[384, 1024][1024, 1]cuda:0" = torch.ops.aten.mm.default(permute_218, mul_56);  permute_218 = mul_56 = None
        convert_element_type_37: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_14, torch.float32);  gt_14 = None
        mul_211: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_37, 1.4285714285714286);  convert_element_type_37 = None
        mul_212: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_86, mul_211);  mm_86 = mul_211 = None
        clone_13: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.clone.default(mul_212, memory_format = torch.contiguous_format);  mul_212 = None
        sigmoid_11: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.sigmoid.default(mm_21)
        full_33: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.full.default([sym_size_int_3, 1024], 1, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        sub_3: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.sub.Tensor(full_33, sigmoid_11);  full_33 = None
        mul_213: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_21, sub_3);  mm_21 = sub_3 = None
        add_63: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.add.Scalar(mul_213, 1);  mul_213 = None
        mul_214: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(sigmoid_11, add_63);  sigmoid_11 = add_63 = None
        mul_215: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(clone_13, mul_214);  clone_13 = mul_214 = None
        mm_88: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(mul_215, primals_43);  primals_43 = None
        permute_220: "f32[1024, s6][1, 1024]cuda:0" = torch.ops.aten.permute.default(mul_215, [1, 0]);  mul_215 = None
        mm_89: "f32[1024, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_220, mul_53);  permute_220 = mul_53 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_216: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_88, mul_52);  mul_52 = None
        mul_217: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_88, primals_42);  mm_88 = primals_42 = None
        sum_19: "f32[1, 384][384, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_216, [0], True);  mul_216 = None
        unsqueeze_51: "f32[1, 1, 384][384, 384, 1]cuda:0" = torch.ops.aten.unsqueeze.default(sum_19, 0);  sum_19 = None
        view_81: "f32[384][1]cuda:0" = torch.ops.aten.view.default(unsqueeze_51, [384]);  unsqueeze_51 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_218: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_217, add_19)
        mul_219: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_217, rsqrt_10);  mul_217 = rsqrt_10 = None
        sum_20: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_218, [1], True);  mul_218 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_64: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_62, mul_219);  add_62 = mul_219 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        alias_387: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_122);  alias_122 = None
        alias_388: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_387);  alias_387 = None
        alias_389: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_388);  alias_388 = None
        pow_39: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(alias_389, 3);  alias_389 = None
        mul_220: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mul.Scalar(sum_20, -0.5);  sum_20 = None
        mul_221: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_220, pow_39);  mul_220 = pow_39 = None
        expand_9: "f32[s6, 384][1, 0]cuda:0" = torch.ops.aten.expand.default(mul_221, [-1, 384]);  mul_221 = None
        div_9: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.div.Scalar(expand_9, 384);  expand_9 = None
        pow_40: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(add_19, 1.0);  add_19 = None
        mul_222: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Scalar(pow_40, 2.0);  pow_40 = None
        mul_223: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(div_9, mul_222);  div_9 = mul_222 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_65: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_64, mul_223);  add_64 = mul_223 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:231 in forward, code: context_vec = self.proj(context_vec)
        mm_90: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(add_65, primals_41);  primals_41 = None
        permute_221: "f32[384, s6][1, 384]cuda:0" = torch.ops.aten.permute.default(add_65, [1, 0])
        mm_91: "f32[384, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_221, view_23);  permute_221 = view_23 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:123 in jagged_forward, code: context_vec = context_vec.transpose(1, 2).flatten(-2)
        view_82: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.view.default(mm_90, [sym_size_int_3, 6, 64]);  mm_90 = None
        alias_390: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(view_82);  view_82 = None
        permute_222: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_390, [1, 0, 2]);  alias_390 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:120 in jagged_forward, code: context_vec = F.scaled_dot_product_attention(
        alias_391: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_222);  permute_222 = None
        permute_223: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_391, [1, 0, 2]);  alias_391 = None
        alias_392: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(permute_223);  permute_223 = None
        unsqueeze_52: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(alias_392, 0);  alias_392 = None
        alias_393: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = torch.ops.aten.alias.default(alias_117);  alias_117 = None
        alias_394: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = torch.ops.aten.alias.default(alias_393);  alias_393 = None
        _efficient_attention_backward_6 = torch.ops.aten._efficient_attention_backward.default(unsqueeze_52, unsqueeze_15, unsqueeze_16, unsqueeze_17, None, alias_394, convert_element_type_10, convert_element_type_11, sym_size_int_4, sym_size_int_1, getitem_48, 0.0, getitem_49, getitem_50, 0, False);  unsqueeze_52 = unsqueeze_15 = unsqueeze_16 = unsqueeze_17 = alias_394 = convert_element_type_10 = convert_element_type_11 = getitem_48 = getitem_49 = getitem_50 = None
        getitem_245: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = _efficient_attention_backward_6[0]
        getitem_246: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = _efficient_attention_backward_6[1]
        getitem_247: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = _efficient_attention_backward_6[2];  _efficient_attention_backward_6 = None
        squeeze_30: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_247, 0);  getitem_247 = None
        squeeze_31: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_246, 0);  getitem_246 = None
        squeeze_32: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_245, 0);  getitem_245 = None
        alias_395: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(squeeze_30);  squeeze_30 = None
        permute_224: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_395, [1, 0, 2]);  alias_395 = None
        alias_396: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(squeeze_31);  squeeze_31 = None
        permute_225: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_396, [1, 0, 2]);  alias_396 = None
        alias_397: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(squeeze_32);  squeeze_32 = None
        permute_226: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_397, [1, 0, 2]);  alias_397 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:116 in jagged_forward, code: values = va.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        alias_398: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_224);  permute_224 = None
        permute_227: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_398, [1, 0, 2]);  alias_398 = None
        view_83: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_227, [sym_size_int, 384]);  permute_227 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:115 in jagged_forward, code: keys = ke.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        alias_399: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_225);  permute_225 = None
        permute_228: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_399, [1, 0, 2]);  alias_399 = None
        view_84: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_228, [sym_size_int, 384]);  permute_228 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:114 in jagged_forward, code: queries = qu.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        alias_400: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_226);  permute_226 = None
        permute_229: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_400, [1, 0, 2]);  alias_400 = None
        view_85: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_229, [sym_size_int_3, 384]);  permute_229 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:198 in forward, code: keys, values = self.kv(x_kv).chunk(2, dim=-1)
        full_34: "f32[s1, 768][768, 1]cuda:0" = torch.ops.aten.full.default([sym_size_int, 768], 0, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        split_57 = torch.ops.aten.split.Tensor(full_34, 384, 1)
        getitem_249: "f32[s1, 384][768, 1]cuda:0" = split_57[0];  split_57 = None
        alias_401: "f32[s1, 384][768, 1]cuda:0" = torch.ops.aten.alias.default(getitem_249);  getitem_249 = None
        alias_402: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.alias.default(view_84);  view_84 = None
        copy_15: "f32[s1, 384][768, 1]cuda:0" = torch.ops.aten.copy.default(alias_401, alias_402);  alias_401 = alias_402 = None
        slice_scatter_15: "f32[s1, 768][768, 1]cuda:0" = torch.ops.aten.slice_scatter.default(full_34, copy_15, 1, 0, 384);  full_34 = copy_15 = None
        alias_405: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.alias.default(view_83);  view_83 = None
        split_60 = torch.ops.aten.split.Tensor(slice_scatter_15, 384, 1)
        getitem_256: "f32[s1, 384][768, 1]cuda:0" = split_60[1];  split_60 = None
        alias_406: "f32[s1, 384][768, 1]cuda:0" = torch.ops.aten.alias.default(getitem_256);  getitem_256 = None
        copy_16: "f32[s1, 384][768, 1]cuda:0" = torch.ops.aten.copy.default(alias_406, alias_405);  alias_406 = alias_405 = None
        slice_scatter_16: "f32[s1, 768][768, 1]cuda:0" = torch.ops.aten.slice_scatter.default(slice_scatter_15, copy_16, 1, 384, 768);  slice_scatter_15 = copy_16 = None
        mm_92: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(slice_scatter_16, primals_40);  primals_40 = None
        permute_231: "f32[768, s1][1, 768]cuda:0" = torch.ops.aten.permute.default(slice_scatter_16, [1, 0]);  slice_scatter_16 = None
        mm_93: "f32[768, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_231, add_15);  permute_231 = add_15 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:198 in forward, code: keys, values = self.kv(x_kv).chunk(2, dim=-1)
        add_66: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_58, mm_92);  add_58 = mm_92 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:197 in forward, code: queries = self.q(x)
        mm_94: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(view_85, primals_39);  primals_39 = None
        permute_232: "f32[384, s6][1, 384]cuda:0" = torch.ops.aten.permute.default(view_85, [1, 0]);  view_85 = None
        mm_95: "f32[384, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_232, mul_51);  permute_232 = mul_51 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:79 in forward, code: x=self.do(self.cross_attn_norm(x)), x_kv=x_kv, padding_mask=padding_mask, is_causal=False, jagged=jagged, use_cache=not self.training and self.enable_kv_cache
        convert_element_type_38: "f32[s6, 384][384, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_13, torch.float32);  gt_13 = None
        mul_224: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_38, 1.4285714285714286);  convert_element_type_38 = None
        mul_225: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_94, mul_224);  mm_94 = mul_224 = None
        clone_14: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.clone.default(mul_225, memory_format = torch.contiguous_format);  mul_225 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_226: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(clone_14, mul_48);  mul_48 = None
        mul_227: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(clone_14, primals_38);  clone_14 = primals_38 = None
        sum_21: "f32[1, 384][384, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_226, [0], True);  mul_226 = None
        unsqueeze_53: "f32[1, 1, 384][384, 384, 1]cuda:0" = torch.ops.aten.unsqueeze.default(sum_21, 0);  sum_21 = None
        view_86: "f32[384][1]cuda:0" = torch.ops.aten.view.default(unsqueeze_53, [384]);  unsqueeze_53 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_228: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_227, primals_30)
        mul_229: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_227, rsqrt_9);  mul_227 = rsqrt_9 = None
        sum_22: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_228, [1], True);  mul_228 = None
        alias_408: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_104);  alias_104 = None
        alias_409: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_408);  alias_408 = None
        alias_410: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_409);  alias_409 = None
        pow_41: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(alias_410, 3);  alias_410 = None
        mul_230: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mul.Scalar(sum_22, -0.5);  sum_22 = None
        mul_231: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_230, pow_41);  mul_230 = pow_41 = None
        expand_10: "f32[s6, 384][1, 0]cuda:0" = torch.ops.aten.expand.default(mul_231, [-1, 384]);  mul_231 = None
        div_10: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.div.Scalar(expand_10, 384);  expand_10 = None
        pow_42: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(primals_30, 1.0)
        mul_232: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Scalar(pow_42, 2.0);  pow_42 = None
        mul_233: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(div_10, mul_232);  div_10 = mul_232 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_67: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(mul_229, mul_233);  mul_229 = mul_233 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:76 in forward, code: attn_out = x + self.attention(self.do(self.attn_norm(x)), padding_mask=padding_mask, is_causal=is_causal, jagged=jagged, use_cache=not self.training and self.enable_kv_cache)
        add_68: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_67, add_65);  add_67 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:231 in forward, code: context_vec = self.proj(context_vec)
        mm_96: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(add_65, primals_37);  primals_37 = None
        permute_233: "f32[384, s6][1, 384]cuda:0" = torch.ops.aten.permute.default(add_65, [1, 0]);  add_65 = None
        mm_97: "f32[384, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_233, view_19);  permute_233 = view_19 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:123 in jagged_forward, code: context_vec = context_vec.transpose(1, 2).flatten(-2)
        view_87: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.view.default(mm_96, [sym_size_int_3, 6, 64]);  mm_96 = None
        alias_411: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(view_87);  view_87 = None
        permute_234: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_411, [1, 0, 2]);  alias_411 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:120 in jagged_forward, code: context_vec = F.scaled_dot_product_attention(
        alias_412: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_234);  permute_234 = None
        permute_235: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_412, [1, 0, 2]);  alias_412 = None
        alias_413: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(permute_235);  permute_235 = None
        unsqueeze_54: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(alias_413, 0);  alias_413 = None
        alias_414: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = torch.ops.aten.alias.default(alias_99);  alias_99 = None
        alias_415: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = torch.ops.aten.alias.default(alias_414);  alias_414 = None
        _efficient_attention_backward_7 = torch.ops.aten._efficient_attention_backward.default(unsqueeze_54, unsqueeze_12, unsqueeze_13, unsqueeze_14, None, alias_415, convert_element_type_8, convert_element_type_9, sym_size_int_4, sym_size_int_4, getitem_40, 0.0, getitem_41, getitem_42, 1, False);  unsqueeze_54 = unsqueeze_12 = unsqueeze_13 = unsqueeze_14 = alias_415 = convert_element_type_8 = convert_element_type_9 = sym_size_int_4 = getitem_40 = getitem_41 = getitem_42 = None
        getitem_261: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = _efficient_attention_backward_7[0]
        getitem_262: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = _efficient_attention_backward_7[1]
        getitem_263: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = _efficient_attention_backward_7[2];  _efficient_attention_backward_7 = None
        squeeze_33: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_263, 0);  getitem_263 = None
        squeeze_34: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_262, 0);  getitem_262 = None
        squeeze_35: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_261, 0);  getitem_261 = None
        alias_416: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(squeeze_33);  squeeze_33 = None
        permute_236: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_416, [1, 0, 2]);  alias_416 = None
        alias_417: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(squeeze_34);  squeeze_34 = None
        permute_237: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_417, [1, 0, 2]);  alias_417 = None
        alias_418: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(squeeze_35);  squeeze_35 = None
        permute_238: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_418, [1, 0, 2]);  alias_418 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:116 in jagged_forward, code: values = va.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        alias_419: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_236);  permute_236 = None
        permute_239: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_419, [1, 0, 2]);  alias_419 = None
        view_88: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_239, [sym_size_int_3, 384]);  permute_239 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:115 in jagged_forward, code: keys = ke.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        alias_420: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_237);  permute_237 = None
        permute_240: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_420, [1, 0, 2]);  alias_420 = None
        view_89: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_240, [sym_size_int_3, 384]);  permute_240 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:114 in jagged_forward, code: queries = qu.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        alias_421: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_238);  permute_238 = None
        permute_241: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_421, [1, 0, 2]);  alias_421 = None
        view_90: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_241, [sym_size_int_3, 384]);  permute_241 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:200 in forward, code: queries, keys, values = self.qkv(x).chunk(3, dim=-1)
        full_35: "f32[s6, 1152][1152, 1]cuda:0" = torch.ops.aten.full.default([sym_size_int_3, 1152], 0, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False);  sym_size_int_3 = None
        split_63 = torch.ops.aten.split.Tensor(full_35, 384, 1)
        getitem_265: "f32[s6, 384][1152, 1]cuda:0" = split_63[0];  split_63 = None
        alias_422: "f32[s6, 384][1152, 1]cuda:0" = torch.ops.aten.alias.default(getitem_265);  getitem_265 = None
        alias_423: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.alias.default(view_90);  view_90 = None
        copy_17: "f32[s6, 384][1152, 1]cuda:0" = torch.ops.aten.copy.default(alias_422, alias_423);  alias_422 = alias_423 = None
        slice_scatter_17: "f32[s6, 1152][1152, 1]cuda:0" = torch.ops.aten.slice_scatter.default(full_35, copy_17, 1, 0, 384);  full_35 = copy_17 = None
        alias_426: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.alias.default(view_89);  view_89 = None
        split_66 = torch.ops.aten.split.Tensor(slice_scatter_17, 384, 1)
        getitem_275: "f32[s6, 384][1152, 1]cuda:0" = split_66[1];  split_66 = None
        alias_427: "f32[s6, 384][1152, 1]cuda:0" = torch.ops.aten.alias.default(getitem_275);  getitem_275 = None
        copy_18: "f32[s6, 384][1152, 1]cuda:0" = torch.ops.aten.copy.default(alias_427, alias_426);  alias_427 = alias_426 = None
        slice_scatter_18: "f32[s6, 1152][1152, 1]cuda:0" = torch.ops.aten.slice_scatter.default(slice_scatter_17, copy_18, 1, 384, 768);  slice_scatter_17 = copy_18 = None
        alias_430: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.alias.default(view_88);  view_88 = None
        split_69 = torch.ops.aten.split.Tensor(slice_scatter_18, 384, 1)
        getitem_285: "f32[s6, 384][1152, 1]cuda:0" = split_69[2];  split_69 = None
        alias_431: "f32[s6, 384][1152, 1]cuda:0" = torch.ops.aten.alias.default(getitem_285);  getitem_285 = None
        copy_19: "f32[s6, 384][1152, 1]cuda:0" = torch.ops.aten.copy.default(alias_431, alias_430);  alias_431 = alias_430 = None
        slice_scatter_19: "f32[s6, 1152][1152, 1]cuda:0" = torch.ops.aten.slice_scatter.default(slice_scatter_18, copy_19, 1, 768, 1152);  slice_scatter_18 = copy_19 = None
        mm_98: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(slice_scatter_19, primals_36);  primals_36 = None
        permute_243: "f32[1152, s6][1, 1152]cuda:0" = torch.ops.aten.permute.default(slice_scatter_19, [1, 0]);  slice_scatter_19 = None
        mm_99: "f32[1152, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_243, mul_47);  permute_243 = mul_47 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:76 in forward, code: attn_out = x + self.attention(self.do(self.attn_norm(x)), padding_mask=padding_mask, is_causal=is_causal, jagged=jagged, use_cache=not self.training and self.enable_kv_cache)
        convert_element_type_39: "f32[s6, 384][384, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_12, torch.float32);  gt_12 = None
        mul_234: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_39, 1.4285714285714286);  convert_element_type_39 = None
        mul_235: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_98, mul_234);  mm_98 = mul_234 = None
        clone_15: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.clone.default(mul_235, memory_format = torch.contiguous_format);  mul_235 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_236: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(clone_15, mul_44);  mul_44 = None
        mul_237: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(clone_15, primals_35);  clone_15 = primals_35 = None
        sum_23: "f32[1, 384][384, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_236, [0], True);  mul_236 = None
        unsqueeze_55: "f32[1, 1, 384][384, 384, 1]cuda:0" = torch.ops.aten.unsqueeze.default(sum_23, 0);  sum_23 = None
        view_91: "f32[384][1]cuda:0" = torch.ops.aten.view.default(unsqueeze_55, [384]);  unsqueeze_55 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_238: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_237, primals_30)
        mul_239: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_237, rsqrt_8);  mul_237 = rsqrt_8 = None
        sum_24: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_238, [1], True);  mul_238 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_69: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_68, mul_239);  add_68 = mul_239 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        alias_433: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_86);  alias_86 = None
        alias_434: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_433);  alias_433 = None
        alias_435: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_434);  alias_434 = None
        pow_43: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(alias_435, 3);  alias_435 = None
        mul_240: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mul.Scalar(sum_24, -0.5);  sum_24 = None
        mul_241: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_240, pow_43);  mul_240 = pow_43 = None
        expand_11: "f32[s6, 384][1, 0]cuda:0" = torch.ops.aten.expand.default(mul_241, [-1, 384]);  mul_241 = None
        div_11: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.div.Scalar(expand_11, 384);  expand_11 = None
        pow_44: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(primals_30, 1.0);  primals_30 = None
        mul_242: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Scalar(pow_44, 2.0);  pow_44 = None
        mul_243: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(div_11, mul_242);  div_11 = mul_242 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_70: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_69, mul_243);  add_69 = mul_243 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:81 in forward, code: proj_out = attn_out + self.ff(attn_out)
        convert_element_type_40: "f32[s1, 384][384, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_11, torch.float32);  gt_11 = None
        mul_244: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_40, 1.4285714285714286);  convert_element_type_40 = None
        mul_245: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(add_66, mul_244);  mul_244 = None
        clone_16: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.clone.default(mul_245, memory_format = torch.contiguous_format);  mul_245 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/encoder.py:36 in forward, code: return self.mlp(x)
        mm_100: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mm.default(clone_16, primals_29);  primals_29 = None
        permute_244: "f32[384, s1][1, 384]cuda:0" = torch.ops.aten.permute.default(clone_16, [1, 0]);  clone_16 = None
        mm_101: "f32[384, 1024][1024, 1]cuda:0" = torch.ops.aten.mm.default(permute_244, mul_41);  permute_244 = mul_41 = None
        convert_element_type_41: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_10, torch.float32);  gt_10 = None
        mul_246: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_41, 1.4285714285714286);  convert_element_type_41 = None
        mul_247: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_100, mul_246);  mm_100 = mul_246 = None
        clone_17: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.clone.default(mul_247, memory_format = torch.contiguous_format);  mul_247 = None
        sigmoid_12: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.sigmoid.default(mm_14)
        full_36: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.full.default([sym_size_int, 1024], 1, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        sub_4: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.sub.Tensor(full_36, sigmoid_12);  full_36 = None
        mul_248: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_14, sub_4);  mm_14 = sub_4 = None
        add_71: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.add.Scalar(mul_248, 1);  mul_248 = None
        mul_249: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(sigmoid_12, add_71);  sigmoid_12 = add_71 = None
        mul_250: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(clone_17, mul_249);  clone_17 = mul_249 = None
        mm_102: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(mul_250, primals_28);  primals_28 = None
        permute_246: "f32[1024, s1][1, 1024]cuda:0" = torch.ops.aten.permute.default(mul_250, [1, 0]);  mul_250 = None
        mm_103: "f32[1024, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_246, mul_38);  permute_246 = mul_38 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_251: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_102, mul_37);  mul_37 = None
        mul_252: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_102, primals_27);  mm_102 = primals_27 = None
        sum_25: "f32[1, 384][384, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_251, [0], True);  mul_251 = None
        unsqueeze_56: "f32[1, 1, 384][384, 384, 1]cuda:0" = torch.ops.aten.unsqueeze.default(sum_25, 0);  sum_25 = None
        view_92: "f32[384][1]cuda:0" = torch.ops.aten.view.default(unsqueeze_56, [384]);  unsqueeze_56 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_253: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_252, add_13)
        mul_254: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_252, rsqrt_7);  mul_252 = rsqrt_7 = None
        sum_26: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_253, [1], True);  mul_253 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_72: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_66, mul_254);  add_66 = mul_254 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        alias_436: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_83);  alias_83 = None
        alias_437: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_436);  alias_436 = None
        alias_438: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_437);  alias_437 = None
        pow_45: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(alias_438, 3);  alias_438 = None
        mul_255: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.mul.Scalar(sum_26, -0.5);  sum_26 = None
        mul_256: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_255, pow_45);  mul_255 = pow_45 = None
        expand_12: "f32[s1, 384][1, 0]cuda:0" = torch.ops.aten.expand.default(mul_256, [-1, 384]);  mul_256 = None
        div_12: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.div.Scalar(expand_12, 384);  expand_12 = None
        pow_46: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(add_13, 1.0);  add_13 = None
        mul_257: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Scalar(pow_46, 2.0);  pow_46 = None
        mul_258: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(div_12, mul_257);  div_12 = mul_257 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_73: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_72, mul_258);  add_72 = mul_258 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:231 in forward, code: context_vec = self.proj(context_vec)
        mm_104: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(add_73, primals_26);  primals_26 = None
        permute_247: "f32[384, s1][1, 384]cuda:0" = torch.ops.aten.permute.default(add_73, [1, 0])
        mm_105: "f32[384, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_247, view_15);  permute_247 = view_15 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:123 in jagged_forward, code: context_vec = context_vec.transpose(1, 2).flatten(-2)
        view_93: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.view.default(mm_104, [sym_size_int, 6, 64]);  mm_104 = None
        alias_439: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(view_93);  view_93 = None
        permute_248: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_439, [1, 0, 2]);  alias_439 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:120 in jagged_forward, code: context_vec = F.scaled_dot_product_attention(
        alias_440: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_248);  permute_248 = None
        permute_249: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_440, [1, 0, 2]);  alias_440 = None
        alias_441: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(permute_249);  permute_249 = None
        unsqueeze_57: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(alias_441, 0);  alias_441 = None
        alias_442: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = torch.ops.aten.alias.default(alias_78);  alias_78 = None
        alias_443: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = torch.ops.aten.alias.default(alias_442);  alias_442 = None
        _efficient_attention_backward_8 = torch.ops.aten._efficient_attention_backward.default(unsqueeze_57, unsqueeze_9, unsqueeze_10, unsqueeze_11, None, alias_443, convert_element_type_6, convert_element_type_7, sym_size_int_1, sym_size_int_1, getitem_31, 0.0, getitem_32, getitem_33, 0, False);  unsqueeze_57 = unsqueeze_9 = unsqueeze_10 = unsqueeze_11 = alias_443 = convert_element_type_6 = convert_element_type_7 = getitem_31 = getitem_32 = getitem_33 = None
        getitem_292: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = _efficient_attention_backward_8[0]
        getitem_293: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = _efficient_attention_backward_8[1]
        getitem_294: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = _efficient_attention_backward_8[2];  _efficient_attention_backward_8 = None
        squeeze_36: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_294, 0);  getitem_294 = None
        squeeze_37: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_293, 0);  getitem_293 = None
        squeeze_38: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_292, 0);  getitem_292 = None
        alias_444: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(squeeze_36);  squeeze_36 = None
        permute_250: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_444, [1, 0, 2]);  alias_444 = None
        alias_445: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(squeeze_37);  squeeze_37 = None
        permute_251: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_445, [1, 0, 2]);  alias_445 = None
        alias_446: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(squeeze_38);  squeeze_38 = None
        permute_252: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_446, [1, 0, 2]);  alias_446 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:116 in jagged_forward, code: values = va.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        alias_447: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_250);  permute_250 = None
        permute_253: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_447, [1, 0, 2]);  alias_447 = None
        view_94: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_253, [sym_size_int, 384]);  permute_253 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:115 in jagged_forward, code: keys = ke.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        alias_448: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_251);  permute_251 = None
        permute_254: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_448, [1, 0, 2]);  alias_448 = None
        view_95: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_254, [sym_size_int, 384]);  permute_254 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:114 in jagged_forward, code: queries = qu.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        alias_449: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_252);  permute_252 = None
        permute_255: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_449, [1, 0, 2]);  alias_449 = None
        view_96: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_255, [sym_size_int, 384]);  permute_255 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:200 in forward, code: queries, keys, values = self.qkv(x).chunk(3, dim=-1)
        full_37: "f32[s1, 1152][1152, 1]cuda:0" = torch.ops.aten.full.default([sym_size_int, 1152], 0, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        split_72 = torch.ops.aten.split.Tensor(full_37, 384, 1)
        getitem_296: "f32[s1, 384][1152, 1]cuda:0" = split_72[0];  split_72 = None
        alias_450: "f32[s1, 384][1152, 1]cuda:0" = torch.ops.aten.alias.default(getitem_296);  getitem_296 = None
        alias_451: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.alias.default(view_96);  view_96 = None
        copy_20: "f32[s1, 384][1152, 1]cuda:0" = torch.ops.aten.copy.default(alias_450, alias_451);  alias_450 = alias_451 = None
        slice_scatter_20: "f32[s1, 1152][1152, 1]cuda:0" = torch.ops.aten.slice_scatter.default(full_37, copy_20, 1, 0, 384);  full_37 = copy_20 = None
        alias_454: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.alias.default(view_95);  view_95 = None
        split_75 = torch.ops.aten.split.Tensor(slice_scatter_20, 384, 1)
        getitem_306: "f32[s1, 384][1152, 1]cuda:0" = split_75[1];  split_75 = None
        alias_455: "f32[s1, 384][1152, 1]cuda:0" = torch.ops.aten.alias.default(getitem_306);  getitem_306 = None
        copy_21: "f32[s1, 384][1152, 1]cuda:0" = torch.ops.aten.copy.default(alias_455, alias_454);  alias_455 = alias_454 = None
        slice_scatter_21: "f32[s1, 1152][1152, 1]cuda:0" = torch.ops.aten.slice_scatter.default(slice_scatter_20, copy_21, 1, 384, 768);  slice_scatter_20 = copy_21 = None
        alias_458: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.alias.default(view_94);  view_94 = None
        split_78 = torch.ops.aten.split.Tensor(slice_scatter_21, 384, 1)
        getitem_316: "f32[s1, 384][1152, 1]cuda:0" = split_78[2];  split_78 = None
        alias_459: "f32[s1, 384][1152, 1]cuda:0" = torch.ops.aten.alias.default(getitem_316);  getitem_316 = None
        copy_22: "f32[s1, 384][1152, 1]cuda:0" = torch.ops.aten.copy.default(alias_459, alias_458);  alias_459 = alias_458 = None
        slice_scatter_22: "f32[s1, 1152][1152, 1]cuda:0" = torch.ops.aten.slice_scatter.default(slice_scatter_21, copy_22, 1, 768, 1152);  slice_scatter_21 = copy_22 = None
        mm_106: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(slice_scatter_22, primals_25);  primals_25 = None
        permute_257: "f32[1152, s1][1, 1152]cuda:0" = torch.ops.aten.permute.default(slice_scatter_22, [1, 0]);  slice_scatter_22 = None
        mm_107: "f32[1152, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_257, mul_36);  permute_257 = mul_36 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:76 in forward, code: attn_out = x + self.attention(self.do(self.attn_norm(x)), padding_mask=padding_mask, is_causal=is_causal, jagged=jagged, use_cache=not self.training and self.enable_kv_cache)
        convert_element_type_42: "f32[s1, 384][384, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_9, torch.float32);  gt_9 = None
        mul_259: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_42, 1.4285714285714286);  convert_element_type_42 = None
        mul_260: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_106, mul_259);  mm_106 = mul_259 = None
        clone_18: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.clone.default(mul_260, memory_format = torch.contiguous_format);  mul_260 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_261: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(clone_18, mul_33);  mul_33 = None
        mul_262: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(clone_18, primals_24);  clone_18 = primals_24 = None
        sum_27: "f32[1, 384][384, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_261, [0], True);  mul_261 = None
        unsqueeze_58: "f32[1, 1, 384][384, 384, 1]cuda:0" = torch.ops.aten.unsqueeze.default(sum_27, 0);  sum_27 = None
        view_97: "f32[384][1]cuda:0" = torch.ops.aten.view.default(unsqueeze_58, [384]);  unsqueeze_58 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_263: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_262, add_11)
        mul_264: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_262, rsqrt_6);  mul_262 = rsqrt_6 = None
        sum_28: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_263, [1], True);  mul_263 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_74: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_73, mul_264);  add_73 = mul_264 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        alias_461: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_65);  alias_65 = None
        alias_462: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_461);  alias_461 = None
        alias_463: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_462);  alias_462 = None
        pow_47: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(alias_463, 3);  alias_463 = None
        mul_265: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.mul.Scalar(sum_28, -0.5);  sum_28 = None
        mul_266: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_265, pow_47);  mul_265 = pow_47 = None
        expand_13: "f32[s1, 384][1, 0]cuda:0" = torch.ops.aten.expand.default(mul_266, [-1, 384]);  mul_266 = None
        div_13: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.div.Scalar(expand_13, 384);  expand_13 = None
        pow_48: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(add_11, 1.0);  add_11 = None
        mul_267: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Scalar(pow_48, 2.0);  pow_48 = None
        mul_268: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(div_13, mul_267);  div_13 = mul_267 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_75: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_74, mul_268);  add_74 = mul_268 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:81 in forward, code: proj_out = attn_out + self.ff(attn_out)
        convert_element_type_43: "f32[s1, 384][384, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_8, torch.float32);  gt_8 = None
        mul_269: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_43, 1.4285714285714286);  convert_element_type_43 = None
        mul_270: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(add_75, mul_269);  mul_269 = None
        clone_19: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.clone.default(mul_270, memory_format = torch.contiguous_format);  mul_270 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/encoder.py:36 in forward, code: return self.mlp(x)
        mm_108: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mm.default(clone_19, primals_23);  primals_23 = None
        permute_258: "f32[384, s1][1, 384]cuda:0" = torch.ops.aten.permute.default(clone_19, [1, 0]);  clone_19 = None
        mm_109: "f32[384, 1024][1024, 1]cuda:0" = torch.ops.aten.mm.default(permute_258, mul_30);  permute_258 = mul_30 = None
        convert_element_type_44: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_7, torch.float32);  gt_7 = None
        mul_271: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_44, 1.4285714285714286);  convert_element_type_44 = None
        mul_272: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_108, mul_271);  mm_108 = mul_271 = None
        clone_20: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.clone.default(mul_272, memory_format = torch.contiguous_format);  mul_272 = None
        sigmoid_13: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.sigmoid.default(mm_10)
        full_38: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.full.default([sym_size_int, 1024], 1, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        sub_5: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.sub.Tensor(full_38, sigmoid_13);  full_38 = None
        mul_273: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_10, sub_5);  mm_10 = sub_5 = None
        add_76: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.add.Scalar(mul_273, 1);  mul_273 = None
        mul_274: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(sigmoid_13, add_76);  sigmoid_13 = add_76 = None
        mul_275: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(clone_20, mul_274);  clone_20 = mul_274 = None
        mm_110: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(mul_275, primals_22);  primals_22 = None
        permute_260: "f32[1024, s1][1, 1024]cuda:0" = torch.ops.aten.permute.default(mul_275, [1, 0]);  mul_275 = None
        mm_111: "f32[1024, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_260, mul_27);  permute_260 = mul_27 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_276: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_110, mul_26);  mul_26 = None
        mul_277: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_110, primals_21);  mm_110 = primals_21 = None
        sum_29: "f32[1, 384][384, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_276, [0], True);  mul_276 = None
        unsqueeze_59: "f32[1, 1, 384][384, 384, 1]cuda:0" = torch.ops.aten.unsqueeze.default(sum_29, 0);  sum_29 = None
        view_98: "f32[384][1]cuda:0" = torch.ops.aten.view.default(unsqueeze_59, [384]);  unsqueeze_59 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_278: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_277, add_9)
        mul_279: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_277, rsqrt_5);  mul_277 = rsqrt_5 = None
        sum_30: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_278, [1], True);  mul_278 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_77: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_75, mul_279);  add_75 = mul_279 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        alias_464: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_62);  alias_62 = None
        alias_465: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_464);  alias_464 = None
        alias_466: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_465);  alias_465 = None
        pow_49: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(alias_466, 3);  alias_466 = None
        mul_280: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.mul.Scalar(sum_30, -0.5);  sum_30 = None
        mul_281: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_280, pow_49);  mul_280 = pow_49 = None
        expand_14: "f32[s1, 384][1, 0]cuda:0" = torch.ops.aten.expand.default(mul_281, [-1, 384]);  mul_281 = None
        div_14: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.div.Scalar(expand_14, 384);  expand_14 = None
        pow_50: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(add_9, 1.0);  add_9 = None
        mul_282: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Scalar(pow_50, 2.0);  pow_50 = None
        mul_283: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(div_14, mul_282);  div_14 = mul_282 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_78: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_77, mul_283);  add_77 = mul_283 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:231 in forward, code: context_vec = self.proj(context_vec)
        mm_112: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(add_78, primals_20);  primals_20 = None
        permute_261: "f32[384, s1][1, 384]cuda:0" = torch.ops.aten.permute.default(add_78, [1, 0])
        mm_113: "f32[384, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_261, view_11);  permute_261 = view_11 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:123 in jagged_forward, code: context_vec = context_vec.transpose(1, 2).flatten(-2)
        view_99: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.view.default(mm_112, [sym_size_int, 6, 64]);  mm_112 = None
        alias_467: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(view_99);  view_99 = None
        permute_262: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_467, [1, 0, 2]);  alias_467 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:120 in jagged_forward, code: context_vec = F.scaled_dot_product_attention(
        alias_468: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_262);  permute_262 = None
        permute_263: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_468, [1, 0, 2]);  alias_468 = None
        alias_469: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(permute_263);  permute_263 = None
        unsqueeze_60: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(alias_469, 0);  alias_469 = None
        alias_470: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = torch.ops.aten.alias.default(alias_57);  alias_57 = None
        alias_471: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = torch.ops.aten.alias.default(alias_470);  alias_470 = None
        _efficient_attention_backward_9 = torch.ops.aten._efficient_attention_backward.default(unsqueeze_60, unsqueeze_6, unsqueeze_7, unsqueeze_8, None, alias_471, convert_element_type_4, convert_element_type_5, sym_size_int_1, sym_size_int_1, getitem_22, 0.0, getitem_23, getitem_24, 0, False);  unsqueeze_60 = unsqueeze_6 = unsqueeze_7 = unsqueeze_8 = alias_471 = convert_element_type_4 = convert_element_type_5 = getitem_22 = getitem_23 = getitem_24 = None
        getitem_323: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = _efficient_attention_backward_9[0]
        getitem_324: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = _efficient_attention_backward_9[1]
        getitem_325: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = _efficient_attention_backward_9[2];  _efficient_attention_backward_9 = None
        squeeze_39: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_325, 0);  getitem_325 = None
        squeeze_40: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_324, 0);  getitem_324 = None
        squeeze_41: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_323, 0);  getitem_323 = None
        alias_472: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(squeeze_39);  squeeze_39 = None
        permute_264: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_472, [1, 0, 2]);  alias_472 = None
        alias_473: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(squeeze_40);  squeeze_40 = None
        permute_265: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_473, [1, 0, 2]);  alias_473 = None
        alias_474: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(squeeze_41);  squeeze_41 = None
        permute_266: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_474, [1, 0, 2]);  alias_474 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:116 in jagged_forward, code: values = va.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        alias_475: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_264);  permute_264 = None
        permute_267: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_475, [1, 0, 2]);  alias_475 = None
        view_100: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_267, [sym_size_int, 384]);  permute_267 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:115 in jagged_forward, code: keys = ke.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        alias_476: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_265);  permute_265 = None
        permute_268: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_476, [1, 0, 2]);  alias_476 = None
        view_101: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_268, [sym_size_int, 384]);  permute_268 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:114 in jagged_forward, code: queries = qu.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        alias_477: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_266);  permute_266 = None
        permute_269: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_477, [1, 0, 2]);  alias_477 = None
        view_102: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_269, [sym_size_int, 384]);  permute_269 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:200 in forward, code: queries, keys, values = self.qkv(x).chunk(3, dim=-1)
        full_39: "f32[s1, 1152][1152, 1]cuda:0" = torch.ops.aten.full.default([sym_size_int, 1152], 0, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        split_81 = torch.ops.aten.split.Tensor(full_39, 384, 1)
        getitem_327: "f32[s1, 384][1152, 1]cuda:0" = split_81[0];  split_81 = None
        alias_478: "f32[s1, 384][1152, 1]cuda:0" = torch.ops.aten.alias.default(getitem_327);  getitem_327 = None
        alias_479: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.alias.default(view_102);  view_102 = None
        copy_23: "f32[s1, 384][1152, 1]cuda:0" = torch.ops.aten.copy.default(alias_478, alias_479);  alias_478 = alias_479 = None
        slice_scatter_23: "f32[s1, 1152][1152, 1]cuda:0" = torch.ops.aten.slice_scatter.default(full_39, copy_23, 1, 0, 384);  full_39 = copy_23 = None
        alias_482: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.alias.default(view_101);  view_101 = None
        split_84 = torch.ops.aten.split.Tensor(slice_scatter_23, 384, 1)
        getitem_337: "f32[s1, 384][1152, 1]cuda:0" = split_84[1];  split_84 = None
        alias_483: "f32[s1, 384][1152, 1]cuda:0" = torch.ops.aten.alias.default(getitem_337);  getitem_337 = None
        copy_24: "f32[s1, 384][1152, 1]cuda:0" = torch.ops.aten.copy.default(alias_483, alias_482);  alias_483 = alias_482 = None
        slice_scatter_24: "f32[s1, 1152][1152, 1]cuda:0" = torch.ops.aten.slice_scatter.default(slice_scatter_23, copy_24, 1, 384, 768);  slice_scatter_23 = copy_24 = None
        alias_486: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.alias.default(view_100);  view_100 = None
        split_87 = torch.ops.aten.split.Tensor(slice_scatter_24, 384, 1)
        getitem_347: "f32[s1, 384][1152, 1]cuda:0" = split_87[2];  split_87 = None
        alias_487: "f32[s1, 384][1152, 1]cuda:0" = torch.ops.aten.alias.default(getitem_347);  getitem_347 = None
        copy_25: "f32[s1, 384][1152, 1]cuda:0" = torch.ops.aten.copy.default(alias_487, alias_486);  alias_487 = alias_486 = None
        slice_scatter_25: "f32[s1, 1152][1152, 1]cuda:0" = torch.ops.aten.slice_scatter.default(slice_scatter_24, copy_25, 1, 768, 1152);  slice_scatter_24 = copy_25 = None
        mm_114: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(slice_scatter_25, primals_19);  primals_19 = None
        permute_271: "f32[1152, s1][1, 1152]cuda:0" = torch.ops.aten.permute.default(slice_scatter_25, [1, 0]);  slice_scatter_25 = None
        mm_115: "f32[1152, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_271, mul_25);  permute_271 = mul_25 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:76 in forward, code: attn_out = x + self.attention(self.do(self.attn_norm(x)), padding_mask=padding_mask, is_causal=is_causal, jagged=jagged, use_cache=not self.training and self.enable_kv_cache)
        convert_element_type_45: "f32[s1, 384][384, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_6, torch.float32);  gt_6 = None
        mul_284: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_45, 1.4285714285714286);  convert_element_type_45 = None
        mul_285: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_114, mul_284);  mm_114 = mul_284 = None
        clone_21: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.clone.default(mul_285, memory_format = torch.contiguous_format);  mul_285 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_286: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(clone_21, mul_22);  mul_22 = None
        mul_287: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(clone_21, primals_18);  clone_21 = primals_18 = None
        sum_31: "f32[1, 384][384, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_286, [0], True);  mul_286 = None
        unsqueeze_61: "f32[1, 1, 384][384, 384, 1]cuda:0" = torch.ops.aten.unsqueeze.default(sum_31, 0);  sum_31 = None
        view_103: "f32[384][1]cuda:0" = torch.ops.aten.view.default(unsqueeze_61, [384]);  unsqueeze_61 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_288: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_287, add_7)
        mul_289: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_287, rsqrt_4);  mul_287 = rsqrt_4 = None
        sum_32: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_288, [1], True);  mul_288 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_79: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_78, mul_289);  add_78 = mul_289 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        alias_489: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_44);  alias_44 = None
        alias_490: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_489);  alias_489 = None
        alias_491: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_490);  alias_490 = None
        pow_51: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(alias_491, 3);  alias_491 = None
        mul_290: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.mul.Scalar(sum_32, -0.5);  sum_32 = None
        mul_291: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_290, pow_51);  mul_290 = pow_51 = None
        expand_15: "f32[s1, 384][1, 0]cuda:0" = torch.ops.aten.expand.default(mul_291, [-1, 384]);  mul_291 = None
        div_15: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.div.Scalar(expand_15, 384);  expand_15 = None
        pow_52: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(add_7, 1.0);  add_7 = None
        mul_292: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Scalar(pow_52, 2.0);  pow_52 = None
        mul_293: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(div_15, mul_292);  div_15 = mul_292 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_80: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_79, mul_293);  add_79 = mul_293 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:81 in forward, code: proj_out = attn_out + self.ff(attn_out)
        convert_element_type_46: "f32[s1, 384][384, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_5, torch.float32);  gt_5 = None
        mul_294: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_46, 1.4285714285714286);  convert_element_type_46 = None
        mul_295: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(add_80, mul_294);  mul_294 = None
        clone_22: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.clone.default(mul_295, memory_format = torch.contiguous_format);  mul_295 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/encoder.py:36 in forward, code: return self.mlp(x)
        mm_116: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mm.default(clone_22, primals_17);  primals_17 = None
        permute_272: "f32[384, s1][1, 384]cuda:0" = torch.ops.aten.permute.default(clone_22, [1, 0]);  clone_22 = None
        mm_117: "f32[384, 1024][1024, 1]cuda:0" = torch.ops.aten.mm.default(permute_272, mul_19);  permute_272 = mul_19 = None
        convert_element_type_47: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_4, torch.float32);  gt_4 = None
        mul_296: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_47, 1.4285714285714286);  convert_element_type_47 = None
        mul_297: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_116, mul_296);  mm_116 = mul_296 = None
        clone_23: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.clone.default(mul_297, memory_format = torch.contiguous_format);  mul_297 = None
        sigmoid_14: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.sigmoid.default(mm_6)
        full_40: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.full.default([sym_size_int, 1024], 1, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        sub_6: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.sub.Tensor(full_40, sigmoid_14);  full_40 = None
        mul_298: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_6, sub_6);  mm_6 = sub_6 = None
        add_81: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.add.Scalar(mul_298, 1);  mul_298 = None
        mul_299: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(sigmoid_14, add_81);  sigmoid_14 = add_81 = None
        mul_300: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(clone_23, mul_299);  clone_23 = mul_299 = None
        mm_118: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(mul_300, primals_16);  primals_16 = None
        permute_274: "f32[1024, s1][1, 1024]cuda:0" = torch.ops.aten.permute.default(mul_300, [1, 0]);  mul_300 = None
        mm_119: "f32[1024, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_274, mul_16);  permute_274 = mul_16 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_301: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_118, mul_15);  mul_15 = None
        mul_302: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_118, primals_15);  mm_118 = primals_15 = None
        sum_33: "f32[1, 384][384, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_301, [0], True);  mul_301 = None
        unsqueeze_62: "f32[1, 1, 384][384, 384, 1]cuda:0" = torch.ops.aten.unsqueeze.default(sum_33, 0);  sum_33 = None
        view_104: "f32[384][1]cuda:0" = torch.ops.aten.view.default(unsqueeze_62, [384]);  unsqueeze_62 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_303: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_302, add_5)
        mul_304: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_302, rsqrt_3);  mul_302 = rsqrt_3 = None
        sum_34: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_303, [1], True);  mul_303 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_82: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_80, mul_304);  add_80 = mul_304 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        alias_492: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_41);  alias_41 = None
        alias_493: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_492);  alias_492 = None
        alias_494: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_493);  alias_493 = None
        pow_53: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(alias_494, 3);  alias_494 = None
        mul_305: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.mul.Scalar(sum_34, -0.5);  sum_34 = None
        mul_306: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_305, pow_53);  mul_305 = pow_53 = None
        expand_16: "f32[s1, 384][1, 0]cuda:0" = torch.ops.aten.expand.default(mul_306, [-1, 384]);  mul_306 = None
        div_16: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.div.Scalar(expand_16, 384);  expand_16 = None
        pow_54: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(add_5, 1.0);  add_5 = None
        mul_307: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Scalar(pow_54, 2.0);  pow_54 = None
        mul_308: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(div_16, mul_307);  div_16 = mul_307 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_83: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_82, mul_308);  add_82 = mul_308 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:231 in forward, code: context_vec = self.proj(context_vec)
        mm_120: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(add_83, primals_14);  primals_14 = None
        permute_275: "f32[384, s1][1, 384]cuda:0" = torch.ops.aten.permute.default(add_83, [1, 0])
        mm_121: "f32[384, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_275, view_7);  permute_275 = view_7 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:123 in jagged_forward, code: context_vec = context_vec.transpose(1, 2).flatten(-2)
        view_105: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.view.default(mm_120, [sym_size_int, 6, 64]);  mm_120 = None
        alias_495: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(view_105);  view_105 = None
        permute_276: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_495, [1, 0, 2]);  alias_495 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:120 in jagged_forward, code: context_vec = F.scaled_dot_product_attention(
        alias_496: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_276);  permute_276 = None
        permute_277: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_496, [1, 0, 2]);  alias_496 = None
        alias_497: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(permute_277);  permute_277 = None
        unsqueeze_63: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(alias_497, 0);  alias_497 = None
        alias_498: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = torch.ops.aten.alias.default(alias_36);  alias_36 = None
        alias_499: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = torch.ops.aten.alias.default(alias_498);  alias_498 = None
        _efficient_attention_backward_10 = torch.ops.aten._efficient_attention_backward.default(unsqueeze_63, unsqueeze_3, unsqueeze_4, unsqueeze_5, None, alias_499, convert_element_type_2, convert_element_type_3, sym_size_int_1, sym_size_int_1, getitem_13, 0.0, getitem_14, getitem_15, 0, False);  unsqueeze_63 = unsqueeze_3 = unsqueeze_4 = unsqueeze_5 = alias_499 = convert_element_type_2 = convert_element_type_3 = getitem_13 = getitem_14 = getitem_15 = None
        getitem_354: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = _efficient_attention_backward_10[0]
        getitem_355: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = _efficient_attention_backward_10[1]
        getitem_356: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = _efficient_attention_backward_10[2];  _efficient_attention_backward_10 = None
        squeeze_42: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_356, 0);  getitem_356 = None
        squeeze_43: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_355, 0);  getitem_355 = None
        squeeze_44: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_354, 0);  getitem_354 = None
        alias_500: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(squeeze_42);  squeeze_42 = None
        permute_278: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_500, [1, 0, 2]);  alias_500 = None
        alias_501: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(squeeze_43);  squeeze_43 = None
        permute_279: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_501, [1, 0, 2]);  alias_501 = None
        alias_502: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(squeeze_44);  squeeze_44 = None
        permute_280: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_502, [1, 0, 2]);  alias_502 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:116 in jagged_forward, code: values = va.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        alias_503: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_278);  permute_278 = None
        permute_281: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_503, [1, 0, 2]);  alias_503 = None
        view_106: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_281, [sym_size_int, 384]);  permute_281 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:115 in jagged_forward, code: keys = ke.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        alias_504: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_279);  permute_279 = None
        permute_282: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_504, [1, 0, 2]);  alias_504 = None
        view_107: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_282, [sym_size_int, 384]);  permute_282 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:114 in jagged_forward, code: queries = qu.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        alias_505: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_280);  permute_280 = None
        permute_283: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_505, [1, 0, 2]);  alias_505 = None
        view_108: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_283, [sym_size_int, 384]);  permute_283 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:200 in forward, code: queries, keys, values = self.qkv(x).chunk(3, dim=-1)
        full_41: "f32[s1, 1152][1152, 1]cuda:0" = torch.ops.aten.full.default([sym_size_int, 1152], 0, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        split_90 = torch.ops.aten.split.Tensor(full_41, 384, 1)
        getitem_358: "f32[s1, 384][1152, 1]cuda:0" = split_90[0];  split_90 = None
        alias_506: "f32[s1, 384][1152, 1]cuda:0" = torch.ops.aten.alias.default(getitem_358);  getitem_358 = None
        alias_507: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.alias.default(view_108);  view_108 = None
        copy_26: "f32[s1, 384][1152, 1]cuda:0" = torch.ops.aten.copy.default(alias_506, alias_507);  alias_506 = alias_507 = None
        slice_scatter_26: "f32[s1, 1152][1152, 1]cuda:0" = torch.ops.aten.slice_scatter.default(full_41, copy_26, 1, 0, 384);  full_41 = copy_26 = None
        alias_510: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.alias.default(view_107);  view_107 = None
        split_93 = torch.ops.aten.split.Tensor(slice_scatter_26, 384, 1)
        getitem_368: "f32[s1, 384][1152, 1]cuda:0" = split_93[1];  split_93 = None
        alias_511: "f32[s1, 384][1152, 1]cuda:0" = torch.ops.aten.alias.default(getitem_368);  getitem_368 = None
        copy_27: "f32[s1, 384][1152, 1]cuda:0" = torch.ops.aten.copy.default(alias_511, alias_510);  alias_511 = alias_510 = None
        slice_scatter_27: "f32[s1, 1152][1152, 1]cuda:0" = torch.ops.aten.slice_scatter.default(slice_scatter_26, copy_27, 1, 384, 768);  slice_scatter_26 = copy_27 = None
        alias_514: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.alias.default(view_106);  view_106 = None
        split_96 = torch.ops.aten.split.Tensor(slice_scatter_27, 384, 1)
        getitem_378: "f32[s1, 384][1152, 1]cuda:0" = split_96[2];  split_96 = None
        alias_515: "f32[s1, 384][1152, 1]cuda:0" = torch.ops.aten.alias.default(getitem_378);  getitem_378 = None
        copy_28: "f32[s1, 384][1152, 1]cuda:0" = torch.ops.aten.copy.default(alias_515, alias_514);  alias_515 = alias_514 = None
        slice_scatter_28: "f32[s1, 1152][1152, 1]cuda:0" = torch.ops.aten.slice_scatter.default(slice_scatter_27, copy_28, 1, 768, 1152);  slice_scatter_27 = copy_28 = None
        mm_122: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(slice_scatter_28, primals_13);  primals_13 = None
        permute_285: "f32[1152, s1][1, 1152]cuda:0" = torch.ops.aten.permute.default(slice_scatter_28, [1, 0]);  slice_scatter_28 = None
        mm_123: "f32[1152, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_285, mul_14);  permute_285 = mul_14 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:76 in forward, code: attn_out = x + self.attention(self.do(self.attn_norm(x)), padding_mask=padding_mask, is_causal=is_causal, jagged=jagged, use_cache=not self.training and self.enable_kv_cache)
        convert_element_type_48: "f32[s1, 384][384, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_3, torch.float32);  gt_3 = None
        mul_309: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_48, 1.4285714285714286);  convert_element_type_48 = None
        mul_310: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_122, mul_309);  mm_122 = mul_309 = None
        clone_24: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.clone.default(mul_310, memory_format = torch.contiguous_format);  mul_310 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_311: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(clone_24, mul_11);  mul_11 = None
        mul_312: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(clone_24, primals_12);  clone_24 = primals_12 = None
        sum_35: "f32[1, 384][384, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_311, [0], True);  mul_311 = None
        unsqueeze_64: "f32[1, 1, 384][384, 384, 1]cuda:0" = torch.ops.aten.unsqueeze.default(sum_35, 0);  sum_35 = None
        view_109: "f32[384][1]cuda:0" = torch.ops.aten.view.default(unsqueeze_64, [384]);  unsqueeze_64 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_313: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_312, add_3)
        mul_314: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_312, rsqrt_2);  mul_312 = rsqrt_2 = None
        sum_36: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_313, [1], True);  mul_313 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_84: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_83, mul_314);  add_83 = mul_314 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        alias_517: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_23);  alias_23 = None
        alias_518: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_517);  alias_517 = None
        alias_519: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_518);  alias_518 = None
        pow_55: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(alias_519, 3);  alias_519 = None
        mul_315: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.mul.Scalar(sum_36, -0.5);  sum_36 = None
        mul_316: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_315, pow_55);  mul_315 = pow_55 = None
        expand_17: "f32[s1, 384][1, 0]cuda:0" = torch.ops.aten.expand.default(mul_316, [-1, 384]);  mul_316 = None
        div_17: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.div.Scalar(expand_17, 384);  expand_17 = None
        pow_56: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(add_3, 1.0);  add_3 = None
        mul_317: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Scalar(pow_56, 2.0);  pow_56 = None
        mul_318: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(div_17, mul_317);  div_17 = mul_317 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_85: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_84, mul_318);  add_84 = mul_318 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:81 in forward, code: proj_out = attn_out + self.ff(attn_out)
        convert_element_type_49: "f32[s1, 384][384, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_2, torch.float32);  gt_2 = None
        mul_319: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_49, 1.4285714285714286);  convert_element_type_49 = None
        mul_320: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(add_85, mul_319);  mul_319 = None
        clone_25: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.clone.default(mul_320, memory_format = torch.contiguous_format);  mul_320 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/encoder.py:36 in forward, code: return self.mlp(x)
        mm_124: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mm.default(clone_25, primals_11);  primals_11 = None
        permute_286: "f32[384, s1][1, 384]cuda:0" = torch.ops.aten.permute.default(clone_25, [1, 0]);  clone_25 = None
        mm_125: "f32[384, 1024][1024, 1]cuda:0" = torch.ops.aten.mm.default(permute_286, mul_8);  permute_286 = mul_8 = None
        convert_element_type_50: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_1, torch.float32);  gt_1 = None
        mul_321: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_50, 1.4285714285714286);  convert_element_type_50 = None
        mul_322: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_124, mul_321);  mm_124 = mul_321 = None
        clone_26: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.clone.default(mul_322, memory_format = torch.contiguous_format);  mul_322 = None
        sigmoid_15: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.sigmoid.default(mm_2)
        full_42: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.full.default([sym_size_int, 1024], 1, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        sub_7: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.sub.Tensor(full_42, sigmoid_15);  full_42 = None
        mul_323: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_2, sub_7);  mm_2 = sub_7 = None
        add_86: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.add.Scalar(mul_323, 1);  mul_323 = None
        mul_324: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(sigmoid_15, add_86);  sigmoid_15 = add_86 = None
        mul_325: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(clone_26, mul_324);  clone_26 = mul_324 = None
        mm_126: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(mul_325, primals_10);  primals_10 = None
        permute_288: "f32[1024, s1][1, 1024]cuda:0" = torch.ops.aten.permute.default(mul_325, [1, 0]);  mul_325 = None
        mm_127: "f32[1024, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_288, mul_5);  permute_288 = mul_5 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_326: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_126, mul_4);  mul_4 = None
        mul_327: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_126, primals_9);  mm_126 = primals_9 = None
        sum_37: "f32[1, 384][384, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_326, [0], True);  mul_326 = None
        unsqueeze_65: "f32[1, 1, 384][384, 384, 1]cuda:0" = torch.ops.aten.unsqueeze.default(sum_37, 0);  sum_37 = None
        view_110: "f32[384][1]cuda:0" = torch.ops.aten.view.default(unsqueeze_65, [384]);  unsqueeze_65 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_328: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_327, add_1)
        mul_329: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_327, rsqrt_1);  mul_327 = rsqrt_1 = None
        sum_38: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_328, [1], True);  mul_328 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_87: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_85, mul_329);  add_85 = mul_329 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        alias_520: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_20);  alias_20 = None
        alias_521: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_520);  alias_520 = None
        alias_522: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_521);  alias_521 = None
        pow_57: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(alias_522, 3);  alias_522 = None
        mul_330: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.mul.Scalar(sum_38, -0.5);  sum_38 = None
        mul_331: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_330, pow_57);  mul_330 = pow_57 = None
        expand_18: "f32[s1, 384][1, 0]cuda:0" = torch.ops.aten.expand.default(mul_331, [-1, 384]);  mul_331 = None
        div_18: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.div.Scalar(expand_18, 384);  expand_18 = None
        pow_58: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(add_1, 1.0);  add_1 = None
        mul_332: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Scalar(pow_58, 2.0);  pow_58 = None
        mul_333: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(div_18, mul_332);  div_18 = mul_332 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_88: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_87, mul_333);  add_87 = mul_333 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:231 in forward, code: context_vec = self.proj(context_vec)
        mm_128: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(add_88, primals_8);  primals_8 = None
        permute_289: "f32[384, s1][1, 384]cuda:0" = torch.ops.aten.permute.default(add_88, [1, 0])
        mm_129: "f32[384, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_289, view_3);  permute_289 = view_3 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:123 in jagged_forward, code: context_vec = context_vec.transpose(1, 2).flatten(-2)
        view_111: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.view.default(mm_128, [sym_size_int, 6, 64]);  mm_128 = None
        alias_523: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(view_111);  view_111 = None
        permute_290: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_523, [1, 0, 2]);  alias_523 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:120 in jagged_forward, code: context_vec = F.scaled_dot_product_attention(
        alias_524: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_290);  permute_290 = None
        permute_291: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_524, [1, 0, 2]);  alias_524 = None
        alias_525: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(permute_291);  permute_291 = None
        unsqueeze_66: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(alias_525, 0);  alias_525 = None
        alias_526: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = torch.ops.aten.alias.default(alias_15);  alias_15 = None
        alias_527: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = torch.ops.aten.alias.default(alias_526);  alias_526 = None
        _efficient_attention_backward_11 = torch.ops.aten._efficient_attention_backward.default(unsqueeze_66, unsqueeze, unsqueeze_1, unsqueeze_2, None, alias_527, convert_element_type, convert_element_type_1, sym_size_int_1, sym_size_int_1, getitem_4, 0.0, getitem_5, getitem_6, 0, False);  unsqueeze_66 = unsqueeze = unsqueeze_1 = unsqueeze_2 = alias_527 = convert_element_type = convert_element_type_1 = sym_size_int_1 = getitem_4 = getitem_5 = getitem_6 = None
        getitem_385: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = _efficient_attention_backward_11[0]
        getitem_386: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = _efficient_attention_backward_11[1]
        getitem_387: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = _efficient_attention_backward_11[2];  _efficient_attention_backward_11 = None
        squeeze_45: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_387, 0);  getitem_387 = None
        squeeze_46: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_386, 0);  getitem_386 = None
        squeeze_47: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_385, 0);  getitem_385 = None
        alias_528: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(squeeze_45);  squeeze_45 = None
        permute_292: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_528, [1, 0, 2]);  alias_528 = None
        alias_529: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(squeeze_46);  squeeze_46 = None
        permute_293: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_529, [1, 0, 2]);  alias_529 = None
        alias_530: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.alias.default(squeeze_47);  squeeze_47 = None
        permute_294: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(alias_530, [1, 0, 2]);  alias_530 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:116 in jagged_forward, code: values = va.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        alias_531: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_292);  permute_292 = None
        permute_295: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_531, [1, 0, 2]);  alias_531 = None
        view_112: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_295, [sym_size_int, 384]);  permute_295 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:115 in jagged_forward, code: keys = ke.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        alias_532: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_293);  permute_293 = None
        permute_296: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_532, [1, 0, 2]);  alias_532 = None
        view_113: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_296, [sym_size_int, 384]);  permute_296 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:114 in jagged_forward, code: queries = qu.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        alias_533: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.alias.default(permute_294);  permute_294 = None
        permute_297: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(alias_533, [1, 0, 2]);  alias_533 = None
        view_114: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_297, [sym_size_int, 384]);  permute_297 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:200 in forward, code: queries, keys, values = self.qkv(x).chunk(3, dim=-1)
        full_43: "f32[s1, 1152][1152, 1]cuda:0" = torch.ops.aten.full.default([sym_size_int, 1152], 0, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False);  sym_size_int = None
        split_99 = torch.ops.aten.split.Tensor(full_43, 384, 1)
        getitem_389: "f32[s1, 384][1152, 1]cuda:0" = split_99[0];  split_99 = None
        alias_534: "f32[s1, 384][1152, 1]cuda:0" = torch.ops.aten.alias.default(getitem_389);  getitem_389 = None
        alias_535: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.alias.default(view_114);  view_114 = None
        copy_29: "f32[s1, 384][1152, 1]cuda:0" = torch.ops.aten.copy.default(alias_534, alias_535);  alias_534 = alias_535 = None
        slice_scatter_29: "f32[s1, 1152][1152, 1]cuda:0" = torch.ops.aten.slice_scatter.default(full_43, copy_29, 1, 0, 384);  full_43 = copy_29 = None
        alias_538: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.alias.default(view_113);  view_113 = None
        split_102 = torch.ops.aten.split.Tensor(slice_scatter_29, 384, 1)
        getitem_399: "f32[s1, 384][1152, 1]cuda:0" = split_102[1];  split_102 = None
        alias_539: "f32[s1, 384][1152, 1]cuda:0" = torch.ops.aten.alias.default(getitem_399);  getitem_399 = None
        copy_30: "f32[s1, 384][1152, 1]cuda:0" = torch.ops.aten.copy.default(alias_539, alias_538);  alias_539 = alias_538 = None
        slice_scatter_30: "f32[s1, 1152][1152, 1]cuda:0" = torch.ops.aten.slice_scatter.default(slice_scatter_29, copy_30, 1, 384, 768);  slice_scatter_29 = copy_30 = None
        alias_542: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.alias.default(view_112);  view_112 = None
        split_105 = torch.ops.aten.split.Tensor(slice_scatter_30, 384, 1)
        getitem_409: "f32[s1, 384][1152, 1]cuda:0" = split_105[2];  split_105 = None
        alias_543: "f32[s1, 384][1152, 1]cuda:0" = torch.ops.aten.alias.default(getitem_409);  getitem_409 = None
        copy_31: "f32[s1, 384][1152, 1]cuda:0" = torch.ops.aten.copy.default(alias_543, alias_542);  alias_543 = alias_542 = None
        slice_scatter_31: "f32[s1, 1152][1152, 1]cuda:0" = torch.ops.aten.slice_scatter.default(slice_scatter_30, copy_31, 1, 768, 1152);  slice_scatter_30 = copy_31 = None
        mm_130: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(slice_scatter_31, primals_7);  primals_7 = None
        permute_299: "f32[1152, s1][1, 1152]cuda:0" = torch.ops.aten.permute.default(slice_scatter_31, [1, 0]);  slice_scatter_31 = None
        mm_131: "f32[1152, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_299, mul_3);  permute_299 = mul_3 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:76 in forward, code: attn_out = x + self.attention(self.do(self.attn_norm(x)), padding_mask=padding_mask, is_causal=is_causal, jagged=jagged, use_cache=not self.training and self.enable_kv_cache)
        convert_element_type_51: "f32[s1, 384][384, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt, torch.float32);  gt = None
        mul_334: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_51, 1.4285714285714286);  convert_element_type_51 = None
        mul_335: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_130, mul_334);  mm_130 = mul_334 = None
        clone_27: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.clone.default(mul_335, memory_format = torch.contiguous_format);  mul_335 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_336: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(clone_27, mul);  mul = None
        mul_337: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(clone_27, primals_6);  clone_27 = primals_6 = None
        sum_39: "f32[1, 384][384, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_336, [0], True);  mul_336 = None
        unsqueeze_67: "f32[1, 1, 384][384, 384, 1]cuda:0" = torch.ops.aten.unsqueeze.default(sum_39, 0);  sum_39 = None
        view_115: "f32[384][1]cuda:0" = torch.ops.aten.view.default(unsqueeze_67, [384]);  unsqueeze_67 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_338: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_337, primals_1)
        mul_339: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_337, rsqrt);  mul_337 = rsqrt = None
        sum_40: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_338, [1], True);  mul_338 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_89: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_88, mul_339);  add_88 = mul_339 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        alias_545: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_2);  alias_2 = None
        alias_546: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_545);  alias_545 = None
        alias_547: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.alias.default(alias_546);  alias_546 = None
        pow_59: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(alias_547, 3);  alias_547 = None
        mul_340: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.mul.Scalar(sum_40, -0.5);  sum_40 = None
        mul_341: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_340, pow_59);  mul_340 = pow_59 = None
        expand_19: "f32[s1, 384][1, 0]cuda:0" = torch.ops.aten.expand.default(mul_341, [-1, 384]);  mul_341 = None
        div_19: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.div.Scalar(expand_19, 384);  expand_19 = None
        pow_60: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(primals_1, 1.0);  primals_1 = None
        mul_342: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Scalar(pow_60, 2.0);  pow_60 = None
        mul_343: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(div_19, mul_342);  div_19 = mul_342 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_90: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_89, mul_343);  add_89 = mul_343 = None
        return pytree.tree_unflatten([add_39, primals_31, primals_32, primals_33, add_90, primals_2, primals_3, primals_4, None, view_115, mm_131, mm_129, view_110, mm_127, mm_125, view_109, mm_123, mm_121, view_104, mm_119, mm_117, view_103, mm_115, mm_113, view_98, mm_111, mm_109, view_97, mm_107, mm_105, view_92, mm_103, mm_101, add_70, primals_31, primals_32, primals_33, None, view_91, mm_99, mm_97, view_86, mm_95, mm_93, mm_91, view_81, mm_89, mm_87, view_80, mm_85, mm_83, view_75, mm_81, mm_79, mm_77, view_70, mm_75, mm_73, view_69, mm_71, mm_69, view_64, mm_67, mm_65, mm_63, view_59, mm_61, mm_59, view_58, mm_57, mm_55, view_53, mm_53, mm_51, mm_49, view_48, mm_47, mm_45], self._out_spec)
        