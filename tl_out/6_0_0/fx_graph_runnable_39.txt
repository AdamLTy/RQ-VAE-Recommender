
import torch
from torch import tensor, device
import torch.fx as fx
from torch._dynamo.testing import rand_strided
from math import inf
import torch._inductor.inductor_prims

import torch._dynamo.config
import torch._inductor.config
import torch._functorch.config
import torch.fx.experimental._config
torch._dynamo.config.suppress_errors = True

torch._functorch.config.unlift_effect_tokens = True



isolate_fails_code_str = None



# torch version: 2.5.1+cu124
# torch cuda version: 12.4
# torch git version: a8d6afb511a69687bbb2b7e88a3cf67917e1697e


# CUDA Info: 
# nvcc: NVIDIA (R) Cuda compiler driver 
# Copyright (c) 2005-2024 NVIDIA Corporation 
# Built on Thu_Mar_28_02:18:24_PDT_2024 
# Cuda compilation tools, release 12.4, V12.4.131 
# Build cuda_12.4.r12.4/compiler.34097967_0 

# GPU Hardware Info: 
# NVIDIA L4 : 1 


from torch.nn import *
class Repro(torch.nn.Module):
    def __init__(self) -> None:
        super().__init__()

    
    
    def forward(self, primals_1, primals_2, primals_3, primals_4, primals_5, primals_6, primals_7, primals_8, primals_9, primals_10, primals_11, primals_12, primals_13, primals_14, primals_15, primals_16, primals_17, primals_18, primals_19, primals_20, primals_21, primals_22, primals_23, primals_24, primals_25, primals_26, primals_27, primals_28, primals_29, primals_30, primals_31, primals_32, primals_33, primals_34, primals_35, primals_36, primals_37, primals_38, primals_39, primals_40, primals_41, primals_42, primals_43, primals_44, primals_45, primals_46, primals_47, primals_48, primals_49, primals_50, primals_51, primals_52, primals_53, primals_54, primals_55, primals_56, primals_57, primals_58, primals_59, primals_60, primals_61, primals_62, primals_63, primals_64, primals_65, primals_66, primals_67, primals_68, primals_69, primals_70, primals_71, primals_72, primals_73, primals_74):
        pow_1 = torch.ops.aten.pow.Tensor_Scalar(primals_1, 2)
        mean = torch.ops.aten.mean.dim(pow_1, [1], True);  pow_1 = None
        add = torch.ops.aten.add.Tensor(mean, 1e-06);  mean = None
        rsqrt = torch.ops.aten.rsqrt.default(add);  add = None
        mul = torch.ops.aten.mul.Tensor(primals_1, rsqrt)
        mul_1 = torch.ops.aten.mul.Tensor(mul, primals_6);  mul = None
        sym_size_int = torch.ops.aten.sym_size.int(primals_1, 0)
        inductor_seeds_default = torch.ops.prims.inductor_seeds.default(28, device(type='cuda', index=0))
        inductor_lookup_seed_default = torch.ops.prims.inductor_lookup_seed.default(inductor_seeds_default, 0)
        inductor_random_default_27 = torch.ops.prims.inductor_random.default([sym_size_int, 384], inductor_lookup_seed_default, 'rand');  inductor_lookup_seed_default = None
        gt = torch.ops.aten.gt.Scalar(inductor_random_default_27, 0.3);  inductor_random_default_27 = None
        mul_2 = torch.ops.aten.mul.Tensor(gt, mul_1);  mul_1 = None
        mul_3 = torch.ops.aten.mul.Tensor(mul_2, 1.4285714285714286);  mul_2 = None
        permute = torch.ops.aten.permute.default(primals_7, [1, 0])
        mm = torch.ops.aten.mm.default(mul_3, permute);  permute = None
        split = torch.ops.aten.split.Tensor(mm, 384, 1);  mm = None
        getitem = split[0]
        getitem_1 = split[1]
        getitem_2 = split[2];  split = None
        view = torch.ops.aten.view.default(getitem, [sym_size_int, 6, 64]);  getitem = None
        permute_1 = torch.ops.aten.permute.default(view, [1, 0, 2]);  view = None
        view_1 = torch.ops.aten.view.default(getitem_1, [sym_size_int, 6, 64]);  getitem_1 = None
        permute_2 = torch.ops.aten.permute.default(view_1, [1, 0, 2]);  view_1 = None
        view_2 = torch.ops.aten.view.default(getitem_2, [sym_size_int, 6, 64]);  getitem_2 = None
        permute_3 = torch.ops.aten.permute.default(view_2, [1, 0, 2]);  view_2 = None
        permute_4 = torch.ops.aten.permute.default(permute_1, [1, 0, 2]);  permute_1 = None
        permute_5 = torch.ops.aten.permute.default(permute_2, [1, 0, 2]);  permute_2 = None
        permute_6 = torch.ops.aten.permute.default(permute_3, [1, 0, 2]);  permute_3 = None
        convert_element_type = torch.ops.prims.convert_element_type.default(primals_2, torch.int32)
        unsqueeze = torch.ops.aten.unsqueeze.default(permute_4, 0);  permute_4 = None
        unsqueeze_1 = torch.ops.aten.unsqueeze.default(permute_5, 0);  permute_5 = None
        unsqueeze_2 = torch.ops.aten.unsqueeze.default(permute_6, 0);  permute_6 = None
        sym_size_int_1 = torch.ops.aten.sym_size.int(primals_4, 0)
        _efficient_attention_forward = torch.ops.aten._efficient_attention_forward.default(unsqueeze, unsqueeze_1, unsqueeze_2, None, convert_element_type, convert_element_type, sym_size_int_1, sym_size_int_1, 0.0, 0, True)
        getitem_3 = _efficient_attention_forward[0]
        getitem_4 = _efficient_attention_forward[1]
        getitem_5 = _efficient_attention_forward[2]
        getitem_6 = _efficient_attention_forward[3];  _efficient_attention_forward = None
        squeeze = torch.ops.aten.squeeze.dim(getitem_3, 0)
        permute_7 = torch.ops.aten.permute.default(squeeze, [1, 0, 2]);  squeeze = None
        permute_8 = torch.ops.aten.permute.default(permute_7, [1, 0, 2]);  permute_7 = None
        view_3 = torch.ops.aten.view.default(permute_8, [sym_size_int, 384]);  permute_8 = None
        permute_9 = torch.ops.aten.permute.default(primals_8, [1, 0])
        mm_1 = torch.ops.aten.mm.default(view_3, permute_9);  view_3 = permute_9 = None
        add_1 = torch.ops.aten.add.Tensor(primals_1, mm_1)
        pow_2 = torch.ops.aten.pow.Tensor_Scalar(add_1, 2)
        mean_1 = torch.ops.aten.mean.dim(pow_2, [1], True);  pow_2 = None
        add_2 = torch.ops.aten.add.Tensor(mean_1, 1e-06);  mean_1 = None
        rsqrt_1 = torch.ops.aten.rsqrt.default(add_2);  add_2 = None
        mul_4 = torch.ops.aten.mul.Tensor(add_1, rsqrt_1)
        mul_5 = torch.ops.aten.mul.Tensor(mul_4, primals_9);  mul_4 = None
        permute_10 = torch.ops.aten.permute.default(primals_10, [1, 0])
        mm_2 = torch.ops.aten.mm.default(mul_5, permute_10);  permute_10 = None
        sigmoid = torch.ops.aten.sigmoid.default(mm_2)
        mul_6 = torch.ops.aten.mul.Tensor(mm_2, sigmoid);  sigmoid = None
        inductor_lookup_seed_default_1 = torch.ops.prims.inductor_lookup_seed.default(inductor_seeds_default, 1)
        inductor_random_default_26 = torch.ops.prims.inductor_random.default([sym_size_int, 1024], inductor_lookup_seed_default_1, 'rand');  inductor_lookup_seed_default_1 = None
        gt_1 = torch.ops.aten.gt.Scalar(inductor_random_default_26, 0.3);  inductor_random_default_26 = None
        mul_7 = torch.ops.aten.mul.Tensor(gt_1, mul_6);  mul_6 = None
        mul_8 = torch.ops.aten.mul.Tensor(mul_7, 1.4285714285714286);  mul_7 = None
        permute_11 = torch.ops.aten.permute.default(primals_11, [1, 0])
        mm_3 = torch.ops.aten.mm.default(mul_8, permute_11);  permute_11 = None
        inductor_lookup_seed_default_2 = torch.ops.prims.inductor_lookup_seed.default(inductor_seeds_default, 2)
        inductor_random_default_25 = torch.ops.prims.inductor_random.default([sym_size_int, 384], inductor_lookup_seed_default_2, 'rand');  inductor_lookup_seed_default_2 = None
        gt_2 = torch.ops.aten.gt.Scalar(inductor_random_default_25, 0.3);  inductor_random_default_25 = None
        mul_9 = torch.ops.aten.mul.Tensor(gt_2, mm_3);  mm_3 = None
        mul_10 = torch.ops.aten.mul.Tensor(mul_9, 1.4285714285714286);  mul_9 = None
        add_3 = torch.ops.aten.add.Tensor(add_1, mul_10);  add_1 = mul_10 = None
        pow_3 = torch.ops.aten.pow.Tensor_Scalar(add_3, 2)
        mean_2 = torch.ops.aten.mean.dim(pow_3, [1], True);  pow_3 = None
        add_4 = torch.ops.aten.add.Tensor(mean_2, 1e-06);  mean_2 = None
        rsqrt_2 = torch.ops.aten.rsqrt.default(add_4);  add_4 = None
        mul_11 = torch.ops.aten.mul.Tensor(add_3, rsqrt_2)
        mul_12 = torch.ops.aten.mul.Tensor(mul_11, primals_12);  mul_11 = None
        inductor_lookup_seed_default_3 = torch.ops.prims.inductor_lookup_seed.default(inductor_seeds_default, 3)
        inductor_random_default_24 = torch.ops.prims.inductor_random.default([sym_size_int, 384], inductor_lookup_seed_default_3, 'rand');  inductor_lookup_seed_default_3 = None
        gt_3 = torch.ops.aten.gt.Scalar(inductor_random_default_24, 0.3);  inductor_random_default_24 = None
        mul_13 = torch.ops.aten.mul.Tensor(gt_3, mul_12);  mul_12 = None
        mul_14 = torch.ops.aten.mul.Tensor(mul_13, 1.4285714285714286);  mul_13 = None
        permute_12 = torch.ops.aten.permute.default(primals_13, [1, 0])
        mm_4 = torch.ops.aten.mm.default(mul_14, permute_12);  permute_12 = None
        split_1 = torch.ops.aten.split.Tensor(mm_4, 384, 1);  mm_4 = None
        getitem_9 = split_1[0]
        getitem_10 = split_1[1]
        getitem_11 = split_1[2];  split_1 = None
        view_4 = torch.ops.aten.view.default(getitem_9, [sym_size_int, 6, 64]);  getitem_9 = None
        permute_13 = torch.ops.aten.permute.default(view_4, [1, 0, 2]);  view_4 = None
        view_5 = torch.ops.aten.view.default(getitem_10, [sym_size_int, 6, 64]);  getitem_10 = None
        permute_14 = torch.ops.aten.permute.default(view_5, [1, 0, 2]);  view_5 = None
        view_6 = torch.ops.aten.view.default(getitem_11, [sym_size_int, 6, 64]);  getitem_11 = None
        permute_15 = torch.ops.aten.permute.default(view_6, [1, 0, 2]);  view_6 = None
        permute_16 = torch.ops.aten.permute.default(permute_13, [1, 0, 2]);  permute_13 = None
        permute_17 = torch.ops.aten.permute.default(permute_14, [1, 0, 2]);  permute_14 = None
        permute_18 = torch.ops.aten.permute.default(permute_15, [1, 0, 2]);  permute_15 = None
        convert_element_type_2 = torch.ops.prims.convert_element_type.default(primals_2, torch.int32)
        unsqueeze_3 = torch.ops.aten.unsqueeze.default(permute_16, 0);  permute_16 = None
        unsqueeze_4 = torch.ops.aten.unsqueeze.default(permute_17, 0);  permute_17 = None
        unsqueeze_5 = torch.ops.aten.unsqueeze.default(permute_18, 0);  permute_18 = None
        _efficient_attention_forward_1 = torch.ops.aten._efficient_attention_forward.default(unsqueeze_3, unsqueeze_4, unsqueeze_5, None, convert_element_type_2, convert_element_type_2, sym_size_int_1, sym_size_int_1, 0.0, 0, True)
        getitem_12 = _efficient_attention_forward_1[0]
        getitem_13 = _efficient_attention_forward_1[1]
        getitem_14 = _efficient_attention_forward_1[2]
        getitem_15 = _efficient_attention_forward_1[3];  _efficient_attention_forward_1 = None
        squeeze_1 = torch.ops.aten.squeeze.dim(getitem_12, 0)
        permute_19 = torch.ops.aten.permute.default(squeeze_1, [1, 0, 2]);  squeeze_1 = None
        permute_20 = torch.ops.aten.permute.default(permute_19, [1, 0, 2]);  permute_19 = None
        view_7 = torch.ops.aten.view.default(permute_20, [sym_size_int, 384]);  permute_20 = None
        permute_21 = torch.ops.aten.permute.default(primals_14, [1, 0])
        mm_5 = torch.ops.aten.mm.default(view_7, permute_21);  view_7 = permute_21 = None
        add_5 = torch.ops.aten.add.Tensor(add_3, mm_5);  mm_5 = None
        pow_4 = torch.ops.aten.pow.Tensor_Scalar(add_5, 2)
        mean_3 = torch.ops.aten.mean.dim(pow_4, [1], True);  pow_4 = None
        add_6 = torch.ops.aten.add.Tensor(mean_3, 1e-06);  mean_3 = None
        rsqrt_3 = torch.ops.aten.rsqrt.default(add_6);  add_6 = None
        mul_15 = torch.ops.aten.mul.Tensor(add_5, rsqrt_3)
        mul_16 = torch.ops.aten.mul.Tensor(mul_15, primals_15);  mul_15 = None
        permute_22 = torch.ops.aten.permute.default(primals_16, [1, 0])
        mm_6 = torch.ops.aten.mm.default(mul_16, permute_22);  permute_22 = None
        sigmoid_1 = torch.ops.aten.sigmoid.default(mm_6)
        mul_17 = torch.ops.aten.mul.Tensor(mm_6, sigmoid_1);  sigmoid_1 = None
        inductor_lookup_seed_default_4 = torch.ops.prims.inductor_lookup_seed.default(inductor_seeds_default, 4)
        inductor_random_default_23 = torch.ops.prims.inductor_random.default([sym_size_int, 1024], inductor_lookup_seed_default_4, 'rand');  inductor_lookup_seed_default_4 = None
        gt_4 = torch.ops.aten.gt.Scalar(inductor_random_default_23, 0.3);  inductor_random_default_23 = None
        mul_18 = torch.ops.aten.mul.Tensor(gt_4, mul_17);  mul_17 = None
        mul_19 = torch.ops.aten.mul.Tensor(mul_18, 1.4285714285714286);  mul_18 = None
        permute_23 = torch.ops.aten.permute.default(primals_17, [1, 0])
        mm_7 = torch.ops.aten.mm.default(mul_19, permute_23);  permute_23 = None
        inductor_lookup_seed_default_5 = torch.ops.prims.inductor_lookup_seed.default(inductor_seeds_default, 5)
        inductor_random_default_22 = torch.ops.prims.inductor_random.default([sym_size_int, 384], inductor_lookup_seed_default_5, 'rand');  inductor_lookup_seed_default_5 = None
        gt_5 = torch.ops.aten.gt.Scalar(inductor_random_default_22, 0.3);  inductor_random_default_22 = None
        mul_20 = torch.ops.aten.mul.Tensor(gt_5, mm_7);  mm_7 = None
        mul_21 = torch.ops.aten.mul.Tensor(mul_20, 1.4285714285714286);  mul_20 = None
        add_7 = torch.ops.aten.add.Tensor(add_5, mul_21);  mul_21 = None
        pow_5 = torch.ops.aten.pow.Tensor_Scalar(add_7, 2)
        mean_4 = torch.ops.aten.mean.dim(pow_5, [1], True);  pow_5 = None
        add_8 = torch.ops.aten.add.Tensor(mean_4, 1e-06);  mean_4 = None
        rsqrt_4 = torch.ops.aten.rsqrt.default(add_8);  add_8 = None
        mul_22 = torch.ops.aten.mul.Tensor(add_7, rsqrt_4)
        mul_23 = torch.ops.aten.mul.Tensor(mul_22, primals_18);  mul_22 = None
        inductor_lookup_seed_default_6 = torch.ops.prims.inductor_lookup_seed.default(inductor_seeds_default, 6)
        inductor_random_default_21 = torch.ops.prims.inductor_random.default([sym_size_int, 384], inductor_lookup_seed_default_6, 'rand');  inductor_lookup_seed_default_6 = None
        gt_6 = torch.ops.aten.gt.Scalar(inductor_random_default_21, 0.3);  inductor_random_default_21 = None
        mul_24 = torch.ops.aten.mul.Tensor(gt_6, mul_23);  mul_23 = None
        mul_25 = torch.ops.aten.mul.Tensor(mul_24, 1.4285714285714286);  mul_24 = None
        permute_24 = torch.ops.aten.permute.default(primals_19, [1, 0])
        mm_8 = torch.ops.aten.mm.default(mul_25, permute_24);  permute_24 = None
        split_2 = torch.ops.aten.split.Tensor(mm_8, 384, 1);  mm_8 = None
        getitem_18 = split_2[0]
        getitem_19 = split_2[1]
        getitem_20 = split_2[2];  split_2 = None
        view_8 = torch.ops.aten.view.default(getitem_18, [sym_size_int, 6, 64]);  getitem_18 = None
        permute_25 = torch.ops.aten.permute.default(view_8, [1, 0, 2]);  view_8 = None
        view_9 = torch.ops.aten.view.default(getitem_19, [sym_size_int, 6, 64]);  getitem_19 = None
        permute_26 = torch.ops.aten.permute.default(view_9, [1, 0, 2]);  view_9 = None
        view_10 = torch.ops.aten.view.default(getitem_20, [sym_size_int, 6, 64]);  getitem_20 = None
        permute_27 = torch.ops.aten.permute.default(view_10, [1, 0, 2]);  view_10 = None
        permute_28 = torch.ops.aten.permute.default(permute_25, [1, 0, 2]);  permute_25 = None
        permute_29 = torch.ops.aten.permute.default(permute_26, [1, 0, 2]);  permute_26 = None
        permute_30 = torch.ops.aten.permute.default(permute_27, [1, 0, 2]);  permute_27 = None
        convert_element_type_4 = torch.ops.prims.convert_element_type.default(primals_2, torch.int32)
        unsqueeze_6 = torch.ops.aten.unsqueeze.default(permute_28, 0);  permute_28 = None
        unsqueeze_7 = torch.ops.aten.unsqueeze.default(permute_29, 0);  permute_29 = None
        unsqueeze_8 = torch.ops.aten.unsqueeze.default(permute_30, 0);  permute_30 = None
        _efficient_attention_forward_2 = torch.ops.aten._efficient_attention_forward.default(unsqueeze_6, unsqueeze_7, unsqueeze_8, None, convert_element_type_4, convert_element_type_4, sym_size_int_1, sym_size_int_1, 0.0, 0, True)
        getitem_21 = _efficient_attention_forward_2[0]
        getitem_22 = _efficient_attention_forward_2[1]
        getitem_23 = _efficient_attention_forward_2[2]
        getitem_24 = _efficient_attention_forward_2[3];  _efficient_attention_forward_2 = None
        squeeze_2 = torch.ops.aten.squeeze.dim(getitem_21, 0)
        permute_31 = torch.ops.aten.permute.default(squeeze_2, [1, 0, 2]);  squeeze_2 = None
        permute_32 = torch.ops.aten.permute.default(permute_31, [1, 0, 2]);  permute_31 = None
        view_11 = torch.ops.aten.view.default(permute_32, [sym_size_int, 384]);  permute_32 = None
        permute_33 = torch.ops.aten.permute.default(primals_20, [1, 0])
        mm_9 = torch.ops.aten.mm.default(view_11, permute_33);  view_11 = permute_33 = None
        add_9 = torch.ops.aten.add.Tensor(add_7, mm_9);  mm_9 = None
        pow_6 = torch.ops.aten.pow.Tensor_Scalar(add_9, 2)
        mean_5 = torch.ops.aten.mean.dim(pow_6, [1], True);  pow_6 = None
        add_10 = torch.ops.aten.add.Tensor(mean_5, 1e-06);  mean_5 = None
        rsqrt_5 = torch.ops.aten.rsqrt.default(add_10);  add_10 = None
        mul_26 = torch.ops.aten.mul.Tensor(add_9, rsqrt_5)
        mul_27 = torch.ops.aten.mul.Tensor(mul_26, primals_21);  mul_26 = None
        permute_34 = torch.ops.aten.permute.default(primals_22, [1, 0])
        mm_10 = torch.ops.aten.mm.default(mul_27, permute_34);  permute_34 = None
        sigmoid_2 = torch.ops.aten.sigmoid.default(mm_10)
        mul_28 = torch.ops.aten.mul.Tensor(mm_10, sigmoid_2);  sigmoid_2 = None
        inductor_lookup_seed_default_7 = torch.ops.prims.inductor_lookup_seed.default(inductor_seeds_default, 7)
        inductor_random_default_20 = torch.ops.prims.inductor_random.default([sym_size_int, 1024], inductor_lookup_seed_default_7, 'rand');  inductor_lookup_seed_default_7 = None
        gt_7 = torch.ops.aten.gt.Scalar(inductor_random_default_20, 0.3);  inductor_random_default_20 = None
        mul_29 = torch.ops.aten.mul.Tensor(gt_7, mul_28);  mul_28 = None
        mul_30 = torch.ops.aten.mul.Tensor(mul_29, 1.4285714285714286);  mul_29 = None
        permute_35 = torch.ops.aten.permute.default(primals_23, [1, 0])
        mm_11 = torch.ops.aten.mm.default(mul_30, permute_35);  permute_35 = None
        inductor_lookup_seed_default_8 = torch.ops.prims.inductor_lookup_seed.default(inductor_seeds_default, 8)
        inductor_random_default_19 = torch.ops.prims.inductor_random.default([sym_size_int, 384], inductor_lookup_seed_default_8, 'rand');  inductor_lookup_seed_default_8 = None
        gt_8 = torch.ops.aten.gt.Scalar(inductor_random_default_19, 0.3);  inductor_random_default_19 = None
        mul_31 = torch.ops.aten.mul.Tensor(gt_8, mm_11);  mm_11 = None
        mul_32 = torch.ops.aten.mul.Tensor(mul_31, 1.4285714285714286);  mul_31 = None
        add_11 = torch.ops.aten.add.Tensor(add_9, mul_32);  mul_32 = None
        pow_7 = torch.ops.aten.pow.Tensor_Scalar(add_11, 2)
        mean_6 = torch.ops.aten.mean.dim(pow_7, [1], True);  pow_7 = None
        add_12 = torch.ops.aten.add.Tensor(mean_6, 1e-06);  mean_6 = None
        rsqrt_6 = torch.ops.aten.rsqrt.default(add_12);  add_12 = None
        mul_33 = torch.ops.aten.mul.Tensor(add_11, rsqrt_6)
        mul_34 = torch.ops.aten.mul.Tensor(mul_33, primals_24);  mul_33 = None
        inductor_lookup_seed_default_9 = torch.ops.prims.inductor_lookup_seed.default(inductor_seeds_default, 9)
        inductor_random_default_18 = torch.ops.prims.inductor_random.default([sym_size_int, 384], inductor_lookup_seed_default_9, 'rand');  inductor_lookup_seed_default_9 = None
        gt_9 = torch.ops.aten.gt.Scalar(inductor_random_default_18, 0.3);  inductor_random_default_18 = None
        mul_35 = torch.ops.aten.mul.Tensor(gt_9, mul_34);  mul_34 = None
        mul_36 = torch.ops.aten.mul.Tensor(mul_35, 1.4285714285714286);  mul_35 = None
        permute_36 = torch.ops.aten.permute.default(primals_25, [1, 0])
        mm_12 = torch.ops.aten.mm.default(mul_36, permute_36);  permute_36 = None
        split_3 = torch.ops.aten.split.Tensor(mm_12, 384, 1);  mm_12 = None
        getitem_27 = split_3[0]
        getitem_28 = split_3[1]
        getitem_29 = split_3[2];  split_3 = None
        view_12 = torch.ops.aten.view.default(getitem_27, [sym_size_int, 6, 64]);  getitem_27 = None
        permute_37 = torch.ops.aten.permute.default(view_12, [1, 0, 2]);  view_12 = None
        view_13 = torch.ops.aten.view.default(getitem_28, [sym_size_int, 6, 64]);  getitem_28 = None
        permute_38 = torch.ops.aten.permute.default(view_13, [1, 0, 2]);  view_13 = None
        view_14 = torch.ops.aten.view.default(getitem_29, [sym_size_int, 6, 64]);  getitem_29 = None
        permute_39 = torch.ops.aten.permute.default(view_14, [1, 0, 2]);  view_14 = None
        permute_40 = torch.ops.aten.permute.default(permute_37, [1, 0, 2]);  permute_37 = None
        permute_41 = torch.ops.aten.permute.default(permute_38, [1, 0, 2]);  permute_38 = None
        permute_42 = torch.ops.aten.permute.default(permute_39, [1, 0, 2]);  permute_39 = None
        convert_element_type_6 = torch.ops.prims.convert_element_type.default(primals_2, torch.int32)
        unsqueeze_9 = torch.ops.aten.unsqueeze.default(permute_40, 0);  permute_40 = None
        unsqueeze_10 = torch.ops.aten.unsqueeze.default(permute_41, 0);  permute_41 = None
        unsqueeze_11 = torch.ops.aten.unsqueeze.default(permute_42, 0);  permute_42 = None
        _efficient_attention_forward_3 = torch.ops.aten._efficient_attention_forward.default(unsqueeze_9, unsqueeze_10, unsqueeze_11, None, convert_element_type_6, convert_element_type_6, sym_size_int_1, sym_size_int_1, 0.0, 0, True)
        getitem_30 = _efficient_attention_forward_3[0]
        getitem_31 = _efficient_attention_forward_3[1]
        getitem_32 = _efficient_attention_forward_3[2]
        getitem_33 = _efficient_attention_forward_3[3];  _efficient_attention_forward_3 = None
        squeeze_3 = torch.ops.aten.squeeze.dim(getitem_30, 0)
        permute_43 = torch.ops.aten.permute.default(squeeze_3, [1, 0, 2]);  squeeze_3 = None
        permute_44 = torch.ops.aten.permute.default(permute_43, [1, 0, 2]);  permute_43 = None
        view_15 = torch.ops.aten.view.default(permute_44, [sym_size_int, 384]);  permute_44 = None
        permute_45 = torch.ops.aten.permute.default(primals_26, [1, 0])
        mm_13 = torch.ops.aten.mm.default(view_15, permute_45);  view_15 = permute_45 = None
        add_13 = torch.ops.aten.add.Tensor(add_11, mm_13);  mm_13 = None
        pow_8 = torch.ops.aten.pow.Tensor_Scalar(add_13, 2)
        mean_7 = torch.ops.aten.mean.dim(pow_8, [1], True);  pow_8 = None
        add_14 = torch.ops.aten.add.Tensor(mean_7, 1e-06);  mean_7 = None
        rsqrt_7 = torch.ops.aten.rsqrt.default(add_14);  add_14 = None
        mul_37 = torch.ops.aten.mul.Tensor(add_13, rsqrt_7)
        mul_38 = torch.ops.aten.mul.Tensor(mul_37, primals_27);  mul_37 = None
        permute_46 = torch.ops.aten.permute.default(primals_28, [1, 0])
        mm_14 = torch.ops.aten.mm.default(mul_38, permute_46);  permute_46 = None
        sigmoid_3 = torch.ops.aten.sigmoid.default(mm_14)
        mul_39 = torch.ops.aten.mul.Tensor(mm_14, sigmoid_3);  sigmoid_3 = None
        inductor_lookup_seed_default_10 = torch.ops.prims.inductor_lookup_seed.default(inductor_seeds_default, 10)
        inductor_random_default_17 = torch.ops.prims.inductor_random.default([sym_size_int, 1024], inductor_lookup_seed_default_10, 'rand');  inductor_lookup_seed_default_10 = None
        gt_10 = torch.ops.aten.gt.Scalar(inductor_random_default_17, 0.3);  inductor_random_default_17 = None
        mul_40 = torch.ops.aten.mul.Tensor(gt_10, mul_39);  mul_39 = None
        mul_41 = torch.ops.aten.mul.Tensor(mul_40, 1.4285714285714286);  mul_40 = None
        permute_47 = torch.ops.aten.permute.default(primals_29, [1, 0])
        mm_15 = torch.ops.aten.mm.default(mul_41, permute_47);  permute_47 = None
        inductor_lookup_seed_default_11 = torch.ops.prims.inductor_lookup_seed.default(inductor_seeds_default, 11)
        inductor_random_default_16 = torch.ops.prims.inductor_random.default([sym_size_int, 384], inductor_lookup_seed_default_11, 'rand');  inductor_lookup_seed_default_11 = None
        gt_11 = torch.ops.aten.gt.Scalar(inductor_random_default_16, 0.3);  inductor_random_default_16 = None
        mul_42 = torch.ops.aten.mul.Tensor(gt_11, mm_15);  mm_15 = None
        mul_43 = torch.ops.aten.mul.Tensor(mul_42, 1.4285714285714286);  mul_42 = None
        add_15 = torch.ops.aten.add.Tensor(add_13, mul_43);  mul_43 = None
        pow_9 = torch.ops.aten.pow.Tensor_Scalar(primals_30, 2)
        mean_8 = torch.ops.aten.mean.dim(pow_9, [1], True);  pow_9 = None
        add_16 = torch.ops.aten.add.Tensor(mean_8, 1e-06);  mean_8 = None
        rsqrt_8 = torch.ops.aten.rsqrt.default(add_16);  add_16 = None
        mul_44 = torch.ops.aten.mul.Tensor(primals_30, rsqrt_8)
        mul_45 = torch.ops.aten.mul.Tensor(mul_44, primals_35);  mul_44 = None
        sym_size_int_3 = torch.ops.aten.sym_size.int(primals_30, 0)
        inductor_lookup_seed_default_12 = torch.ops.prims.inductor_lookup_seed.default(inductor_seeds_default, 12)
        inductor_random_default_15 = torch.ops.prims.inductor_random.default([sym_size_int_3, 384], inductor_lookup_seed_default_12, 'rand');  inductor_lookup_seed_default_12 = None
        gt_12 = torch.ops.aten.gt.Scalar(inductor_random_default_15, 0.3);  inductor_random_default_15 = None
        mul_46 = torch.ops.aten.mul.Tensor(gt_12, mul_45);  mul_45 = None
        mul_47 = torch.ops.aten.mul.Tensor(mul_46, 1.4285714285714286);  mul_46 = None
        permute_48 = torch.ops.aten.permute.default(primals_36, [1, 0])
        mm_16 = torch.ops.aten.mm.default(mul_47, permute_48);  permute_48 = None
        split_4 = torch.ops.aten.split.Tensor(mm_16, 384, 1);  mm_16 = None
        getitem_36 = split_4[0]
        getitem_37 = split_4[1]
        getitem_38 = split_4[2];  split_4 = None
        view_16 = torch.ops.aten.view.default(getitem_36, [sym_size_int_3, 6, 64]);  getitem_36 = None
        permute_49 = torch.ops.aten.permute.default(view_16, [1, 0, 2]);  view_16 = None
        view_17 = torch.ops.aten.view.default(getitem_37, [sym_size_int_3, 6, 64]);  getitem_37 = None
        permute_50 = torch.ops.aten.permute.default(view_17, [1, 0, 2]);  view_17 = None
        view_18 = torch.ops.aten.view.default(getitem_38, [sym_size_int_3, 6, 64]);  getitem_38 = None
        permute_51 = torch.ops.aten.permute.default(view_18, [1, 0, 2]);  view_18 = None
        permute_52 = torch.ops.aten.permute.default(permute_49, [1, 0, 2]);  permute_49 = None
        permute_53 = torch.ops.aten.permute.default(permute_50, [1, 0, 2]);  permute_50 = None
        permute_54 = torch.ops.aten.permute.default(permute_51, [1, 0, 2]);  permute_51 = None
        convert_element_type_8 = torch.ops.prims.convert_element_type.default(primals_31, torch.int32)
        unsqueeze_12 = torch.ops.aten.unsqueeze.default(permute_52, 0);  permute_52 = None
        unsqueeze_13 = torch.ops.aten.unsqueeze.default(permute_53, 0);  permute_53 = None
        unsqueeze_14 = torch.ops.aten.unsqueeze.default(permute_54, 0);  permute_54 = None
        sym_size_int_4 = torch.ops.aten.sym_size.int(primals_33, 0)
        _efficient_attention_forward_4 = torch.ops.aten._efficient_attention_forward.default(unsqueeze_12, unsqueeze_13, unsqueeze_14, None, convert_element_type_8, convert_element_type_8, sym_size_int_4, sym_size_int_4, 0.0, 1, True)
        getitem_39 = _efficient_attention_forward_4[0]
        getitem_40 = _efficient_attention_forward_4[1]
        getitem_41 = _efficient_attention_forward_4[2]
        getitem_42 = _efficient_attention_forward_4[3];  _efficient_attention_forward_4 = None
        squeeze_4 = torch.ops.aten.squeeze.dim(getitem_39, 0)
        permute_55 = torch.ops.aten.permute.default(squeeze_4, [1, 0, 2]);  squeeze_4 = None
        permute_56 = torch.ops.aten.permute.default(permute_55, [1, 0, 2]);  permute_55 = None
        view_19 = torch.ops.aten.view.default(permute_56, [sym_size_int_3, 384]);  permute_56 = None
        permute_57 = torch.ops.aten.permute.default(primals_37, [1, 0])
        mm_17 = torch.ops.aten.mm.default(view_19, permute_57);  view_19 = permute_57 = None
        add_17 = torch.ops.aten.add.Tensor(primals_30, mm_17);  mm_17 = None
        pow_10 = torch.ops.aten.pow.Tensor_Scalar(primals_30, 2)
        mean_9 = torch.ops.aten.mean.dim(pow_10, [1], True);  pow_10 = None
        add_18 = torch.ops.aten.add.Tensor(mean_9, 1e-06);  mean_9 = None
        rsqrt_9 = torch.ops.aten.rsqrt.default(add_18);  add_18 = None
        mul_48 = torch.ops.aten.mul.Tensor(primals_30, rsqrt_9)
        mul_49 = torch.ops.aten.mul.Tensor(mul_48, primals_38);  mul_48 = None
        inductor_lookup_seed_default_13 = torch.ops.prims.inductor_lookup_seed.default(inductor_seeds_default, 13)
        inductor_random_default_14 = torch.ops.prims.inductor_random.default([sym_size_int_3, 384], inductor_lookup_seed_default_13, 'rand');  inductor_lookup_seed_default_13 = None
        gt_13 = torch.ops.aten.gt.Scalar(inductor_random_default_14, 0.3);  inductor_random_default_14 = None
        mul_50 = torch.ops.aten.mul.Tensor(gt_13, mul_49);  mul_49 = None
        mul_51 = torch.ops.aten.mul.Tensor(mul_50, 1.4285714285714286);  mul_50 = None
        permute_58 = torch.ops.aten.permute.default(primals_39, [1, 0])
        mm_18 = torch.ops.aten.mm.default(mul_51, permute_58);  permute_58 = None
        permute_59 = torch.ops.aten.permute.default(primals_40, [1, 0])
        mm_19 = torch.ops.aten.mm.default(add_15, permute_59);  permute_59 = None
        split_5 = torch.ops.aten.split.Tensor(mm_19, 384, 1);  mm_19 = None
        getitem_45 = split_5[0]
        getitem_46 = split_5[1];  split_5 = None
        view_20 = torch.ops.aten.view.default(mm_18, [sym_size_int_3, 6, 64]);  mm_18 = None
        permute_60 = torch.ops.aten.permute.default(view_20, [1, 0, 2]);  view_20 = None
        view_21 = torch.ops.aten.view.default(getitem_45, [sym_size_int, 6, 64]);  getitem_45 = None
        permute_61 = torch.ops.aten.permute.default(view_21, [1, 0, 2]);  view_21 = None
        view_22 = torch.ops.aten.view.default(getitem_46, [sym_size_int, 6, 64]);  getitem_46 = None
        permute_62 = torch.ops.aten.permute.default(view_22, [1, 0, 2]);  view_22 = None
        permute_63 = torch.ops.aten.permute.default(permute_60, [1, 0, 2]);  permute_60 = None
        permute_64 = torch.ops.aten.permute.default(permute_61, [1, 0, 2]);  permute_61 = None
        permute_65 = torch.ops.aten.permute.default(permute_62, [1, 0, 2]);  permute_62 = None
        convert_element_type_10 = torch.ops.prims.convert_element_type.default(primals_31, torch.int32)
        convert_element_type_11 = torch.ops.prims.convert_element_type.default(primals_2, torch.int32)
        unsqueeze_15 = torch.ops.aten.unsqueeze.default(permute_63, 0);  permute_63 = None
        unsqueeze_16 = torch.ops.aten.unsqueeze.default(permute_64, 0);  permute_64 = None
        unsqueeze_17 = torch.ops.aten.unsqueeze.default(permute_65, 0);  permute_65 = None
        _efficient_attention_forward_5 = torch.ops.aten._efficient_attention_forward.default(unsqueeze_15, unsqueeze_16, unsqueeze_17, None, convert_element_type_10, convert_element_type_11, sym_size_int_4, sym_size_int_1, 0.0, 0, True)
        getitem_47 = _efficient_attention_forward_5[0]
        getitem_48 = _efficient_attention_forward_5[1]
        getitem_49 = _efficient_attention_forward_5[2]
        getitem_50 = _efficient_attention_forward_5[3];  _efficient_attention_forward_5 = None
        squeeze_5 = torch.ops.aten.squeeze.dim(getitem_47, 0)
        permute_66 = torch.ops.aten.permute.default(squeeze_5, [1, 0, 2]);  squeeze_5 = None
        permute_67 = torch.ops.aten.permute.default(permute_66, [1, 0, 2]);  permute_66 = None
        view_23 = torch.ops.aten.view.default(permute_67, [sym_size_int_3, 384]);  permute_67 = None
        permute_68 = torch.ops.aten.permute.default(primals_41, [1, 0])
        mm_20 = torch.ops.aten.mm.default(view_23, permute_68);  view_23 = permute_68 = None
        add_19 = torch.ops.aten.add.Tensor(add_17, mm_20);  add_17 = mm_20 = None
        pow_11 = torch.ops.aten.pow.Tensor_Scalar(add_19, 2)
        mean_10 = torch.ops.aten.mean.dim(pow_11, [1], True);  pow_11 = None
        add_20 = torch.ops.aten.add.Tensor(mean_10, 1e-06);  mean_10 = None
        rsqrt_10 = torch.ops.aten.rsqrt.default(add_20);  add_20 = None
        mul_52 = torch.ops.aten.mul.Tensor(add_19, rsqrt_10)
        mul_53 = torch.ops.aten.mul.Tensor(mul_52, primals_42);  mul_52 = None
        permute_69 = torch.ops.aten.permute.default(primals_43, [1, 0])
        mm_21 = torch.ops.aten.mm.default(mul_53, permute_69);  permute_69 = None
        sigmoid_4 = torch.ops.aten.sigmoid.default(mm_21)
        mul_54 = torch.ops.aten.mul.Tensor(mm_21, sigmoid_4);  sigmoid_4 = None
        inductor_lookup_seed_default_14 = torch.ops.prims.inductor_lookup_seed.default(inductor_seeds_default, 14)
        inductor_random_default_13 = torch.ops.prims.inductor_random.default([sym_size_int_3, 1024], inductor_lookup_seed_default_14, 'rand');  inductor_lookup_seed_default_14 = None
        gt_14 = torch.ops.aten.gt.Scalar(inductor_random_default_13, 0.3);  inductor_random_default_13 = None
        mul_55 = torch.ops.aten.mul.Tensor(gt_14, mul_54);  mul_54 = None
        mul_56 = torch.ops.aten.mul.Tensor(mul_55, 1.4285714285714286);  mul_55 = None
        permute_70 = torch.ops.aten.permute.default(primals_44, [1, 0])
        mm_22 = torch.ops.aten.mm.default(mul_56, permute_70);  permute_70 = None
        inductor_lookup_seed_default_15 = torch.ops.prims.inductor_lookup_seed.default(inductor_seeds_default, 15)
        inductor_random_default_12 = torch.ops.prims.inductor_random.default([sym_size_int_3, 384], inductor_lookup_seed_default_15, 'rand');  inductor_lookup_seed_default_15 = None
        gt_15 = torch.ops.aten.gt.Scalar(inductor_random_default_12, 0.3);  inductor_random_default_12 = None
        mul_57 = torch.ops.aten.mul.Tensor(gt_15, mm_22);  mm_22 = None
        mul_58 = torch.ops.aten.mul.Tensor(mul_57, 1.4285714285714286);  mul_57 = None
        add_21 = torch.ops.aten.add.Tensor(add_19, mul_58);  mul_58 = None
        pow_12 = torch.ops.aten.pow.Tensor_Scalar(add_21, 2)
        mean_11 = torch.ops.aten.mean.dim(pow_12, [1], True);  pow_12 = None
        add_22 = torch.ops.aten.add.Tensor(mean_11, 1e-06);  mean_11 = None
        rsqrt_11 = torch.ops.aten.rsqrt.default(add_22);  add_22 = None
        mul_59 = torch.ops.aten.mul.Tensor(add_21, rsqrt_11)
        mul_60 = torch.ops.aten.mul.Tensor(mul_59, primals_45);  mul_59 = None
        inductor_lookup_seed_default_16 = torch.ops.prims.inductor_lookup_seed.default(inductor_seeds_default, 16)
        inductor_random_default_11 = torch.ops.prims.inductor_random.default([sym_size_int_3, 384], inductor_lookup_seed_default_16, 'rand');  inductor_lookup_seed_default_16 = None
        gt_16 = torch.ops.aten.gt.Scalar(inductor_random_default_11, 0.3);  inductor_random_default_11 = None
        mul_61 = torch.ops.aten.mul.Tensor(gt_16, mul_60);  mul_60 = None
        mul_62 = torch.ops.aten.mul.Tensor(mul_61, 1.4285714285714286);  mul_61 = None
        permute_71 = torch.ops.aten.permute.default(primals_46, [1, 0])
        mm_23 = torch.ops.aten.mm.default(mul_62, permute_71);  permute_71 = None
        split_6 = torch.ops.aten.split.Tensor(mm_23, 384, 1);  mm_23 = None
        getitem_53 = split_6[0]
        getitem_54 = split_6[1]
        getitem_55 = split_6[2];  split_6 = None
        view_24 = torch.ops.aten.view.default(getitem_53, [sym_size_int_3, 6, 64]);  getitem_53 = None
        permute_72 = torch.ops.aten.permute.default(view_24, [1, 0, 2]);  view_24 = None
        view_25 = torch.ops.aten.view.default(getitem_54, [sym_size_int_3, 6, 64]);  getitem_54 = None
        permute_73 = torch.ops.aten.permute.default(view_25, [1, 0, 2]);  view_25 = None
        view_26 = torch.ops.aten.view.default(getitem_55, [sym_size_int_3, 6, 64]);  getitem_55 = None
        permute_74 = torch.ops.aten.permute.default(view_26, [1, 0, 2]);  view_26 = None
        permute_75 = torch.ops.aten.permute.default(permute_72, [1, 0, 2]);  permute_72 = None
        permute_76 = torch.ops.aten.permute.default(permute_73, [1, 0, 2]);  permute_73 = None
        permute_77 = torch.ops.aten.permute.default(permute_74, [1, 0, 2]);  permute_74 = None
        convert_element_type_12 = torch.ops.prims.convert_element_type.default(primals_31, torch.int32)
        unsqueeze_18 = torch.ops.aten.unsqueeze.default(permute_75, 0);  permute_75 = None
        unsqueeze_19 = torch.ops.aten.unsqueeze.default(permute_76, 0);  permute_76 = None
        unsqueeze_20 = torch.ops.aten.unsqueeze.default(permute_77, 0);  permute_77 = None
        _efficient_attention_forward_6 = torch.ops.aten._efficient_attention_forward.default(unsqueeze_18, unsqueeze_19, unsqueeze_20, None, convert_element_type_12, convert_element_type_12, sym_size_int_4, sym_size_int_4, 0.0, 1, True)
        getitem_56 = _efficient_attention_forward_6[0]
        getitem_57 = _efficient_attention_forward_6[1]
        getitem_58 = _efficient_attention_forward_6[2]
        getitem_59 = _efficient_attention_forward_6[3];  _efficient_attention_forward_6 = None
        squeeze_6 = torch.ops.aten.squeeze.dim(getitem_56, 0)
        permute_78 = torch.ops.aten.permute.default(squeeze_6, [1, 0, 2]);  squeeze_6 = None
        permute_79 = torch.ops.aten.permute.default(permute_78, [1, 0, 2]);  permute_78 = None
        view_27 = torch.ops.aten.view.default(permute_79, [sym_size_int_3, 384]);  permute_79 = None
        permute_80 = torch.ops.aten.permute.default(primals_47, [1, 0])
        mm_24 = torch.ops.aten.mm.default(view_27, permute_80);  view_27 = permute_80 = None
        add_23 = torch.ops.aten.add.Tensor(add_21, mm_24);  mm_24 = None
        pow_13 = torch.ops.aten.pow.Tensor_Scalar(add_21, 2)
        mean_12 = torch.ops.aten.mean.dim(pow_13, [1], True);  pow_13 = None
        add_24 = torch.ops.aten.add.Tensor(mean_12, 1e-06);  mean_12 = None
        rsqrt_12 = torch.ops.aten.rsqrt.default(add_24);  add_24 = None
        mul_63 = torch.ops.aten.mul.Tensor(add_21, rsqrt_12)
        mul_64 = torch.ops.aten.mul.Tensor(mul_63, primals_48)
        inductor_lookup_seed_default_17 = torch.ops.prims.inductor_lookup_seed.default(inductor_seeds_default, 17)
        inductor_random_default_10 = torch.ops.prims.inductor_random.default([sym_size_int_3, 384], inductor_lookup_seed_default_17, 'rand');  inductor_lookup_seed_default_17 = None
        gt_17 = torch.ops.aten.gt.Scalar(inductor_random_default_10, 0.3);  inductor_random_default_10 = None
        mul_65 = torch.ops.aten.mul.Tensor(gt_17, mul_64);  mul_64 = None
        mul_66 = torch.ops.aten.mul.Tensor(mul_65, 1.4285714285714286);  mul_65 = None
        permute_81 = torch.ops.aten.permute.default(primals_49, [1, 0])
        mm_25 = torch.ops.aten.mm.default(mul_66, permute_81);  permute_81 = None
        permute_82 = torch.ops.aten.permute.default(primals_50, [1, 0])
        mm_26 = torch.ops.aten.mm.default(add_15, permute_82);  permute_82 = None
        split_7 = torch.ops.aten.split.Tensor(mm_26, 384, 1);  mm_26 = None
        getitem_62 = split_7[0]
        getitem_63 = split_7[1];  split_7 = None
        view_28 = torch.ops.aten.view.default(mm_25, [sym_size_int_3, 6, 64]);  mm_25 = None
        permute_83 = torch.ops.aten.permute.default(view_28, [1, 0, 2]);  view_28 = None
        view_29 = torch.ops.aten.view.default(getitem_62, [sym_size_int, 6, 64]);  getitem_62 = None
        permute_84 = torch.ops.aten.permute.default(view_29, [1, 0, 2]);  view_29 = None
        view_30 = torch.ops.aten.view.default(getitem_63, [sym_size_int, 6, 64]);  getitem_63 = None
        permute_85 = torch.ops.aten.permute.default(view_30, [1, 0, 2]);  view_30 = None
        permute_86 = torch.ops.aten.permute.default(permute_83, [1, 0, 2]);  permute_83 = None
        permute_87 = torch.ops.aten.permute.default(permute_84, [1, 0, 2]);  permute_84 = None
        permute_88 = torch.ops.aten.permute.default(permute_85, [1, 0, 2]);  permute_85 = None
        convert_element_type_14 = torch.ops.prims.convert_element_type.default(primals_31, torch.int32)
        convert_element_type_15 = torch.ops.prims.convert_element_type.default(primals_2, torch.int32)
        unsqueeze_21 = torch.ops.aten.unsqueeze.default(permute_86, 0);  permute_86 = None
        unsqueeze_22 = torch.ops.aten.unsqueeze.default(permute_87, 0);  permute_87 = None
        unsqueeze_23 = torch.ops.aten.unsqueeze.default(permute_88, 0);  permute_88 = None
        _efficient_attention_forward_7 = torch.ops.aten._efficient_attention_forward.default(unsqueeze_21, unsqueeze_22, unsqueeze_23, None, convert_element_type_14, convert_element_type_15, sym_size_int_4, sym_size_int_1, 0.0, 0, True)
        getitem_64 = _efficient_attention_forward_7[0]
        getitem_65 = _efficient_attention_forward_7[1]
        getitem_66 = _efficient_attention_forward_7[2]
        getitem_67 = _efficient_attention_forward_7[3];  _efficient_attention_forward_7 = None
        squeeze_7 = torch.ops.aten.squeeze.dim(getitem_64, 0)
        permute_89 = torch.ops.aten.permute.default(squeeze_7, [1, 0, 2]);  squeeze_7 = None
        permute_90 = torch.ops.aten.permute.default(permute_89, [1, 0, 2]);  permute_89 = None
        view_31 = torch.ops.aten.view.default(permute_90, [sym_size_int_3, 384]);  permute_90 = None
        permute_91 = torch.ops.aten.permute.default(primals_51, [1, 0])
        mm_27 = torch.ops.aten.mm.default(view_31, permute_91);  view_31 = permute_91 = None
        add_25 = torch.ops.aten.add.Tensor(add_23, mm_27);  add_23 = mm_27 = None
        pow_14 = torch.ops.aten.pow.Tensor_Scalar(add_25, 2)
        mean_13 = torch.ops.aten.mean.dim(pow_14, [1], True);  pow_14 = None
        add_26 = torch.ops.aten.add.Tensor(mean_13, 1e-06);  mean_13 = None
        rsqrt_13 = torch.ops.aten.rsqrt.default(add_26);  add_26 = None
        mul_67 = torch.ops.aten.mul.Tensor(add_25, rsqrt_13)
        mul_68 = torch.ops.aten.mul.Tensor(mul_67, primals_52);  mul_67 = None
        permute_92 = torch.ops.aten.permute.default(primals_53, [1, 0])
        mm_28 = torch.ops.aten.mm.default(mul_68, permute_92);  permute_92 = None
        sigmoid_5 = torch.ops.aten.sigmoid.default(mm_28)
        mul_69 = torch.ops.aten.mul.Tensor(mm_28, sigmoid_5);  sigmoid_5 = None
        inductor_lookup_seed_default_18 = torch.ops.prims.inductor_lookup_seed.default(inductor_seeds_default, 18)
        inductor_random_default_9 = torch.ops.prims.inductor_random.default([sym_size_int_3, 1024], inductor_lookup_seed_default_18, 'rand');  inductor_lookup_seed_default_18 = None
        gt_18 = torch.ops.aten.gt.Scalar(inductor_random_default_9, 0.3);  inductor_random_default_9 = None
        mul_70 = torch.ops.aten.mul.Tensor(gt_18, mul_69);  mul_69 = None
        mul_71 = torch.ops.aten.mul.Tensor(mul_70, 1.4285714285714286);  mul_70 = None
        permute_93 = torch.ops.aten.permute.default(primals_54, [1, 0])
        mm_29 = torch.ops.aten.mm.default(mul_71, permute_93);  permute_93 = None
        inductor_lookup_seed_default_19 = torch.ops.prims.inductor_lookup_seed.default(inductor_seeds_default, 19)
        inductor_random_default_8 = torch.ops.prims.inductor_random.default([sym_size_int_3, 384], inductor_lookup_seed_default_19, 'rand');  inductor_lookup_seed_default_19 = None
        gt_19 = torch.ops.aten.gt.Scalar(inductor_random_default_8, 0.3);  inductor_random_default_8 = None
        mul_72 = torch.ops.aten.mul.Tensor(gt_19, mm_29);  mm_29 = None
        mul_73 = torch.ops.aten.mul.Tensor(mul_72, 1.4285714285714286);  mul_72 = None
        add_27 = torch.ops.aten.add.Tensor(add_25, mul_73);  mul_73 = None
        pow_15 = torch.ops.aten.pow.Tensor_Scalar(add_27, 2)
        mean_14 = torch.ops.aten.mean.dim(pow_15, [1], True);  pow_15 = None
        add_28 = torch.ops.aten.add.Tensor(mean_14, 1e-06);  mean_14 = None
        rsqrt_14 = torch.ops.aten.rsqrt.default(add_28);  add_28 = None
        mul_74 = torch.ops.aten.mul.Tensor(add_27, rsqrt_14)
        mul_75 = torch.ops.aten.mul.Tensor(mul_74, primals_55);  mul_74 = None
        inductor_lookup_seed_default_20 = torch.ops.prims.inductor_lookup_seed.default(inductor_seeds_default, 20)
        inductor_random_default_7 = torch.ops.prims.inductor_random.default([sym_size_int_3, 384], inductor_lookup_seed_default_20, 'rand');  inductor_lookup_seed_default_20 = None
        gt_20 = torch.ops.aten.gt.Scalar(inductor_random_default_7, 0.3);  inductor_random_default_7 = None
        mul_76 = torch.ops.aten.mul.Tensor(gt_20, mul_75);  mul_75 = None
        mul_77 = torch.ops.aten.mul.Tensor(mul_76, 1.4285714285714286);  mul_76 = None
        permute_94 = torch.ops.aten.permute.default(primals_56, [1, 0])
        mm_30 = torch.ops.aten.mm.default(mul_77, permute_94);  permute_94 = None
        split_8 = torch.ops.aten.split.Tensor(mm_30, 384, 1);  mm_30 = None
        getitem_70 = split_8[0]
        getitem_71 = split_8[1]
        getitem_72 = split_8[2];  split_8 = None
        view_32 = torch.ops.aten.view.default(getitem_70, [sym_size_int_3, 6, 64]);  getitem_70 = None
        permute_95 = torch.ops.aten.permute.default(view_32, [1, 0, 2]);  view_32 = None
        view_33 = torch.ops.aten.view.default(getitem_71, [sym_size_int_3, 6, 64]);  getitem_71 = None
        permute_96 = torch.ops.aten.permute.default(view_33, [1, 0, 2]);  view_33 = None
        view_34 = torch.ops.aten.view.default(getitem_72, [sym_size_int_3, 6, 64]);  getitem_72 = None
        permute_97 = torch.ops.aten.permute.default(view_34, [1, 0, 2]);  view_34 = None
        permute_98 = torch.ops.aten.permute.default(permute_95, [1, 0, 2]);  permute_95 = None
        permute_99 = torch.ops.aten.permute.default(permute_96, [1, 0, 2]);  permute_96 = None
        permute_100 = torch.ops.aten.permute.default(permute_97, [1, 0, 2]);  permute_97 = None
        convert_element_type_16 = torch.ops.prims.convert_element_type.default(primals_31, torch.int32)
        unsqueeze_24 = torch.ops.aten.unsqueeze.default(permute_98, 0);  permute_98 = None
        unsqueeze_25 = torch.ops.aten.unsqueeze.default(permute_99, 0);  permute_99 = None
        unsqueeze_26 = torch.ops.aten.unsqueeze.default(permute_100, 0);  permute_100 = None
        _efficient_attention_forward_8 = torch.ops.aten._efficient_attention_forward.default(unsqueeze_24, unsqueeze_25, unsqueeze_26, None, convert_element_type_16, convert_element_type_16, sym_size_int_4, sym_size_int_4, 0.0, 1, True)
        getitem_73 = _efficient_attention_forward_8[0]
        getitem_74 = _efficient_attention_forward_8[1]
        getitem_75 = _efficient_attention_forward_8[2]
        getitem_76 = _efficient_attention_forward_8[3];  _efficient_attention_forward_8 = None
        squeeze_8 = torch.ops.aten.squeeze.dim(getitem_73, 0)
        permute_101 = torch.ops.aten.permute.default(squeeze_8, [1, 0, 2]);  squeeze_8 = None
        permute_102 = torch.ops.aten.permute.default(permute_101, [1, 0, 2]);  permute_101 = None
        view_35 = torch.ops.aten.view.default(permute_102, [sym_size_int_3, 384]);  permute_102 = None
        permute_103 = torch.ops.aten.permute.default(primals_57, [1, 0])
        mm_31 = torch.ops.aten.mm.default(view_35, permute_103);  view_35 = permute_103 = None
        add_29 = torch.ops.aten.add.Tensor(add_27, mm_31);  mm_31 = None
        pow_16 = torch.ops.aten.pow.Tensor_Scalar(add_27, 2)
        mean_15 = torch.ops.aten.mean.dim(pow_16, [1], True);  pow_16 = None
        add_30 = torch.ops.aten.add.Tensor(mean_15, 1e-06);  mean_15 = None
        rsqrt_15 = torch.ops.aten.rsqrt.default(add_30);  add_30 = None
        mul_78 = torch.ops.aten.mul.Tensor(add_27, rsqrt_15)
        mul_79 = torch.ops.aten.mul.Tensor(mul_78, primals_58)
        inductor_lookup_seed_default_21 = torch.ops.prims.inductor_lookup_seed.default(inductor_seeds_default, 21)
        inductor_random_default_6 = torch.ops.prims.inductor_random.default([sym_size_int_3, 384], inductor_lookup_seed_default_21, 'rand');  inductor_lookup_seed_default_21 = None
        gt_21 = torch.ops.aten.gt.Scalar(inductor_random_default_6, 0.3);  inductor_random_default_6 = None
        mul_80 = torch.ops.aten.mul.Tensor(gt_21, mul_79);  mul_79 = None
        mul_81 = torch.ops.aten.mul.Tensor(mul_80, 1.4285714285714286);  mul_80 = None
        permute_104 = torch.ops.aten.permute.default(primals_59, [1, 0])
        mm_32 = torch.ops.aten.mm.default(mul_81, permute_104);  permute_104 = None
        permute_105 = torch.ops.aten.permute.default(primals_60, [1, 0])
        mm_33 = torch.ops.aten.mm.default(add_15, permute_105);  permute_105 = None
        split_9 = torch.ops.aten.split.Tensor(mm_33, 384, 1);  mm_33 = None
        getitem_79 = split_9[0]
        getitem_80 = split_9[1];  split_9 = None
        view_36 = torch.ops.aten.view.default(mm_32, [sym_size_int_3, 6, 64]);  mm_32 = None
        permute_106 = torch.ops.aten.permute.default(view_36, [1, 0, 2]);  view_36 = None
        view_37 = torch.ops.aten.view.default(getitem_79, [sym_size_int, 6, 64]);  getitem_79 = None
        permute_107 = torch.ops.aten.permute.default(view_37, [1, 0, 2]);  view_37 = None
        view_38 = torch.ops.aten.view.default(getitem_80, [sym_size_int, 6, 64]);  getitem_80 = None
        permute_108 = torch.ops.aten.permute.default(view_38, [1, 0, 2]);  view_38 = None
        permute_109 = torch.ops.aten.permute.default(permute_106, [1, 0, 2]);  permute_106 = None
        permute_110 = torch.ops.aten.permute.default(permute_107, [1, 0, 2]);  permute_107 = None
        permute_111 = torch.ops.aten.permute.default(permute_108, [1, 0, 2]);  permute_108 = None
        convert_element_type_18 = torch.ops.prims.convert_element_type.default(primals_31, torch.int32)
        convert_element_type_19 = torch.ops.prims.convert_element_type.default(primals_2, torch.int32)
        unsqueeze_27 = torch.ops.aten.unsqueeze.default(permute_109, 0);  permute_109 = None
        unsqueeze_28 = torch.ops.aten.unsqueeze.default(permute_110, 0);  permute_110 = None
        unsqueeze_29 = torch.ops.aten.unsqueeze.default(permute_111, 0);  permute_111 = None
        _efficient_attention_forward_9 = torch.ops.aten._efficient_attention_forward.default(unsqueeze_27, unsqueeze_28, unsqueeze_29, None, convert_element_type_18, convert_element_type_19, sym_size_int_4, sym_size_int_1, 0.0, 0, True)
        getitem_81 = _efficient_attention_forward_9[0]
        getitem_82 = _efficient_attention_forward_9[1]
        getitem_83 = _efficient_attention_forward_9[2]
        getitem_84 = _efficient_attention_forward_9[3];  _efficient_attention_forward_9 = None
        squeeze_9 = torch.ops.aten.squeeze.dim(getitem_81, 0)
        permute_112 = torch.ops.aten.permute.default(squeeze_9, [1, 0, 2]);  squeeze_9 = None
        permute_113 = torch.ops.aten.permute.default(permute_112, [1, 0, 2]);  permute_112 = None
        view_39 = torch.ops.aten.view.default(permute_113, [sym_size_int_3, 384]);  permute_113 = None
        permute_114 = torch.ops.aten.permute.default(primals_61, [1, 0])
        mm_34 = torch.ops.aten.mm.default(view_39, permute_114);  view_39 = permute_114 = None
        add_31 = torch.ops.aten.add.Tensor(add_29, mm_34);  add_29 = mm_34 = None
        pow_17 = torch.ops.aten.pow.Tensor_Scalar(add_31, 2)
        mean_16 = torch.ops.aten.mean.dim(pow_17, [1], True);  pow_17 = None
        add_32 = torch.ops.aten.add.Tensor(mean_16, 1e-06);  mean_16 = None
        rsqrt_16 = torch.ops.aten.rsqrt.default(add_32);  add_32 = None
        mul_82 = torch.ops.aten.mul.Tensor(add_31, rsqrt_16)
        mul_83 = torch.ops.aten.mul.Tensor(mul_82, primals_62);  mul_82 = None
        permute_115 = torch.ops.aten.permute.default(primals_63, [1, 0])
        mm_35 = torch.ops.aten.mm.default(mul_83, permute_115);  permute_115 = None
        sigmoid_6 = torch.ops.aten.sigmoid.default(mm_35)
        mul_84 = torch.ops.aten.mul.Tensor(mm_35, sigmoid_6);  sigmoid_6 = None
        inductor_lookup_seed_default_22 = torch.ops.prims.inductor_lookup_seed.default(inductor_seeds_default, 22)
        inductor_random_default_5 = torch.ops.prims.inductor_random.default([sym_size_int_3, 1024], inductor_lookup_seed_default_22, 'rand');  inductor_lookup_seed_default_22 = None
        gt_22 = torch.ops.aten.gt.Scalar(inductor_random_default_5, 0.3);  inductor_random_default_5 = None
        mul_85 = torch.ops.aten.mul.Tensor(gt_22, mul_84);  mul_84 = None
        mul_86 = torch.ops.aten.mul.Tensor(mul_85, 1.4285714285714286);  mul_85 = None
        permute_116 = torch.ops.aten.permute.default(primals_64, [1, 0])
        mm_36 = torch.ops.aten.mm.default(mul_86, permute_116);  permute_116 = None
        inductor_lookup_seed_default_23 = torch.ops.prims.inductor_lookup_seed.default(inductor_seeds_default, 23)
        inductor_random_default_4 = torch.ops.prims.inductor_random.default([sym_size_int_3, 384], inductor_lookup_seed_default_23, 'rand');  inductor_lookup_seed_default_23 = None
        gt_23 = torch.ops.aten.gt.Scalar(inductor_random_default_4, 0.3);  inductor_random_default_4 = None
        mul_87 = torch.ops.aten.mul.Tensor(gt_23, mm_36);  mm_36 = None
        mul_88 = torch.ops.aten.mul.Tensor(mul_87, 1.4285714285714286);  mul_87 = None
        add_33 = torch.ops.aten.add.Tensor(add_31, mul_88);  mul_88 = None
        pow_18 = torch.ops.aten.pow.Tensor_Scalar(add_33, 2)
        mean_17 = torch.ops.aten.mean.dim(pow_18, [1], True);  pow_18 = None
        add_34 = torch.ops.aten.add.Tensor(mean_17, 1e-06);  mean_17 = None
        rsqrt_17 = torch.ops.aten.rsqrt.default(add_34);  add_34 = None
        mul_89 = torch.ops.aten.mul.Tensor(add_33, rsqrt_17)
        mul_90 = torch.ops.aten.mul.Tensor(mul_89, primals_65);  mul_89 = None
        inductor_lookup_seed_default_24 = torch.ops.prims.inductor_lookup_seed.default(inductor_seeds_default, 24)
        inductor_random_default_3 = torch.ops.prims.inductor_random.default([sym_size_int_3, 384], inductor_lookup_seed_default_24, 'rand');  inductor_lookup_seed_default_24 = None
        gt_24 = torch.ops.aten.gt.Scalar(inductor_random_default_3, 0.3);  inductor_random_default_3 = None
        mul_91 = torch.ops.aten.mul.Tensor(gt_24, mul_90);  mul_90 = None
        mul_92 = torch.ops.aten.mul.Tensor(mul_91, 1.4285714285714286);  mul_91 = None
        permute_117 = torch.ops.aten.permute.default(primals_66, [1, 0])
        mm_37 = torch.ops.aten.mm.default(mul_92, permute_117);  permute_117 = None
        split_10 = torch.ops.aten.split.Tensor(mm_37, 384, 1);  mm_37 = None
        getitem_87 = split_10[0]
        getitem_88 = split_10[1]
        getitem_89 = split_10[2];  split_10 = None
        view_40 = torch.ops.aten.view.default(getitem_87, [sym_size_int_3, 6, 64]);  getitem_87 = None
        permute_118 = torch.ops.aten.permute.default(view_40, [1, 0, 2]);  view_40 = None
        view_41 = torch.ops.aten.view.default(getitem_88, [sym_size_int_3, 6, 64]);  getitem_88 = None
        permute_119 = torch.ops.aten.permute.default(view_41, [1, 0, 2]);  view_41 = None
        view_42 = torch.ops.aten.view.default(getitem_89, [sym_size_int_3, 6, 64]);  getitem_89 = None
        permute_120 = torch.ops.aten.permute.default(view_42, [1, 0, 2]);  view_42 = None
        permute_121 = torch.ops.aten.permute.default(permute_118, [1, 0, 2]);  permute_118 = None
        permute_122 = torch.ops.aten.permute.default(permute_119, [1, 0, 2]);  permute_119 = None
        permute_123 = torch.ops.aten.permute.default(permute_120, [1, 0, 2]);  permute_120 = None
        convert_element_type_20 = torch.ops.prims.convert_element_type.default(primals_31, torch.int32)
        unsqueeze_30 = torch.ops.aten.unsqueeze.default(permute_121, 0);  permute_121 = None
        unsqueeze_31 = torch.ops.aten.unsqueeze.default(permute_122, 0);  permute_122 = None
        unsqueeze_32 = torch.ops.aten.unsqueeze.default(permute_123, 0);  permute_123 = None
        _efficient_attention_forward_10 = torch.ops.aten._efficient_attention_forward.default(unsqueeze_30, unsqueeze_31, unsqueeze_32, None, convert_element_type_20, convert_element_type_20, sym_size_int_4, sym_size_int_4, 0.0, 1, True)
        getitem_90 = _efficient_attention_forward_10[0]
        getitem_91 = _efficient_attention_forward_10[1]
        getitem_92 = _efficient_attention_forward_10[2]
        getitem_93 = _efficient_attention_forward_10[3];  _efficient_attention_forward_10 = None
        squeeze_10 = torch.ops.aten.squeeze.dim(getitem_90, 0)
        permute_124 = torch.ops.aten.permute.default(squeeze_10, [1, 0, 2]);  squeeze_10 = None
        permute_125 = torch.ops.aten.permute.default(permute_124, [1, 0, 2]);  permute_124 = None
        view_43 = torch.ops.aten.view.default(permute_125, [sym_size_int_3, 384]);  permute_125 = None
        permute_126 = torch.ops.aten.permute.default(primals_67, [1, 0])
        mm_38 = torch.ops.aten.mm.default(view_43, permute_126);  view_43 = permute_126 = None
        add_35 = torch.ops.aten.add.Tensor(add_33, mm_38);  mm_38 = None
        pow_19 = torch.ops.aten.pow.Tensor_Scalar(add_33, 2)
        mean_18 = torch.ops.aten.mean.dim(pow_19, [1], True);  pow_19 = None
        add_36 = torch.ops.aten.add.Tensor(mean_18, 1e-06);  mean_18 = None
        rsqrt_18 = torch.ops.aten.rsqrt.default(add_36);  add_36 = None
        mul_93 = torch.ops.aten.mul.Tensor(add_33, rsqrt_18)
        mul_94 = torch.ops.aten.mul.Tensor(mul_93, primals_68)
        inductor_lookup_seed_default_25 = torch.ops.prims.inductor_lookup_seed.default(inductor_seeds_default, 25)
        inductor_random_default_2 = torch.ops.prims.inductor_random.default([sym_size_int_3, 384], inductor_lookup_seed_default_25, 'rand');  inductor_lookup_seed_default_25 = None
        gt_25 = torch.ops.aten.gt.Scalar(inductor_random_default_2, 0.3);  inductor_random_default_2 = None
        mul_95 = torch.ops.aten.mul.Tensor(gt_25, mul_94);  mul_94 = None
        mul_96 = torch.ops.aten.mul.Tensor(mul_95, 1.4285714285714286);  mul_95 = None
        permute_127 = torch.ops.aten.permute.default(primals_69, [1, 0])
        mm_39 = torch.ops.aten.mm.default(mul_96, permute_127);  permute_127 = None
        permute_128 = torch.ops.aten.permute.default(primals_70, [1, 0])
        mm_40 = torch.ops.aten.mm.default(add_15, permute_128);  permute_128 = None
        split_11 = torch.ops.aten.split.Tensor(mm_40, 384, 1);  mm_40 = None
        getitem_96 = split_11[0]
        getitem_97 = split_11[1];  split_11 = None
        view_44 = torch.ops.aten.view.default(mm_39, [sym_size_int_3, 6, 64]);  mm_39 = None
        permute_129 = torch.ops.aten.permute.default(view_44, [1, 0, 2]);  view_44 = None
        view_45 = torch.ops.aten.view.default(getitem_96, [sym_size_int, 6, 64]);  getitem_96 = None
        permute_130 = torch.ops.aten.permute.default(view_45, [1, 0, 2]);  view_45 = None
        view_46 = torch.ops.aten.view.default(getitem_97, [sym_size_int, 6, 64]);  getitem_97 = None
        permute_131 = torch.ops.aten.permute.default(view_46, [1, 0, 2]);  view_46 = None
        permute_132 = torch.ops.aten.permute.default(permute_129, [1, 0, 2]);  permute_129 = None
        permute_133 = torch.ops.aten.permute.default(permute_130, [1, 0, 2]);  permute_130 = None
        permute_134 = torch.ops.aten.permute.default(permute_131, [1, 0, 2]);  permute_131 = None
        convert_element_type_22 = torch.ops.prims.convert_element_type.default(primals_31, torch.int32)
        convert_element_type_23 = torch.ops.prims.convert_element_type.default(primals_2, torch.int32)
        unsqueeze_33 = torch.ops.aten.unsqueeze.default(permute_132, 0);  permute_132 = None
        unsqueeze_34 = torch.ops.aten.unsqueeze.default(permute_133, 0);  permute_133 = None
        unsqueeze_35 = torch.ops.aten.unsqueeze.default(permute_134, 0);  permute_134 = None
        _efficient_attention_forward_11 = torch.ops.aten._efficient_attention_forward.default(unsqueeze_33, unsqueeze_34, unsqueeze_35, None, convert_element_type_22, convert_element_type_23, sym_size_int_4, sym_size_int_1, 0.0, 0, True)
        getitem_98 = _efficient_attention_forward_11[0]
        getitem_99 = _efficient_attention_forward_11[1]
        getitem_100 = _efficient_attention_forward_11[2]
        getitem_101 = _efficient_attention_forward_11[3];  _efficient_attention_forward_11 = None
        squeeze_11 = torch.ops.aten.squeeze.dim(getitem_98, 0)
        permute_135 = torch.ops.aten.permute.default(squeeze_11, [1, 0, 2]);  squeeze_11 = None
        permute_136 = torch.ops.aten.permute.default(permute_135, [1, 0, 2]);  permute_135 = None
        view_47 = torch.ops.aten.view.default(permute_136, [sym_size_int_3, 384]);  permute_136 = None
        permute_137 = torch.ops.aten.permute.default(primals_71, [1, 0])
        mm_41 = torch.ops.aten.mm.default(view_47, permute_137);  view_47 = permute_137 = None
        add_37 = torch.ops.aten.add.Tensor(add_35, mm_41);  add_35 = mm_41 = None
        pow_20 = torch.ops.aten.pow.Tensor_Scalar(add_37, 2)
        mean_19 = torch.ops.aten.mean.dim(pow_20, [1], True);  pow_20 = None
        add_38 = torch.ops.aten.add.Tensor(mean_19, 1e-06);  mean_19 = None
        rsqrt_19 = torch.ops.aten.rsqrt.default(add_38);  add_38 = None
        mul_97 = torch.ops.aten.mul.Tensor(add_37, rsqrt_19)
        mul_98 = torch.ops.aten.mul.Tensor(mul_97, primals_72);  mul_97 = None
        permute_138 = torch.ops.aten.permute.default(primals_73, [1, 0])
        mm_42 = torch.ops.aten.mm.default(mul_98, permute_138);  permute_138 = None
        sigmoid_7 = torch.ops.aten.sigmoid.default(mm_42)
        mul_99 = torch.ops.aten.mul.Tensor(mm_42, sigmoid_7);  sigmoid_7 = None
        inductor_lookup_seed_default_26 = torch.ops.prims.inductor_lookup_seed.default(inductor_seeds_default, 26)
        inductor_random_default_1 = torch.ops.prims.inductor_random.default([sym_size_int_3, 1024], inductor_lookup_seed_default_26, 'rand');  inductor_lookup_seed_default_26 = None
        gt_26 = torch.ops.aten.gt.Scalar(inductor_random_default_1, 0.3);  inductor_random_default_1 = None
        mul_100 = torch.ops.aten.mul.Tensor(gt_26, mul_99);  mul_99 = None
        mul_101 = torch.ops.aten.mul.Tensor(mul_100, 1.4285714285714286);  mul_100 = None
        permute_139 = torch.ops.aten.permute.default(primals_74, [1, 0])
        mm_43 = torch.ops.aten.mm.default(mul_101, permute_139);  permute_139 = None
        inductor_lookup_seed_default_27 = torch.ops.prims.inductor_lookup_seed.default(inductor_seeds_default, 27);  inductor_seeds_default = None
        inductor_random_default = torch.ops.prims.inductor_random.default([sym_size_int_3, 384], inductor_lookup_seed_default_27, 'rand');  inductor_lookup_seed_default_27 = None
        gt_27 = torch.ops.aten.gt.Scalar(inductor_random_default, 0.3);  inductor_random_default = None
        mul_102 = torch.ops.aten.mul.Tensor(gt_27, mm_43);  mm_43 = None
        mul_103 = torch.ops.aten.mul.Tensor(mul_102, 1.4285714285714286);  mul_102 = None
        add_39 = torch.ops.aten.add.Tensor(add_37, mul_103);  mul_103 = None
        return (add_39, primals_31, primals_32, primals_33, primals_1, primals_2, primals_3, primals_4, primals_6, primals_7, primals_8, primals_9, primals_10, primals_11, primals_12, primals_13, primals_14, primals_15, primals_16, primals_17, primals_18, primals_19, primals_20, primals_21, primals_22, primals_23, primals_24, primals_25, primals_26, primals_27, primals_28, primals_29, primals_30, primals_31, primals_32, primals_33, primals_35, primals_36, primals_37, primals_38, primals_39, primals_40, primals_41, primals_42, primals_43, primals_44, primals_45, primals_46, primals_47, primals_48, primals_49, primals_50, primals_51, primals_52, primals_53, primals_54, primals_55, primals_56, primals_57, primals_58, primals_59, primals_60, primals_61, primals_62, primals_63, primals_64, primals_65, primals_66, primals_67, primals_68, primals_69, primals_70, primals_71, primals_72, primals_73, primals_74, rsqrt, gt, mul_3, convert_element_type, unsqueeze, unsqueeze_1, unsqueeze_2, getitem_3, getitem_4, getitem_5, getitem_6, mm_1, rsqrt_1, mul_5, mm_2, gt_1, mul_8, gt_2, add_3, rsqrt_2, gt_3, mul_14, convert_element_type_2, unsqueeze_3, unsqueeze_4, unsqueeze_5, getitem_12, getitem_13, getitem_14, getitem_15, add_5, rsqrt_3, mul_16, mm_6, gt_4, mul_19, gt_5, add_7, rsqrt_4, gt_6, mul_25, convert_element_type_4, unsqueeze_6, unsqueeze_7, unsqueeze_8, getitem_21, getitem_22, getitem_23, getitem_24, add_9, rsqrt_5, mul_27, mm_10, gt_7, mul_30, gt_8, add_11, rsqrt_6, gt_9, mul_36, convert_element_type_6, unsqueeze_9, unsqueeze_10, unsqueeze_11, getitem_30, getitem_31, getitem_32, getitem_33, add_13, rsqrt_7, mul_38, mm_14, gt_10, mul_41, gt_11, add_15, rsqrt_8, gt_12, mul_47, convert_element_type_8, unsqueeze_12, unsqueeze_13, unsqueeze_14, getitem_39, getitem_40, getitem_41, getitem_42, rsqrt_9, gt_13, mul_51, convert_element_type_10, convert_element_type_11, unsqueeze_15, unsqueeze_16, unsqueeze_17, getitem_47, getitem_48, getitem_49, getitem_50, add_19, rsqrt_10, mul_53, mm_21, gt_14, mul_56, gt_15, add_21, rsqrt_11, gt_16, mul_62, convert_element_type_12, unsqueeze_18, unsqueeze_19, unsqueeze_20, getitem_56, getitem_57, getitem_58, getitem_59, rsqrt_12, mul_63, gt_17, mul_66, convert_element_type_14, convert_element_type_15, unsqueeze_21, unsqueeze_22, unsqueeze_23, getitem_64, getitem_65, getitem_66, getitem_67, add_25, rsqrt_13, mul_68, mm_28, gt_18, mul_71, gt_19, add_27, rsqrt_14, gt_20, mul_77, convert_element_type_16, unsqueeze_24, unsqueeze_25, unsqueeze_26, getitem_73, getitem_74, getitem_75, getitem_76, rsqrt_15, mul_78, gt_21, mul_81, convert_element_type_18, convert_element_type_19, unsqueeze_27, unsqueeze_28, unsqueeze_29, getitem_81, getitem_82, getitem_83, getitem_84, add_31, rsqrt_16, mul_83, mm_35, gt_22, mul_86, gt_23, add_33, rsqrt_17, gt_24, mul_92, convert_element_type_20, unsqueeze_30, unsqueeze_31, unsqueeze_32, getitem_90, getitem_91, getitem_92, getitem_93, rsqrt_18, mul_93, gt_25, mul_96, convert_element_type_22, convert_element_type_23, unsqueeze_33, unsqueeze_34, unsqueeze_35, getitem_98, getitem_99, getitem_100, getitem_101, add_37, rsqrt_19, mul_98, mm_42, gt_26, mul_101, gt_27, sym_size_int, sym_size_int_1, sym_size_int_3, sym_size_int_4)
        
def load_args(reader):
    buf0 = reader.storage(None, 1536*s1, device=device(type='cuda', index=0))
    reader.tensor(buf0, (s1, 384), is_leaf=True)  # primals_1
    buf1 = reader.storage(None, 2056, device=device(type='cuda', index=0), dtype_hint=torch.int64)
    reader.tensor(buf1, (257,), dtype=torch.int64, is_leaf=True)  # primals_2
    buf2 = reader.storage(None, 0, device=device(type='cuda', index=0))
    reader.tensor(buf2, (s3, 0), is_leaf=True)  # primals_3
    buf3 = reader.storage(None, 0, device=device(type='cuda', index=0))
    reader.tensor(buf3, (s4, 0), is_leaf=True)  # primals_4
    reader.symint(j1)  # primals_5
    buf4 = reader.storage(None, 1536, device=device(type='cuda', index=0))
    reader.tensor(buf4, (384,), is_leaf=True)  # primals_6
    buf5 = reader.storage(None, 1769472, device=device(type='cuda', index=0))
    reader.tensor(buf5, (1152, 384), is_leaf=True)  # primals_7
    buf6 = reader.storage(None, 589824, device=device(type='cuda', index=0))
    reader.tensor(buf6, (384, 384), is_leaf=True)  # primals_8
    buf7 = reader.storage(None, 1536, device=device(type='cuda', index=0))
    reader.tensor(buf7, (384,), is_leaf=True)  # primals_9
    buf8 = reader.storage(None, 1572864, device=device(type='cuda', index=0))
    reader.tensor(buf8, (1024, 384), is_leaf=True)  # primals_10
    buf9 = reader.storage(None, 1572864, device=device(type='cuda', index=0))
    reader.tensor(buf9, (384, 1024), is_leaf=True)  # primals_11
    buf10 = reader.storage(None, 1536, device=device(type='cuda', index=0))
    reader.tensor(buf10, (384,), is_leaf=True)  # primals_12
    buf11 = reader.storage(None, 1769472, device=device(type='cuda', index=0))
    reader.tensor(buf11, (1152, 384), is_leaf=True)  # primals_13
    buf12 = reader.storage(None, 589824, device=device(type='cuda', index=0))
    reader.tensor(buf12, (384, 384), is_leaf=True)  # primals_14
    buf13 = reader.storage(None, 1536, device=device(type='cuda', index=0))
    reader.tensor(buf13, (384,), is_leaf=True)  # primals_15
    buf14 = reader.storage(None, 1572864, device=device(type='cuda', index=0))
    reader.tensor(buf14, (1024, 384), is_leaf=True)  # primals_16
    buf15 = reader.storage(None, 1572864, device=device(type='cuda', index=0))
    reader.tensor(buf15, (384, 1024), is_leaf=True)  # primals_17
    buf16 = reader.storage(None, 1536, device=device(type='cuda', index=0))
    reader.tensor(buf16, (384,), is_leaf=True)  # primals_18
    buf17 = reader.storage(None, 1769472, device=device(type='cuda', index=0))
    reader.tensor(buf17, (1152, 384), is_leaf=True)  # primals_19
    buf18 = reader.storage(None, 589824, device=device(type='cuda', index=0))
    reader.tensor(buf18, (384, 384), is_leaf=True)  # primals_20
    buf19 = reader.storage(None, 1536, device=device(type='cuda', index=0))
    reader.tensor(buf19, (384,), is_leaf=True)  # primals_21
    buf20 = reader.storage(None, 1572864, device=device(type='cuda', index=0))
    reader.tensor(buf20, (1024, 384), is_leaf=True)  # primals_22
    buf21 = reader.storage(None, 1572864, device=device(type='cuda', index=0))
    reader.tensor(buf21, (384, 1024), is_leaf=True)  # primals_23
    buf22 = reader.storage(None, 1536, device=device(type='cuda', index=0))
    reader.tensor(buf22, (384,), is_leaf=True)  # primals_24
    buf23 = reader.storage(None, 1769472, device=device(type='cuda', index=0))
    reader.tensor(buf23, (1152, 384), is_leaf=True)  # primals_25
    buf24 = reader.storage(None, 589824, device=device(type='cuda', index=0))
    reader.tensor(buf24, (384, 384), is_leaf=True)  # primals_26
    buf25 = reader.storage(None, 1536, device=device(type='cuda', index=0))
    reader.tensor(buf25, (384,), is_leaf=True)  # primals_27
    buf26 = reader.storage(None, 1572864, device=device(type='cuda', index=0))
    reader.tensor(buf26, (1024, 384), is_leaf=True)  # primals_28
    buf27 = reader.storage(None, 1572864, device=device(type='cuda', index=0))
    reader.tensor(buf27, (384, 1024), is_leaf=True)  # primals_29
    buf28 = reader.storage(None, 1536*s6, device=device(type='cuda', index=0))
    reader.tensor(buf28, (s6, 384), is_leaf=True)  # primals_30
    buf29 = reader.storage(None, 2056, device=device(type='cuda', index=0), dtype_hint=torch.int64)
    reader.tensor(buf29, (257,), dtype=torch.int64, is_leaf=True)  # primals_31
    buf30 = reader.storage(None, 0, device=device(type='cuda', index=0))
    reader.tensor(buf30, (s8, 0), is_leaf=True)  # primals_32
    buf31 = reader.storage(None, 0, device=device(type='cuda', index=0))
    reader.tensor(buf31, (s9, 0), is_leaf=True)  # primals_33
    reader.symint(j2)  # primals_34
    buf32 = reader.storage(None, 1536, device=device(type='cuda', index=0))
    reader.tensor(buf32, (384,), is_leaf=True)  # primals_35
    buf33 = reader.storage(None, 1769472, device=device(type='cuda', index=0))
    reader.tensor(buf33, (1152, 384), is_leaf=True)  # primals_36
    buf34 = reader.storage(None, 589824, device=device(type='cuda', index=0))
    reader.tensor(buf34, (384, 384), is_leaf=True)  # primals_37
    buf35 = reader.storage(None, 1536, device=device(type='cuda', index=0))
    reader.tensor(buf35, (384,), is_leaf=True)  # primals_38
    buf36 = reader.storage(None, 589824, device=device(type='cuda', index=0))
    reader.tensor(buf36, (384, 384), is_leaf=True)  # primals_39
    buf37 = reader.storage(None, 1179648, device=device(type='cuda', index=0))
    reader.tensor(buf37, (768, 384), is_leaf=True)  # primals_40
    buf38 = reader.storage(None, 589824, device=device(type='cuda', index=0))
    reader.tensor(buf38, (384, 384), is_leaf=True)  # primals_41
    buf39 = reader.storage(None, 1536, device=device(type='cuda', index=0))
    reader.tensor(buf39, (384,), is_leaf=True)  # primals_42
    buf40 = reader.storage(None, 1572864, device=device(type='cuda', index=0))
    reader.tensor(buf40, (1024, 384), is_leaf=True)  # primals_43
    buf41 = reader.storage(None, 1572864, device=device(type='cuda', index=0))
    reader.tensor(buf41, (384, 1024), is_leaf=True)  # primals_44
    buf42 = reader.storage(None, 1536, device=device(type='cuda', index=0))
    reader.tensor(buf42, (384,), is_leaf=True)  # primals_45
    buf43 = reader.storage(None, 1769472, device=device(type='cuda', index=0))
    reader.tensor(buf43, (1152, 384), is_leaf=True)  # primals_46
    buf44 = reader.storage(None, 589824, device=device(type='cuda', index=0))
    reader.tensor(buf44, (384, 384), is_leaf=True)  # primals_47
    buf45 = reader.storage(None, 1536, device=device(type='cuda', index=0))
    reader.tensor(buf45, (384,), is_leaf=True)  # primals_48
    buf46 = reader.storage(None, 589824, device=device(type='cuda', index=0))
    reader.tensor(buf46, (384, 384), is_leaf=True)  # primals_49
    buf47 = reader.storage(None, 1179648, device=device(type='cuda', index=0))
    reader.tensor(buf47, (768, 384), is_leaf=True)  # primals_50
    buf48 = reader.storage(None, 589824, device=device(type='cuda', index=0))
    reader.tensor(buf48, (384, 384), is_leaf=True)  # primals_51
    buf49 = reader.storage(None, 1536, device=device(type='cuda', index=0))
    reader.tensor(buf49, (384,), is_leaf=True)  # primals_52
    buf50 = reader.storage(None, 1572864, device=device(type='cuda', index=0))
    reader.tensor(buf50, (1024, 384), is_leaf=True)  # primals_53
    buf51 = reader.storage(None, 1572864, device=device(type='cuda', index=0))
    reader.tensor(buf51, (384, 1024), is_leaf=True)  # primals_54
    buf52 = reader.storage(None, 1536, device=device(type='cuda', index=0))
    reader.tensor(buf52, (384,), is_leaf=True)  # primals_55
    buf53 = reader.storage(None, 1769472, device=device(type='cuda', index=0))
    reader.tensor(buf53, (1152, 384), is_leaf=True)  # primals_56
    buf54 = reader.storage(None, 589824, device=device(type='cuda', index=0))
    reader.tensor(buf54, (384, 384), is_leaf=True)  # primals_57
    buf55 = reader.storage(None, 1536, device=device(type='cuda', index=0))
    reader.tensor(buf55, (384,), is_leaf=True)  # primals_58
    buf56 = reader.storage(None, 589824, device=device(type='cuda', index=0))
    reader.tensor(buf56, (384, 384), is_leaf=True)  # primals_59
    buf57 = reader.storage(None, 1179648, device=device(type='cuda', index=0))
    reader.tensor(buf57, (768, 384), is_leaf=True)  # primals_60
    buf58 = reader.storage(None, 589824, device=device(type='cuda', index=0))
    reader.tensor(buf58, (384, 384), is_leaf=True)  # primals_61
    buf59 = reader.storage(None, 1536, device=device(type='cuda', index=0))
    reader.tensor(buf59, (384,), is_leaf=True)  # primals_62
    buf60 = reader.storage(None, 1572864, device=device(type='cuda', index=0))
    reader.tensor(buf60, (1024, 384), is_leaf=True)  # primals_63
    buf61 = reader.storage(None, 1572864, device=device(type='cuda', index=0))
    reader.tensor(buf61, (384, 1024), is_leaf=True)  # primals_64
    buf62 = reader.storage(None, 1536, device=device(type='cuda', index=0))
    reader.tensor(buf62, (384,), is_leaf=True)  # primals_65
    buf63 = reader.storage(None, 1769472, device=device(type='cuda', index=0))
    reader.tensor(buf63, (1152, 384), is_leaf=True)  # primals_66
    buf64 = reader.storage(None, 589824, device=device(type='cuda', index=0))
    reader.tensor(buf64, (384, 384), is_leaf=True)  # primals_67
    buf65 = reader.storage(None, 1536, device=device(type='cuda', index=0))
    reader.tensor(buf65, (384,), is_leaf=True)  # primals_68
    buf66 = reader.storage(None, 589824, device=device(type='cuda', index=0))
    reader.tensor(buf66, (384, 384), is_leaf=True)  # primals_69
    buf67 = reader.storage(None, 1179648, device=device(type='cuda', index=0))
    reader.tensor(buf67, (768, 384), is_leaf=True)  # primals_70
    buf68 = reader.storage(None, 589824, device=device(type='cuda', index=0))
    reader.tensor(buf68, (384, 384), is_leaf=True)  # primals_71
    buf69 = reader.storage(None, 1536, device=device(type='cuda', index=0))
    reader.tensor(buf69, (384,), is_leaf=True)  # primals_72
    buf70 = reader.storage(None, 1572864, device=device(type='cuda', index=0))
    reader.tensor(buf70, (1024, 384), is_leaf=True)  # primals_73
    buf71 = reader.storage(None, 1572864, device=device(type='cuda', index=0))
    reader.tensor(buf71, (384, 1024), is_leaf=True)  # primals_74
load_args._version = 0
mod = Repro()
if __name__ == '__main__':
    from torch._dynamo.repro.after_aot import run_repro
    with torch.no_grad():
        run_repro(mod, load_args, accuracy=False, command='run', save_dir=None, tracing_mode='symbolic', check_str=None)
        # To run it separately, do 
        # mod, args = run_repro(mod, load_args, accuracy=False, command='get_args', save_dir=None, tracing_mode='symbolic', check_str=None)
        # mod(*args)