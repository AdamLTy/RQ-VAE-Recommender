class GraphModule(torch.nn.Module):
    def forward(self, sym_size_int: "Sym(s1)", sym_size_int_1: "Sym(s4)", sym_size_int_3: "Sym(s6)", sym_size_int_4: "Sym(s9)", primals_1: "f32[s1, 384][384, 1]cuda:0", primals_2: "i64[257][1]cuda:0", primals_3: "f32[s3, 0][1, 1]cuda:0", primals_4: "f32[s4, 0][1, 1]cuda:0", primals_6: "f32[384][1]cuda:0", primals_7: "f32[1152, 384][384, 1]cuda:0", primals_8: "f32[384, 384][384, 1]cuda:0", primals_9: "f32[384][1]cuda:0", primals_10: "f32[1024, 384][384, 1]cuda:0", primals_11: "f32[384, 1024][1024, 1]cuda:0", primals_12: "f32[384][1]cuda:0", primals_13: "f32[1152, 384][384, 1]cuda:0", primals_14: "f32[384, 384][384, 1]cuda:0", primals_15: "f32[384][1]cuda:0", primals_16: "f32[1024, 384][384, 1]cuda:0", primals_17: "f32[384, 1024][1024, 1]cuda:0", primals_18: "f32[384][1]cuda:0", primals_19: "f32[1152, 384][384, 1]cuda:0", primals_20: "f32[384, 384][384, 1]cuda:0", primals_21: "f32[384][1]cuda:0", primals_22: "f32[1024, 384][384, 1]cuda:0", primals_23: "f32[384, 1024][1024, 1]cuda:0", primals_24: "f32[384][1]cuda:0", primals_25: "f32[1152, 384][384, 1]cuda:0", primals_26: "f32[384, 384][384, 1]cuda:0", primals_27: "f32[384][1]cuda:0", primals_28: "f32[1024, 384][384, 1]cuda:0", primals_29: "f32[384, 1024][1024, 1]cuda:0", primals_30: "f32[s6, 384][384, 1]cuda:0", primals_31: "i64[257][1]cuda:0", primals_32: "f32[s8, 0][1, 1]cuda:0", primals_33: "f32[s9, 0][1, 1]cuda:0", primals_35: "f32[384][1]cuda:0", primals_36: "f32[1152, 384][384, 1]cuda:0", primals_37: "f32[384, 384][384, 1]cuda:0", primals_38: "f32[384][1]cuda:0", primals_39: "f32[384, 384][384, 1]cuda:0", primals_40: "f32[768, 384][384, 1]cuda:0", primals_41: "f32[384, 384][384, 1]cuda:0", primals_42: "f32[384][1]cuda:0", primals_43: "f32[1024, 384][384, 1]cuda:0", primals_44: "f32[384, 1024][1024, 1]cuda:0", primals_45: "f32[384][1]cuda:0", primals_46: "f32[1152, 384][384, 1]cuda:0", primals_47: "f32[384, 384][384, 1]cuda:0", primals_48: "f32[384][1]cuda:0", primals_49: "f32[384, 384][384, 1]cuda:0", primals_50: "f32[768, 384][384, 1]cuda:0", primals_51: "f32[384, 384][384, 1]cuda:0", primals_52: "f32[384][1]cuda:0", primals_53: "f32[1024, 384][384, 1]cuda:0", primals_54: "f32[384, 1024][1024, 1]cuda:0", primals_55: "f32[384][1]cuda:0", primals_56: "f32[1152, 384][384, 1]cuda:0", primals_57: "f32[384, 384][384, 1]cuda:0", primals_58: "f32[384][1]cuda:0", primals_59: "f32[384, 384][384, 1]cuda:0", primals_60: "f32[768, 384][384, 1]cuda:0", primals_61: "f32[384, 384][384, 1]cuda:0", primals_62: "f32[384][1]cuda:0", primals_63: "f32[1024, 384][384, 1]cuda:0", primals_64: "f32[384, 1024][1024, 1]cuda:0", primals_65: "f32[384][1]cuda:0", primals_66: "f32[1152, 384][384, 1]cuda:0", primals_67: "f32[384, 384][384, 1]cuda:0", primals_68: "f32[384][1]cuda:0", primals_69: "f32[384, 384][384, 1]cuda:0", primals_70: "f32[768, 384][384, 1]cuda:0", primals_71: "f32[384, 384][384, 1]cuda:0", primals_72: "f32[384][1]cuda:0", primals_73: "f32[1024, 384][384, 1]cuda:0", primals_74: "f32[384, 1024][1024, 1]cuda:0", rsqrt: "f32[s1, 1][1, 1]cuda:0", gt: "b8[s1, 384][384, 1]cuda:0", mul_3: "f32[s1, 384][384, 1]cuda:0", convert_element_type: "i32[257][1]cuda:0", unsqueeze: "f32[1, s1, 6, 64][1152*s1, 1152, 64, 1]cuda:0", unsqueeze_1: "f32[1, s1, 6, 64][1152*s1, 1152, 64, 1]cuda:0", unsqueeze_2: "f32[1, s1, 6, 64][1152*s1, 1152, 64, 1]cuda:0", getitem_3: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0", getitem_4: "f32[256, 6, 32*CeilToInt(IntTrueDiv(s4, 32))][192*CeilToInt(IntTrueDiv(s4, 32)), 32*CeilToInt(IntTrueDiv(s4, 32)), 1]cuda:0", getitem_5: "i64[][]cuda:0", getitem_6: "i64[][]cuda:0", mm_1: "f32[s1, 384][384, 1]cuda:0", rsqrt_1: "f32[s1, 1][1, 1]cuda:0", mul_5: "f32[s1, 384][384, 1]cuda:0", mm_2: "f32[s1, 1024][1024, 1]cuda:0", gt_1: "b8[s1, 1024][1024, 1]cuda:0", mul_8: "f32[s1, 1024][1024, 1]cuda:0", gt_2: "b8[s1, 384][384, 1]cuda:0", add_3: "f32[s1, 384][384, 1]cuda:0", rsqrt_2: "f32[s1, 1][1, 1]cuda:0", gt_3: "b8[s1, 384][384, 1]cuda:0", mul_14: "f32[s1, 384][384, 1]cuda:0", convert_element_type_2: "i32[257][1]cuda:0", unsqueeze_3: "f32[1, s1, 6, 64][1152*s1, 1152, 64, 1]cuda:0", unsqueeze_4: "f32[1, s1, 6, 64][1152*s1, 1152, 64, 1]cuda:0", unsqueeze_5: "f32[1, s1, 6, 64][1152*s1, 1152, 64, 1]cuda:0", getitem_12: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0", getitem_13: "f32[256, 6, 32*CeilToInt(IntTrueDiv(s4, 32))][192*CeilToInt(IntTrueDiv(s4, 32)), 32*CeilToInt(IntTrueDiv(s4, 32)), 1]cuda:0", getitem_14: "i64[][]cuda:0", getitem_15: "i64[][]cuda:0", add_5: "f32[s1, 384][384, 1]cuda:0", rsqrt_3: "f32[s1, 1][1, 1]cuda:0", mul_16: "f32[s1, 384][384, 1]cuda:0", mm_6: "f32[s1, 1024][1024, 1]cuda:0", gt_4: "b8[s1, 1024][1024, 1]cuda:0", mul_19: "f32[s1, 1024][1024, 1]cuda:0", gt_5: "b8[s1, 384][384, 1]cuda:0", add_7: "f32[s1, 384][384, 1]cuda:0", rsqrt_4: "f32[s1, 1][1, 1]cuda:0", gt_6: "b8[s1, 384][384, 1]cuda:0", mul_25: "f32[s1, 384][384, 1]cuda:0", convert_element_type_4: "i32[257][1]cuda:0", unsqueeze_6: "f32[1, s1, 6, 64][1152*s1, 1152, 64, 1]cuda:0", unsqueeze_7: "f32[1, s1, 6, 64][1152*s1, 1152, 64, 1]cuda:0", unsqueeze_8: "f32[1, s1, 6, 64][1152*s1, 1152, 64, 1]cuda:0", getitem_21: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0", getitem_22: "f32[256, 6, 32*CeilToInt(IntTrueDiv(s4, 32))][192*CeilToInt(IntTrueDiv(s4, 32)), 32*CeilToInt(IntTrueDiv(s4, 32)), 1]cuda:0", getitem_23: "i64[][]cuda:0", getitem_24: "i64[][]cuda:0", add_9: "f32[s1, 384][384, 1]cuda:0", rsqrt_5: "f32[s1, 1][1, 1]cuda:0", mul_27: "f32[s1, 384][384, 1]cuda:0", mm_10: "f32[s1, 1024][1024, 1]cuda:0", gt_7: "b8[s1, 1024][1024, 1]cuda:0", mul_30: "f32[s1, 1024][1024, 1]cuda:0", gt_8: "b8[s1, 384][384, 1]cuda:0", add_11: "f32[s1, 384][384, 1]cuda:0", rsqrt_6: "f32[s1, 1][1, 1]cuda:0", gt_9: "b8[s1, 384][384, 1]cuda:0", mul_36: "f32[s1, 384][384, 1]cuda:0", convert_element_type_6: "i32[257][1]cuda:0", unsqueeze_9: "f32[1, s1, 6, 64][1152*s1, 1152, 64, 1]cuda:0", unsqueeze_10: "f32[1, s1, 6, 64][1152*s1, 1152, 64, 1]cuda:0", unsqueeze_11: "f32[1, s1, 6, 64][1152*s1, 1152, 64, 1]cuda:0", getitem_30: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0", getitem_31: "f32[256, 6, 32*CeilToInt(IntTrueDiv(s4, 32))][192*CeilToInt(IntTrueDiv(s4, 32)), 32*CeilToInt(IntTrueDiv(s4, 32)), 1]cuda:0", getitem_32: "i64[][]cuda:0", getitem_33: "i64[][]cuda:0", add_13: "f32[s1, 384][384, 1]cuda:0", rsqrt_7: "f32[s1, 1][1, 1]cuda:0", mul_38: "f32[s1, 384][384, 1]cuda:0", mm_14: "f32[s1, 1024][1024, 1]cuda:0", gt_10: "b8[s1, 1024][1024, 1]cuda:0", mul_41: "f32[s1, 1024][1024, 1]cuda:0", gt_11: "b8[s1, 384][384, 1]cuda:0", add_15: "f32[s1, 384][384, 1]cuda:0", rsqrt_8: "f32[s6, 1][1, 1]cuda:0", gt_12: "b8[s6, 384][384, 1]cuda:0", mul_47: "f32[s6, 384][384, 1]cuda:0", convert_element_type_8: "i32[257][1]cuda:0", unsqueeze_12: "f32[1, s6, 6, 64][1152*s6, 1152, 64, 1]cuda:0", unsqueeze_13: "f32[1, s6, 6, 64][1152*s6, 1152, 64, 1]cuda:0", unsqueeze_14: "f32[1, s6, 6, 64][1152*s6, 1152, 64, 1]cuda:0", getitem_39: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0", getitem_40: "f32[256, 6, 32*CeilToInt(IntTrueDiv(s9, 32))][192*CeilToInt(IntTrueDiv(s9, 32)), 32*CeilToInt(IntTrueDiv(s9, 32)), 1]cuda:0", getitem_41: "i64[][]cuda:0", getitem_42: "i64[][]cuda:0", rsqrt_9: "f32[s6, 1][1, 1]cuda:0", gt_13: "b8[s6, 384][384, 1]cuda:0", mul_51: "f32[s6, 384][384, 1]cuda:0", convert_element_type_10: "i32[257][1]cuda:0", convert_element_type_11: "i32[257][1]cuda:0", unsqueeze_15: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0", unsqueeze_16: "f32[1, s1, 6, 64][768*s1, 768, 64, 1]cuda:0", unsqueeze_17: "f32[1, s1, 6, 64][768*s1, 768, 64, 1]cuda:0", getitem_47: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0", getitem_48: "f32[256, 6, 32*CeilToInt(IntTrueDiv(s9, 32))][192*CeilToInt(IntTrueDiv(s9, 32)), 32*CeilToInt(IntTrueDiv(s9, 32)), 1]cuda:0", getitem_49: "i64[][]cuda:0", getitem_50: "i64[][]cuda:0", add_19: "f32[s6, 384][384, 1]cuda:0", rsqrt_10: "f32[s6, 1][1, 1]cuda:0", mul_53: "f32[s6, 384][384, 1]cuda:0", mm_21: "f32[s6, 1024][1024, 1]cuda:0", gt_14: "b8[s6, 1024][1024, 1]cuda:0", mul_56: "f32[s6, 1024][1024, 1]cuda:0", gt_15: "b8[s6, 384][384, 1]cuda:0", add_21: "f32[s6, 384][384, 1]cuda:0", rsqrt_11: "f32[s6, 1][1, 1]cuda:0", gt_16: "b8[s6, 384][384, 1]cuda:0", mul_62: "f32[s6, 384][384, 1]cuda:0", convert_element_type_12: "i32[257][1]cuda:0", unsqueeze_18: "f32[1, s6, 6, 64][1152*s6, 1152, 64, 1]cuda:0", unsqueeze_19: "f32[1, s6, 6, 64][1152*s6, 1152, 64, 1]cuda:0", unsqueeze_20: "f32[1, s6, 6, 64][1152*s6, 1152, 64, 1]cuda:0", getitem_56: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0", getitem_57: "f32[256, 6, 32*CeilToInt(IntTrueDiv(s9, 32))][192*CeilToInt(IntTrueDiv(s9, 32)), 32*CeilToInt(IntTrueDiv(s9, 32)), 1]cuda:0", getitem_58: "i64[][]cuda:0", getitem_59: "i64[][]cuda:0", rsqrt_12: "f32[s6, 1][1, 1]cuda:0", mul_63: "f32[s6, 384][384, 1]cuda:0", gt_17: "b8[s6, 384][384, 1]cuda:0", mul_66: "f32[s6, 384][384, 1]cuda:0", convert_element_type_14: "i32[257][1]cuda:0", convert_element_type_15: "i32[257][1]cuda:0", unsqueeze_21: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0", unsqueeze_22: "f32[1, s1, 6, 64][768*s1, 768, 64, 1]cuda:0", unsqueeze_23: "f32[1, s1, 6, 64][768*s1, 768, 64, 1]cuda:0", getitem_64: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0", getitem_65: "f32[256, 6, 32*CeilToInt(IntTrueDiv(s9, 32))][192*CeilToInt(IntTrueDiv(s9, 32)), 32*CeilToInt(IntTrueDiv(s9, 32)), 1]cuda:0", getitem_66: "i64[][]cuda:0", getitem_67: "i64[][]cuda:0", add_25: "f32[s6, 384][384, 1]cuda:0", rsqrt_13: "f32[s6, 1][1, 1]cuda:0", mul_68: "f32[s6, 384][384, 1]cuda:0", mm_28: "f32[s6, 1024][1024, 1]cuda:0", gt_18: "b8[s6, 1024][1024, 1]cuda:0", mul_71: "f32[s6, 1024][1024, 1]cuda:0", gt_19: "b8[s6, 384][384, 1]cuda:0", add_27: "f32[s6, 384][384, 1]cuda:0", rsqrt_14: "f32[s6, 1][1, 1]cuda:0", gt_20: "b8[s6, 384][384, 1]cuda:0", mul_77: "f32[s6, 384][384, 1]cuda:0", convert_element_type_16: "i32[257][1]cuda:0", unsqueeze_24: "f32[1, s6, 6, 64][1152*s6, 1152, 64, 1]cuda:0", unsqueeze_25: "f32[1, s6, 6, 64][1152*s6, 1152, 64, 1]cuda:0", unsqueeze_26: "f32[1, s6, 6, 64][1152*s6, 1152, 64, 1]cuda:0", getitem_73: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0", getitem_74: "f32[256, 6, 32*CeilToInt(IntTrueDiv(s9, 32))][192*CeilToInt(IntTrueDiv(s9, 32)), 32*CeilToInt(IntTrueDiv(s9, 32)), 1]cuda:0", getitem_75: "i64[][]cuda:0", getitem_76: "i64[][]cuda:0", rsqrt_15: "f32[s6, 1][1, 1]cuda:0", mul_78: "f32[s6, 384][384, 1]cuda:0", gt_21: "b8[s6, 384][384, 1]cuda:0", mul_81: "f32[s6, 384][384, 1]cuda:0", convert_element_type_18: "i32[257][1]cuda:0", convert_element_type_19: "i32[257][1]cuda:0", unsqueeze_27: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0", unsqueeze_28: "f32[1, s1, 6, 64][768*s1, 768, 64, 1]cuda:0", unsqueeze_29: "f32[1, s1, 6, 64][768*s1, 768, 64, 1]cuda:0", getitem_81: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0", getitem_82: "f32[256, 6, 32*CeilToInt(IntTrueDiv(s9, 32))][192*CeilToInt(IntTrueDiv(s9, 32)), 32*CeilToInt(IntTrueDiv(s9, 32)), 1]cuda:0", getitem_83: "i64[][]cuda:0", getitem_84: "i64[][]cuda:0", add_31: "f32[s6, 384][384, 1]cuda:0", rsqrt_16: "f32[s6, 1][1, 1]cuda:0", mul_83: "f32[s6, 384][384, 1]cuda:0", mm_35: "f32[s6, 1024][1024, 1]cuda:0", gt_22: "b8[s6, 1024][1024, 1]cuda:0", mul_86: "f32[s6, 1024][1024, 1]cuda:0", gt_23: "b8[s6, 384][384, 1]cuda:0", add_33: "f32[s6, 384][384, 1]cuda:0", rsqrt_17: "f32[s6, 1][1, 1]cuda:0", gt_24: "b8[s6, 384][384, 1]cuda:0", mul_92: "f32[s6, 384][384, 1]cuda:0", convert_element_type_20: "i32[257][1]cuda:0", unsqueeze_30: "f32[1, s6, 6, 64][1152*s6, 1152, 64, 1]cuda:0", unsqueeze_31: "f32[1, s6, 6, 64][1152*s6, 1152, 64, 1]cuda:0", unsqueeze_32: "f32[1, s6, 6, 64][1152*s6, 1152, 64, 1]cuda:0", getitem_90: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0", getitem_91: "f32[256, 6, 32*CeilToInt(IntTrueDiv(s9, 32))][192*CeilToInt(IntTrueDiv(s9, 32)), 32*CeilToInt(IntTrueDiv(s9, 32)), 1]cuda:0", getitem_92: "i64[][]cuda:0", getitem_93: "i64[][]cuda:0", rsqrt_18: "f32[s6, 1][1, 1]cuda:0", mul_93: "f32[s6, 384][384, 1]cuda:0", gt_25: "b8[s6, 384][384, 1]cuda:0", mul_96: "f32[s6, 384][384, 1]cuda:0", convert_element_type_22: "i32[257][1]cuda:0", convert_element_type_23: "i32[257][1]cuda:0", unsqueeze_33: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0", unsqueeze_34: "f32[1, s1, 6, 64][768*s1, 768, 64, 1]cuda:0", unsqueeze_35: "f32[1, s1, 6, 64][768*s1, 768, 64, 1]cuda:0", getitem_98: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0", getitem_99: "f32[256, 6, 32*CeilToInt(IntTrueDiv(s9, 32))][192*CeilToInt(IntTrueDiv(s9, 32)), 32*CeilToInt(IntTrueDiv(s9, 32)), 1]cuda:0", getitem_100: "i64[][]cuda:0", getitem_101: "i64[][]cuda:0", add_37: "f32[s6, 384][384, 1]cuda:0", rsqrt_19: "f32[s6, 1][1, 1]cuda:0", mul_98: "f32[s6, 384][384, 1]cuda:0", mm_42: "f32[s6, 1024][1024, 1]cuda:0", gt_26: "b8[s6, 1024][1024, 1]cuda:0", mul_101: "f32[s6, 1024][1024, 1]cuda:0", gt_27: "b8[s6, 384][384, 1]cuda:0", tangents_1: "f32[s6, 384][384, 1]cuda:0", tangents_2: "i64[257][1]cuda:0", tangents_3: "f32[s8, 0][1, 1]cuda:0", tangents_4: "f32[s9, 0][1, 1]cuda:0"):
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:81 in forward, code: proj_out = attn_out + self.ff(attn_out)
        convert_element_type_24: "f32[s6, 384][384, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_27, torch.float32);  gt_27 = None
        mul_104: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_24, 1.4285714285714286);  convert_element_type_24 = None
        mul_105: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(tangents_1, mul_104);  mul_104 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/encoder.py:36 in forward, code: return self.mlp(x)
        mm_44: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mm.default(mul_105, primals_74);  primals_74 = None
        permute_140: "f32[384, s6][1, 384]cuda:0" = torch.ops.aten.permute.default(mul_105, [1, 0]);  mul_105 = None
        mm_45: "f32[384, 1024][1024, 1]cuda:0" = torch.ops.aten.mm.default(permute_140, mul_101);  permute_140 = mul_101 = None
        convert_element_type_25: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_26, torch.float32);  gt_26 = None
        mul_106: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_25, 1.4285714285714286);  convert_element_type_25 = None
        mul_107: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_44, mul_106);  mm_44 = mul_106 = None
        sigmoid_8: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.sigmoid.default(mm_42)
        full_24: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.full.default([sym_size_int_3, 1024], 1, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        sub: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.sub.Tensor(full_24, sigmoid_8)
        mul_108: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_42, sub);  mm_42 = sub = None
        add_40: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.add.Scalar(mul_108, 1);  mul_108 = None
        mul_109: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(sigmoid_8, add_40);  sigmoid_8 = add_40 = None
        mul_110: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_107, mul_109);  mul_107 = mul_109 = None
        mm_46: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(mul_110, primals_73);  primals_73 = None
        permute_142: "f32[1024, s6][1, 1024]cuda:0" = torch.ops.aten.permute.default(mul_110, [1, 0]);  mul_110 = None
        mm_47: "f32[1024, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_142, mul_98);  permute_142 = mul_98 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_97: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(add_37, rsqrt_19)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_111: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_46, mul_97);  mul_97 = None
        mul_112: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_46, primals_72);  mm_46 = primals_72 = None
        sum_1: "f32[1, 384][384, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_111, [0], True);  mul_111 = None
        unsqueeze_36: "f32[1, 1, 384][384, 384, 1]cuda:0" = torch.ops.aten.unsqueeze.default(sum_1, 0);  sum_1 = None
        view_48: "f32[384][1]cuda:0" = torch.ops.aten.view.default(unsqueeze_36, [384]);  unsqueeze_36 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_113: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_112, add_37)
        mul_114: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_112, rsqrt_19);  mul_112 = None
        sum_2: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_113, [1], True);  mul_113 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_41: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(tangents_1, mul_114);  tangents_1 = mul_114 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        pow_21: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(rsqrt_19, 3);  rsqrt_19 = None
        mul_115: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mul.Scalar(sum_2, -0.5);  sum_2 = None
        mul_116: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_115, pow_21);  mul_115 = pow_21 = None
        expand: "f32[s6, 384][1, 0]cuda:0" = torch.ops.aten.expand.default(mul_116, [-1, 384]);  mul_116 = None
        div: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.div.Scalar(expand, 384);  expand = None
        pow_22: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(add_37, 1.0);  add_37 = None
        mul_117: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Scalar(pow_22, 2.0);  pow_22 = None
        mul_118: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(div, mul_117);  div = mul_117 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_42: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_41, mul_118);  add_41 = mul_118 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:231 in forward, code: context_vec = self.proj(context_vec)
        mm_48: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(add_42, primals_71);  primals_71 = None
        permute_143: "f32[384, s6][1, 384]cuda:0" = torch.ops.aten.permute.default(add_42, [1, 0])
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:120 in jagged_forward, code: context_vec = F.scaled_dot_product_attention(
        squeeze_11: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_98, 0)
        permute_135: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(squeeze_11, [1, 0, 2]);  squeeze_11 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:123 in jagged_forward, code: context_vec = context_vec.transpose(1, 2).flatten(-2)
        permute_136: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_135, [1, 0, 2]);  permute_135 = None
        view_47: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_136, [sym_size_int_3, 384]);  permute_136 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:231 in forward, code: context_vec = self.proj(context_vec)
        mm_49: "f32[384, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_143, view_47);  view_47 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:123 in jagged_forward, code: context_vec = context_vec.transpose(1, 2).flatten(-2)
        view_49: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.view.default(mm_48, [sym_size_int_3, 6, 64]);  mm_48 = None
        permute_144: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(view_49, [1, 0, 2]);  view_49 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:120 in jagged_forward, code: context_vec = F.scaled_dot_product_attention(
        permute_145: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_144, [1, 0, 2]);  permute_144 = None
        unsqueeze_37: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(permute_145, 0);  permute_145 = None
        _efficient_attention_backward = torch.ops.aten._efficient_attention_backward.default(unsqueeze_37, unsqueeze_33, unsqueeze_34, unsqueeze_35, None, getitem_98, convert_element_type_22, convert_element_type_23, sym_size_int_4, sym_size_int_1, getitem_99, 0.0, getitem_100, getitem_101, 0, False);  unsqueeze_37 = unsqueeze_33 = unsqueeze_34 = unsqueeze_35 = getitem_98 = convert_element_type_22 = convert_element_type_23 = getitem_99 = getitem_100 = getitem_101 = None
        getitem_104: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = _efficient_attention_backward[0]
        getitem_105: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = _efficient_attention_backward[1]
        getitem_106: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = _efficient_attention_backward[2];  _efficient_attention_backward = None
        squeeze_12: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_106, 0);  getitem_106 = None
        squeeze_13: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_105, 0);  getitem_105 = None
        squeeze_14: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_104, 0);  getitem_104 = None
        permute_146: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(squeeze_12, [1, 0, 2]);  squeeze_12 = None
        permute_147: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(squeeze_13, [1, 0, 2]);  squeeze_13 = None
        permute_148: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(squeeze_14, [1, 0, 2]);  squeeze_14 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:116 in jagged_forward, code: values = va.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        permute_149: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_146, [1, 0, 2]);  permute_146 = None
        view_50: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_149, [sym_size_int, 384]);  permute_149 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:115 in jagged_forward, code: keys = ke.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        permute_150: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_147, [1, 0, 2]);  permute_147 = None
        view_51: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_150, [sym_size_int, 384]);  permute_150 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:114 in jagged_forward, code: queries = qu.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        permute_151: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_148, [1, 0, 2]);  permute_148 = None
        view_52: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_151, [sym_size_int_3, 384]);  permute_151 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:198 in forward, code: keys, values = self.kv(x_kv).chunk(2, dim=-1)
        full_25: "f32[s1, 768][768, 1]cuda:0" = torch.ops.aten.full.default([sym_size_int, 768], 0, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        split_12 = torch.ops.aten.split.Tensor(full_25, 384, 1)
        getitem_108: "f32[s1, 384][768, 1]cuda:0" = split_12[0];  split_12 = None
        copy: "f32[s1, 384][768, 1]cuda:0" = torch.ops.aten.copy.default(getitem_108, view_51);  view_51 = None
        slice_scatter: "f32[s1, 768][768, 1]cuda:0" = torch.ops.aten.slice_scatter.default(full_25, copy, 1, 0, 384);  copy = None
        split_15 = torch.ops.aten.split.Tensor(slice_scatter, 384, 1)
        getitem_115: "f32[s1, 384][768, 1]cuda:0" = split_15[1];  split_15 = None
        copy_1: "f32[s1, 384][768, 1]cuda:0" = torch.ops.aten.copy.default(getitem_115, view_50);  getitem_115 = view_50 = None
        slice_scatter_1: "f32[s1, 768][768, 1]cuda:0" = torch.ops.aten.slice_scatter.default(slice_scatter, copy_1, 1, 384, 768);  slice_scatter = copy_1 = None
        mm_50: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(slice_scatter_1, primals_70);  primals_70 = None
        permute_153: "f32[768, s1][1, 768]cuda:0" = torch.ops.aten.permute.default(slice_scatter_1, [1, 0]);  slice_scatter_1 = None
        mm_51: "f32[768, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_153, add_15);  permute_153 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:197 in forward, code: queries = self.q(x)
        mm_52: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(view_52, primals_69);  primals_69 = None
        permute_154: "f32[384, s6][1, 384]cuda:0" = torch.ops.aten.permute.default(view_52, [1, 0]);  view_52 = None
        mm_53: "f32[384, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_154, mul_96);  permute_154 = mul_96 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:79 in forward, code: x=self.do(self.cross_attn_norm(x)), x_kv=x_kv, padding_mask=padding_mask, is_causal=False, jagged=jagged, use_cache=not self.training and self.enable_kv_cache
        convert_element_type_26: "f32[s6, 384][384, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_25, torch.float32);  gt_25 = None
        mul_119: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_26, 1.4285714285714286);  convert_element_type_26 = None
        mul_120: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_52, mul_119);  mm_52 = mul_119 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_121: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_120, mul_93);  mul_93 = None
        mul_122: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_120, primals_68);  mul_120 = primals_68 = None
        sum_3: "f32[1, 384][384, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_121, [0], True);  mul_121 = None
        unsqueeze_38: "f32[1, 1, 384][384, 384, 1]cuda:0" = torch.ops.aten.unsqueeze.default(sum_3, 0);  sum_3 = None
        view_53: "f32[384][1]cuda:0" = torch.ops.aten.view.default(unsqueeze_38, [384]);  unsqueeze_38 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_123: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_122, add_33)
        mul_124: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_122, rsqrt_18);  mul_122 = None
        sum_4: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_123, [1], True);  mul_123 = None
        pow_23: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(rsqrt_18, 3);  rsqrt_18 = None
        mul_125: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mul.Scalar(sum_4, -0.5);  sum_4 = None
        mul_126: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_125, pow_23);  mul_125 = pow_23 = None
        expand_1: "f32[s6, 384][1, 0]cuda:0" = torch.ops.aten.expand.default(mul_126, [-1, 384]);  mul_126 = None
        div_1: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.div.Scalar(expand_1, 384);  expand_1 = None
        pow_24: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(add_33, 1.0)
        mul_127: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Scalar(pow_24, 2.0);  pow_24 = None
        mul_128: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(div_1, mul_127);  div_1 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_43: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(mul_124, mul_128);  mul_124 = mul_128 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:76 in forward, code: attn_out = x + self.attention(self.do(self.attn_norm(x)), padding_mask=padding_mask, is_causal=is_causal, jagged=jagged, use_cache=not self.training and self.enable_kv_cache)
        add_44: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_43, add_42);  add_43 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:231 in forward, code: context_vec = self.proj(context_vec)
        mm_54: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(add_42, primals_67);  add_42 = primals_67 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:120 in jagged_forward, code: context_vec = F.scaled_dot_product_attention(
        squeeze_10: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_90, 0)
        permute_124: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(squeeze_10, [1, 0, 2]);  squeeze_10 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:123 in jagged_forward, code: context_vec = context_vec.transpose(1, 2).flatten(-2)
        permute_125: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_124, [1, 0, 2]);  permute_124 = None
        view_43: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_125, [sym_size_int_3, 384]);  permute_125 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:231 in forward, code: context_vec = self.proj(context_vec)
        mm_55: "f32[384, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_143, view_43);  permute_143 = view_43 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:123 in jagged_forward, code: context_vec = context_vec.transpose(1, 2).flatten(-2)
        view_54: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.view.default(mm_54, [sym_size_int_3, 6, 64]);  mm_54 = None
        permute_156: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(view_54, [1, 0, 2]);  view_54 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:120 in jagged_forward, code: context_vec = F.scaled_dot_product_attention(
        permute_157: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_156, [1, 0, 2]);  permute_156 = None
        unsqueeze_39: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(permute_157, 0);  permute_157 = None
        _efficient_attention_backward_1 = torch.ops.aten._efficient_attention_backward.default(unsqueeze_39, unsqueeze_30, unsqueeze_31, unsqueeze_32, None, getitem_90, convert_element_type_20, convert_element_type_20, sym_size_int_4, sym_size_int_4, getitem_91, 0.0, getitem_92, getitem_93, 1, False);  unsqueeze_39 = unsqueeze_30 = unsqueeze_31 = unsqueeze_32 = getitem_90 = convert_element_type_20 = getitem_91 = getitem_92 = getitem_93 = None
        getitem_120: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = _efficient_attention_backward_1[0]
        getitem_121: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = _efficient_attention_backward_1[1]
        getitem_122: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = _efficient_attention_backward_1[2];  _efficient_attention_backward_1 = None
        squeeze_15: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_122, 0);  getitem_122 = None
        squeeze_16: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_121, 0);  getitem_121 = None
        squeeze_17: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_120, 0);  getitem_120 = None
        permute_158: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(squeeze_15, [1, 0, 2]);  squeeze_15 = None
        permute_159: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(squeeze_16, [1, 0, 2]);  squeeze_16 = None
        permute_160: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(squeeze_17, [1, 0, 2]);  squeeze_17 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:116 in jagged_forward, code: values = va.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        permute_161: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_158, [1, 0, 2]);  permute_158 = None
        view_55: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_161, [sym_size_int_3, 384]);  permute_161 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:115 in jagged_forward, code: keys = ke.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        permute_162: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_159, [1, 0, 2]);  permute_159 = None
        view_56: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_162, [sym_size_int_3, 384]);  permute_162 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:114 in jagged_forward, code: queries = qu.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        permute_163: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_160, [1, 0, 2]);  permute_160 = None
        view_57: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_163, [sym_size_int_3, 384]);  permute_163 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:200 in forward, code: queries, keys, values = self.qkv(x).chunk(3, dim=-1)
        full_26: "f32[s6, 1152][1152, 1]cuda:0" = torch.ops.aten.full.default([sym_size_int_3, 1152], 0, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        split_18 = torch.ops.aten.split.Tensor(full_26, 384, 1)
        getitem_124: "f32[s6, 384][1152, 1]cuda:0" = split_18[0];  split_18 = None
        copy_2: "f32[s6, 384][1152, 1]cuda:0" = torch.ops.aten.copy.default(getitem_124, view_57);  view_57 = None
        slice_scatter_2: "f32[s6, 1152][1152, 1]cuda:0" = torch.ops.aten.slice_scatter.default(full_26, copy_2, 1, 0, 384);  copy_2 = None
        split_21 = torch.ops.aten.split.Tensor(slice_scatter_2, 384, 1)
        getitem_134: "f32[s6, 384][1152, 1]cuda:0" = split_21[1];  split_21 = None
        copy_3: "f32[s6, 384][1152, 1]cuda:0" = torch.ops.aten.copy.default(getitem_134, view_56);  getitem_134 = view_56 = None
        slice_scatter_3: "f32[s6, 1152][1152, 1]cuda:0" = torch.ops.aten.slice_scatter.default(slice_scatter_2, copy_3, 1, 384, 768);  slice_scatter_2 = copy_3 = None
        split_24 = torch.ops.aten.split.Tensor(slice_scatter_3, 384, 1)
        getitem_144: "f32[s6, 384][1152, 1]cuda:0" = split_24[2];  split_24 = None
        copy_4: "f32[s6, 384][1152, 1]cuda:0" = torch.ops.aten.copy.default(getitem_144, view_55);  getitem_144 = view_55 = None
        slice_scatter_4: "f32[s6, 1152][1152, 1]cuda:0" = torch.ops.aten.slice_scatter.default(slice_scatter_3, copy_4, 1, 768, 1152);  slice_scatter_3 = copy_4 = None
        mm_56: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(slice_scatter_4, primals_66);  primals_66 = None
        permute_165: "f32[1152, s6][1, 1152]cuda:0" = torch.ops.aten.permute.default(slice_scatter_4, [1, 0]);  slice_scatter_4 = None
        mm_57: "f32[1152, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_165, mul_92);  permute_165 = mul_92 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:76 in forward, code: attn_out = x + self.attention(self.do(self.attn_norm(x)), padding_mask=padding_mask, is_causal=is_causal, jagged=jagged, use_cache=not self.training and self.enable_kv_cache)
        convert_element_type_27: "f32[s6, 384][384, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_24, torch.float32);  gt_24 = None
        mul_129: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_27, 1.4285714285714286);  convert_element_type_27 = None
        mul_130: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_56, mul_129);  mm_56 = mul_129 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_89: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(add_33, rsqrt_17)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_131: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_130, mul_89);  mul_89 = None
        mul_132: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_130, primals_65);  mul_130 = primals_65 = None
        sum_5: "f32[1, 384][384, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_131, [0], True);  mul_131 = None
        unsqueeze_40: "f32[1, 1, 384][384, 384, 1]cuda:0" = torch.ops.aten.unsqueeze.default(sum_5, 0);  sum_5 = None
        view_58: "f32[384][1]cuda:0" = torch.ops.aten.view.default(unsqueeze_40, [384]);  unsqueeze_40 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_133: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_132, add_33);  add_33 = None
        mul_134: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_132, rsqrt_17);  mul_132 = None
        sum_6: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_133, [1], True);  mul_133 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_45: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_44, mul_134);  add_44 = mul_134 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        pow_25: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(rsqrt_17, 3);  rsqrt_17 = None
        mul_135: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mul.Scalar(sum_6, -0.5);  sum_6 = None
        mul_136: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_135, pow_25);  mul_135 = pow_25 = None
        expand_2: "f32[s6, 384][1, 0]cuda:0" = torch.ops.aten.expand.default(mul_136, [-1, 384]);  mul_136 = None
        div_2: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.div.Scalar(expand_2, 384);  expand_2 = None
        mul_138: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(div_2, mul_127);  div_2 = mul_127 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_46: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_45, mul_138);  add_45 = mul_138 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:81 in forward, code: proj_out = attn_out + self.ff(attn_out)
        convert_element_type_28: "f32[s6, 384][384, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_23, torch.float32);  gt_23 = None
        mul_139: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_28, 1.4285714285714286);  convert_element_type_28 = None
        mul_140: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(add_46, mul_139);  mul_139 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/encoder.py:36 in forward, code: return self.mlp(x)
        mm_58: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mm.default(mul_140, primals_64);  primals_64 = None
        permute_166: "f32[384, s6][1, 384]cuda:0" = torch.ops.aten.permute.default(mul_140, [1, 0]);  mul_140 = None
        mm_59: "f32[384, 1024][1024, 1]cuda:0" = torch.ops.aten.mm.default(permute_166, mul_86);  permute_166 = mul_86 = None
        convert_element_type_29: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_22, torch.float32);  gt_22 = None
        mul_141: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_29, 1.4285714285714286);  convert_element_type_29 = None
        mul_142: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_58, mul_141);  mm_58 = mul_141 = None
        sigmoid_9: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.sigmoid.default(mm_35)
        sub_1: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.sub.Tensor(full_24, sigmoid_9)
        mul_143: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_35, sub_1);  mm_35 = sub_1 = None
        add_47: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.add.Scalar(mul_143, 1);  mul_143 = None
        mul_144: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(sigmoid_9, add_47);  sigmoid_9 = add_47 = None
        mul_145: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_142, mul_144);  mul_142 = mul_144 = None
        mm_60: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(mul_145, primals_63);  primals_63 = None
        permute_168: "f32[1024, s6][1, 1024]cuda:0" = torch.ops.aten.permute.default(mul_145, [1, 0]);  mul_145 = None
        mm_61: "f32[1024, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_168, mul_83);  permute_168 = mul_83 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_82: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(add_31, rsqrt_16)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_146: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_60, mul_82);  mul_82 = None
        mul_147: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_60, primals_62);  mm_60 = primals_62 = None
        sum_7: "f32[1, 384][384, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_146, [0], True);  mul_146 = None
        unsqueeze_41: "f32[1, 1, 384][384, 384, 1]cuda:0" = torch.ops.aten.unsqueeze.default(sum_7, 0);  sum_7 = None
        view_59: "f32[384][1]cuda:0" = torch.ops.aten.view.default(unsqueeze_41, [384]);  unsqueeze_41 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_148: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_147, add_31)
        mul_149: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_147, rsqrt_16);  mul_147 = None
        sum_8: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_148, [1], True);  mul_148 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_48: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_46, mul_149);  add_46 = mul_149 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        pow_27: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(rsqrt_16, 3);  rsqrt_16 = None
        mul_150: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mul.Scalar(sum_8, -0.5);  sum_8 = None
        mul_151: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_150, pow_27);  mul_150 = pow_27 = None
        expand_3: "f32[s6, 384][1, 0]cuda:0" = torch.ops.aten.expand.default(mul_151, [-1, 384]);  mul_151 = None
        div_3: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.div.Scalar(expand_3, 384);  expand_3 = None
        pow_28: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(add_31, 1.0);  add_31 = None
        mul_152: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Scalar(pow_28, 2.0);  pow_28 = None
        mul_153: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(div_3, mul_152);  div_3 = mul_152 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_49: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_48, mul_153);  add_48 = mul_153 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:231 in forward, code: context_vec = self.proj(context_vec)
        mm_62: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(add_49, primals_61);  primals_61 = None
        permute_169: "f32[384, s6][1, 384]cuda:0" = torch.ops.aten.permute.default(add_49, [1, 0])
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:120 in jagged_forward, code: context_vec = F.scaled_dot_product_attention(
        squeeze_9: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_81, 0)
        permute_112: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(squeeze_9, [1, 0, 2]);  squeeze_9 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:123 in jagged_forward, code: context_vec = context_vec.transpose(1, 2).flatten(-2)
        permute_113: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_112, [1, 0, 2]);  permute_112 = None
        view_39: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_113, [sym_size_int_3, 384]);  permute_113 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:231 in forward, code: context_vec = self.proj(context_vec)
        mm_63: "f32[384, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_169, view_39);  view_39 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:123 in jagged_forward, code: context_vec = context_vec.transpose(1, 2).flatten(-2)
        view_60: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.view.default(mm_62, [sym_size_int_3, 6, 64]);  mm_62 = None
        permute_170: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(view_60, [1, 0, 2]);  view_60 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:120 in jagged_forward, code: context_vec = F.scaled_dot_product_attention(
        permute_171: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_170, [1, 0, 2]);  permute_170 = None
        unsqueeze_42: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(permute_171, 0);  permute_171 = None
        _efficient_attention_backward_2 = torch.ops.aten._efficient_attention_backward.default(unsqueeze_42, unsqueeze_27, unsqueeze_28, unsqueeze_29, None, getitem_81, convert_element_type_18, convert_element_type_19, sym_size_int_4, sym_size_int_1, getitem_82, 0.0, getitem_83, getitem_84, 0, False);  unsqueeze_42 = unsqueeze_27 = unsqueeze_28 = unsqueeze_29 = getitem_81 = convert_element_type_18 = convert_element_type_19 = getitem_82 = getitem_83 = getitem_84 = None
        getitem_151: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = _efficient_attention_backward_2[0]
        getitem_152: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = _efficient_attention_backward_2[1]
        getitem_153: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = _efficient_attention_backward_2[2];  _efficient_attention_backward_2 = None
        squeeze_18: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_153, 0);  getitem_153 = None
        squeeze_19: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_152, 0);  getitem_152 = None
        squeeze_20: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_151, 0);  getitem_151 = None
        permute_172: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(squeeze_18, [1, 0, 2]);  squeeze_18 = None
        permute_173: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(squeeze_19, [1, 0, 2]);  squeeze_19 = None
        permute_174: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(squeeze_20, [1, 0, 2]);  squeeze_20 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:116 in jagged_forward, code: values = va.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        permute_175: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_172, [1, 0, 2]);  permute_172 = None
        view_61: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_175, [sym_size_int, 384]);  permute_175 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:115 in jagged_forward, code: keys = ke.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        permute_176: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_173, [1, 0, 2]);  permute_173 = None
        view_62: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_176, [sym_size_int, 384]);  permute_176 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:114 in jagged_forward, code: queries = qu.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        permute_177: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_174, [1, 0, 2]);  permute_174 = None
        view_63: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_177, [sym_size_int_3, 384]);  permute_177 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:198 in forward, code: keys, values = self.kv(x_kv).chunk(2, dim=-1)
        copy_5: "f32[s1, 384][768, 1]cuda:0" = torch.ops.aten.copy.default(getitem_108, view_62);  view_62 = None
        slice_scatter_5: "f32[s1, 768][768, 1]cuda:0" = torch.ops.aten.slice_scatter.default(full_25, copy_5, 1, 0, 384);  copy_5 = None
        split_30 = torch.ops.aten.split.Tensor(slice_scatter_5, 384, 1)
        getitem_162: "f32[s1, 384][768, 1]cuda:0" = split_30[1];  split_30 = None
        copy_6: "f32[s1, 384][768, 1]cuda:0" = torch.ops.aten.copy.default(getitem_162, view_61);  getitem_162 = view_61 = None
        slice_scatter_6: "f32[s1, 768][768, 1]cuda:0" = torch.ops.aten.slice_scatter.default(slice_scatter_5, copy_6, 1, 384, 768);  slice_scatter_5 = copy_6 = None
        mm_64: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(slice_scatter_6, primals_60);  primals_60 = None
        permute_179: "f32[768, s1][1, 768]cuda:0" = torch.ops.aten.permute.default(slice_scatter_6, [1, 0]);  slice_scatter_6 = None
        mm_65: "f32[768, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_179, add_15);  permute_179 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:198 in forward, code: keys, values = self.kv(x_kv).chunk(2, dim=-1)
        add_50: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(mm_50, mm_64);  mm_50 = mm_64 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:197 in forward, code: queries = self.q(x)
        mm_66: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(view_63, primals_59);  primals_59 = None
        permute_180: "f32[384, s6][1, 384]cuda:0" = torch.ops.aten.permute.default(view_63, [1, 0]);  view_63 = None
        mm_67: "f32[384, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_180, mul_81);  permute_180 = mul_81 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:79 in forward, code: x=self.do(self.cross_attn_norm(x)), x_kv=x_kv, padding_mask=padding_mask, is_causal=False, jagged=jagged, use_cache=not self.training and self.enable_kv_cache
        convert_element_type_30: "f32[s6, 384][384, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_21, torch.float32);  gt_21 = None
        mul_154: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_30, 1.4285714285714286);  convert_element_type_30 = None
        mul_155: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_66, mul_154);  mm_66 = mul_154 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_156: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_155, mul_78);  mul_78 = None
        mul_157: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_155, primals_58);  mul_155 = primals_58 = None
        sum_9: "f32[1, 384][384, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_156, [0], True);  mul_156 = None
        unsqueeze_43: "f32[1, 1, 384][384, 384, 1]cuda:0" = torch.ops.aten.unsqueeze.default(sum_9, 0);  sum_9 = None
        view_64: "f32[384][1]cuda:0" = torch.ops.aten.view.default(unsqueeze_43, [384]);  unsqueeze_43 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_158: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_157, add_27)
        mul_159: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_157, rsqrt_15);  mul_157 = None
        sum_10: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_158, [1], True);  mul_158 = None
        pow_29: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(rsqrt_15, 3);  rsqrt_15 = None
        mul_160: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mul.Scalar(sum_10, -0.5);  sum_10 = None
        mul_161: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_160, pow_29);  mul_160 = pow_29 = None
        expand_4: "f32[s6, 384][1, 0]cuda:0" = torch.ops.aten.expand.default(mul_161, [-1, 384]);  mul_161 = None
        div_4: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.div.Scalar(expand_4, 384);  expand_4 = None
        pow_30: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(add_27, 1.0)
        mul_162: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Scalar(pow_30, 2.0);  pow_30 = None
        mul_163: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(div_4, mul_162);  div_4 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_51: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(mul_159, mul_163);  mul_159 = mul_163 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:76 in forward, code: attn_out = x + self.attention(self.do(self.attn_norm(x)), padding_mask=padding_mask, is_causal=is_causal, jagged=jagged, use_cache=not self.training and self.enable_kv_cache)
        add_52: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_51, add_49);  add_51 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:231 in forward, code: context_vec = self.proj(context_vec)
        mm_68: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(add_49, primals_57);  add_49 = primals_57 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:120 in jagged_forward, code: context_vec = F.scaled_dot_product_attention(
        squeeze_8: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_73, 0)
        permute_101: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(squeeze_8, [1, 0, 2]);  squeeze_8 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:123 in jagged_forward, code: context_vec = context_vec.transpose(1, 2).flatten(-2)
        permute_102: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_101, [1, 0, 2]);  permute_101 = None
        view_35: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_102, [sym_size_int_3, 384]);  permute_102 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:231 in forward, code: context_vec = self.proj(context_vec)
        mm_69: "f32[384, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_169, view_35);  permute_169 = view_35 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:123 in jagged_forward, code: context_vec = context_vec.transpose(1, 2).flatten(-2)
        view_65: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.view.default(mm_68, [sym_size_int_3, 6, 64]);  mm_68 = None
        permute_182: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(view_65, [1, 0, 2]);  view_65 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:120 in jagged_forward, code: context_vec = F.scaled_dot_product_attention(
        permute_183: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_182, [1, 0, 2]);  permute_182 = None
        unsqueeze_44: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(permute_183, 0);  permute_183 = None
        _efficient_attention_backward_3 = torch.ops.aten._efficient_attention_backward.default(unsqueeze_44, unsqueeze_24, unsqueeze_25, unsqueeze_26, None, getitem_73, convert_element_type_16, convert_element_type_16, sym_size_int_4, sym_size_int_4, getitem_74, 0.0, getitem_75, getitem_76, 1, False);  unsqueeze_44 = unsqueeze_24 = unsqueeze_25 = unsqueeze_26 = getitem_73 = convert_element_type_16 = getitem_74 = getitem_75 = getitem_76 = None
        getitem_167: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = _efficient_attention_backward_3[0]
        getitem_168: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = _efficient_attention_backward_3[1]
        getitem_169: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = _efficient_attention_backward_3[2];  _efficient_attention_backward_3 = None
        squeeze_21: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_169, 0);  getitem_169 = None
        squeeze_22: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_168, 0);  getitem_168 = None
        squeeze_23: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_167, 0);  getitem_167 = None
        permute_184: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(squeeze_21, [1, 0, 2]);  squeeze_21 = None
        permute_185: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(squeeze_22, [1, 0, 2]);  squeeze_22 = None
        permute_186: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(squeeze_23, [1, 0, 2]);  squeeze_23 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:116 in jagged_forward, code: values = va.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        permute_187: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_184, [1, 0, 2]);  permute_184 = None
        view_66: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_187, [sym_size_int_3, 384]);  permute_187 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:115 in jagged_forward, code: keys = ke.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        permute_188: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_185, [1, 0, 2]);  permute_185 = None
        view_67: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_188, [sym_size_int_3, 384]);  permute_188 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:114 in jagged_forward, code: queries = qu.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        permute_189: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_186, [1, 0, 2]);  permute_186 = None
        view_68: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_189, [sym_size_int_3, 384]);  permute_189 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:200 in forward, code: queries, keys, values = self.qkv(x).chunk(3, dim=-1)
        copy_7: "f32[s6, 384][1152, 1]cuda:0" = torch.ops.aten.copy.default(getitem_124, view_68);  view_68 = None
        slice_scatter_7: "f32[s6, 1152][1152, 1]cuda:0" = torch.ops.aten.slice_scatter.default(full_26, copy_7, 1, 0, 384);  copy_7 = None
        split_36 = torch.ops.aten.split.Tensor(slice_scatter_7, 384, 1)
        getitem_181: "f32[s6, 384][1152, 1]cuda:0" = split_36[1];  split_36 = None
        copy_8: "f32[s6, 384][1152, 1]cuda:0" = torch.ops.aten.copy.default(getitem_181, view_67);  getitem_181 = view_67 = None
        slice_scatter_8: "f32[s6, 1152][1152, 1]cuda:0" = torch.ops.aten.slice_scatter.default(slice_scatter_7, copy_8, 1, 384, 768);  slice_scatter_7 = copy_8 = None
        split_39 = torch.ops.aten.split.Tensor(slice_scatter_8, 384, 1)
        getitem_191: "f32[s6, 384][1152, 1]cuda:0" = split_39[2];  split_39 = None
        copy_9: "f32[s6, 384][1152, 1]cuda:0" = torch.ops.aten.copy.default(getitem_191, view_66);  getitem_191 = view_66 = None
        slice_scatter_9: "f32[s6, 1152][1152, 1]cuda:0" = torch.ops.aten.slice_scatter.default(slice_scatter_8, copy_9, 1, 768, 1152);  slice_scatter_8 = copy_9 = None
        mm_70: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(slice_scatter_9, primals_56);  primals_56 = None
        permute_191: "f32[1152, s6][1, 1152]cuda:0" = torch.ops.aten.permute.default(slice_scatter_9, [1, 0]);  slice_scatter_9 = None
        mm_71: "f32[1152, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_191, mul_77);  permute_191 = mul_77 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:76 in forward, code: attn_out = x + self.attention(self.do(self.attn_norm(x)), padding_mask=padding_mask, is_causal=is_causal, jagged=jagged, use_cache=not self.training and self.enable_kv_cache)
        convert_element_type_31: "f32[s6, 384][384, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_20, torch.float32);  gt_20 = None
        mul_164: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_31, 1.4285714285714286);  convert_element_type_31 = None
        mul_165: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_70, mul_164);  mm_70 = mul_164 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_74: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(add_27, rsqrt_14)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_166: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_165, mul_74);  mul_74 = None
        mul_167: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_165, primals_55);  mul_165 = primals_55 = None
        sum_11: "f32[1, 384][384, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_166, [0], True);  mul_166 = None
        unsqueeze_45: "f32[1, 1, 384][384, 384, 1]cuda:0" = torch.ops.aten.unsqueeze.default(sum_11, 0);  sum_11 = None
        view_69: "f32[384][1]cuda:0" = torch.ops.aten.view.default(unsqueeze_45, [384]);  unsqueeze_45 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_168: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_167, add_27);  add_27 = None
        mul_169: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_167, rsqrt_14);  mul_167 = None
        sum_12: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_168, [1], True);  mul_168 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_53: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_52, mul_169);  add_52 = mul_169 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        pow_31: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(rsqrt_14, 3);  rsqrt_14 = None
        mul_170: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mul.Scalar(sum_12, -0.5);  sum_12 = None
        mul_171: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_170, pow_31);  mul_170 = pow_31 = None
        expand_5: "f32[s6, 384][1, 0]cuda:0" = torch.ops.aten.expand.default(mul_171, [-1, 384]);  mul_171 = None
        div_5: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.div.Scalar(expand_5, 384);  expand_5 = None
        mul_173: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(div_5, mul_162);  div_5 = mul_162 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_54: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_53, mul_173);  add_53 = mul_173 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:81 in forward, code: proj_out = attn_out + self.ff(attn_out)
        convert_element_type_32: "f32[s6, 384][384, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_19, torch.float32);  gt_19 = None
        mul_174: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_32, 1.4285714285714286);  convert_element_type_32 = None
        mul_175: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(add_54, mul_174);  mul_174 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/encoder.py:36 in forward, code: return self.mlp(x)
        mm_72: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mm.default(mul_175, primals_54);  primals_54 = None
        permute_192: "f32[384, s6][1, 384]cuda:0" = torch.ops.aten.permute.default(mul_175, [1, 0]);  mul_175 = None
        mm_73: "f32[384, 1024][1024, 1]cuda:0" = torch.ops.aten.mm.default(permute_192, mul_71);  permute_192 = mul_71 = None
        convert_element_type_33: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_18, torch.float32);  gt_18 = None
        mul_176: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_33, 1.4285714285714286);  convert_element_type_33 = None
        mul_177: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_72, mul_176);  mm_72 = mul_176 = None
        sigmoid_10: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.sigmoid.default(mm_28)
        sub_2: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.sub.Tensor(full_24, sigmoid_10)
        mul_178: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_28, sub_2);  mm_28 = sub_2 = None
        add_55: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.add.Scalar(mul_178, 1);  mul_178 = None
        mul_179: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(sigmoid_10, add_55);  sigmoid_10 = add_55 = None
        mul_180: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_177, mul_179);  mul_177 = mul_179 = None
        mm_74: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(mul_180, primals_53);  primals_53 = None
        permute_194: "f32[1024, s6][1, 1024]cuda:0" = torch.ops.aten.permute.default(mul_180, [1, 0]);  mul_180 = None
        mm_75: "f32[1024, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_194, mul_68);  permute_194 = mul_68 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_67: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(add_25, rsqrt_13)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_181: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_74, mul_67);  mul_67 = None
        mul_182: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_74, primals_52);  mm_74 = primals_52 = None
        sum_13: "f32[1, 384][384, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_181, [0], True);  mul_181 = None
        unsqueeze_46: "f32[1, 1, 384][384, 384, 1]cuda:0" = torch.ops.aten.unsqueeze.default(sum_13, 0);  sum_13 = None
        view_70: "f32[384][1]cuda:0" = torch.ops.aten.view.default(unsqueeze_46, [384]);  unsqueeze_46 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_183: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_182, add_25)
        mul_184: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_182, rsqrt_13);  mul_182 = None
        sum_14: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_183, [1], True);  mul_183 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_56: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_54, mul_184);  add_54 = mul_184 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        pow_33: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(rsqrt_13, 3);  rsqrt_13 = None
        mul_185: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mul.Scalar(sum_14, -0.5);  sum_14 = None
        mul_186: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_185, pow_33);  mul_185 = pow_33 = None
        expand_6: "f32[s6, 384][1, 0]cuda:0" = torch.ops.aten.expand.default(mul_186, [-1, 384]);  mul_186 = None
        div_6: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.div.Scalar(expand_6, 384);  expand_6 = None
        pow_34: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(add_25, 1.0);  add_25 = None
        mul_187: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Scalar(pow_34, 2.0);  pow_34 = None
        mul_188: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(div_6, mul_187);  div_6 = mul_187 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_57: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_56, mul_188);  add_56 = mul_188 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:231 in forward, code: context_vec = self.proj(context_vec)
        mm_76: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(add_57, primals_51);  primals_51 = None
        permute_195: "f32[384, s6][1, 384]cuda:0" = torch.ops.aten.permute.default(add_57, [1, 0])
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:120 in jagged_forward, code: context_vec = F.scaled_dot_product_attention(
        squeeze_7: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_64, 0)
        permute_89: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(squeeze_7, [1, 0, 2]);  squeeze_7 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:123 in jagged_forward, code: context_vec = context_vec.transpose(1, 2).flatten(-2)
        permute_90: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_89, [1, 0, 2]);  permute_89 = None
        view_31: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_90, [sym_size_int_3, 384]);  permute_90 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:231 in forward, code: context_vec = self.proj(context_vec)
        mm_77: "f32[384, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_195, view_31);  view_31 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:123 in jagged_forward, code: context_vec = context_vec.transpose(1, 2).flatten(-2)
        view_71: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.view.default(mm_76, [sym_size_int_3, 6, 64]);  mm_76 = None
        permute_196: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(view_71, [1, 0, 2]);  view_71 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:120 in jagged_forward, code: context_vec = F.scaled_dot_product_attention(
        permute_197: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_196, [1, 0, 2]);  permute_196 = None
        unsqueeze_47: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(permute_197, 0);  permute_197 = None
        _efficient_attention_backward_4 = torch.ops.aten._efficient_attention_backward.default(unsqueeze_47, unsqueeze_21, unsqueeze_22, unsqueeze_23, None, getitem_64, convert_element_type_14, convert_element_type_15, sym_size_int_4, sym_size_int_1, getitem_65, 0.0, getitem_66, getitem_67, 0, False);  unsqueeze_47 = unsqueeze_21 = unsqueeze_22 = unsqueeze_23 = getitem_64 = convert_element_type_14 = convert_element_type_15 = getitem_65 = getitem_66 = getitem_67 = None
        getitem_198: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = _efficient_attention_backward_4[0]
        getitem_199: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = _efficient_attention_backward_4[1]
        getitem_200: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = _efficient_attention_backward_4[2];  _efficient_attention_backward_4 = None
        squeeze_24: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_200, 0);  getitem_200 = None
        squeeze_25: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_199, 0);  getitem_199 = None
        squeeze_26: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_198, 0);  getitem_198 = None
        permute_198: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(squeeze_24, [1, 0, 2]);  squeeze_24 = None
        permute_199: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(squeeze_25, [1, 0, 2]);  squeeze_25 = None
        permute_200: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(squeeze_26, [1, 0, 2]);  squeeze_26 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:116 in jagged_forward, code: values = va.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        permute_201: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_198, [1, 0, 2]);  permute_198 = None
        view_72: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_201, [sym_size_int, 384]);  permute_201 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:115 in jagged_forward, code: keys = ke.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        permute_202: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_199, [1, 0, 2]);  permute_199 = None
        view_73: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_202, [sym_size_int, 384]);  permute_202 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:114 in jagged_forward, code: queries = qu.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        permute_203: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_200, [1, 0, 2]);  permute_200 = None
        view_74: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_203, [sym_size_int_3, 384]);  permute_203 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:198 in forward, code: keys, values = self.kv(x_kv).chunk(2, dim=-1)
        copy_10: "f32[s1, 384][768, 1]cuda:0" = torch.ops.aten.copy.default(getitem_108, view_73);  view_73 = None
        slice_scatter_10: "f32[s1, 768][768, 1]cuda:0" = torch.ops.aten.slice_scatter.default(full_25, copy_10, 1, 0, 384);  copy_10 = None
        split_45 = torch.ops.aten.split.Tensor(slice_scatter_10, 384, 1)
        getitem_209: "f32[s1, 384][768, 1]cuda:0" = split_45[1];  split_45 = None
        copy_11: "f32[s1, 384][768, 1]cuda:0" = torch.ops.aten.copy.default(getitem_209, view_72);  getitem_209 = view_72 = None
        slice_scatter_11: "f32[s1, 768][768, 1]cuda:0" = torch.ops.aten.slice_scatter.default(slice_scatter_10, copy_11, 1, 384, 768);  slice_scatter_10 = copy_11 = None
        mm_78: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(slice_scatter_11, primals_50);  primals_50 = None
        permute_205: "f32[768, s1][1, 768]cuda:0" = torch.ops.aten.permute.default(slice_scatter_11, [1, 0]);  slice_scatter_11 = None
        mm_79: "f32[768, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_205, add_15);  permute_205 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:198 in forward, code: keys, values = self.kv(x_kv).chunk(2, dim=-1)
        add_58: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_50, mm_78);  add_50 = mm_78 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:197 in forward, code: queries = self.q(x)
        mm_80: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(view_74, primals_49);  primals_49 = None
        permute_206: "f32[384, s6][1, 384]cuda:0" = torch.ops.aten.permute.default(view_74, [1, 0]);  view_74 = None
        mm_81: "f32[384, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_206, mul_66);  permute_206 = mul_66 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:79 in forward, code: x=self.do(self.cross_attn_norm(x)), x_kv=x_kv, padding_mask=padding_mask, is_causal=False, jagged=jagged, use_cache=not self.training and self.enable_kv_cache
        convert_element_type_34: "f32[s6, 384][384, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_17, torch.float32);  gt_17 = None
        mul_189: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_34, 1.4285714285714286);  convert_element_type_34 = None
        mul_190: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_80, mul_189);  mm_80 = mul_189 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_191: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_190, mul_63);  mul_63 = None
        mul_192: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_190, primals_48);  mul_190 = primals_48 = None
        sum_15: "f32[1, 384][384, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_191, [0], True);  mul_191 = None
        unsqueeze_48: "f32[1, 1, 384][384, 384, 1]cuda:0" = torch.ops.aten.unsqueeze.default(sum_15, 0);  sum_15 = None
        view_75: "f32[384][1]cuda:0" = torch.ops.aten.view.default(unsqueeze_48, [384]);  unsqueeze_48 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_193: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_192, add_21)
        mul_194: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_192, rsqrt_12);  mul_192 = None
        sum_16: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_193, [1], True);  mul_193 = None
        pow_35: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(rsqrt_12, 3);  rsqrt_12 = None
        mul_195: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mul.Scalar(sum_16, -0.5);  sum_16 = None
        mul_196: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_195, pow_35);  mul_195 = pow_35 = None
        expand_7: "f32[s6, 384][1, 0]cuda:0" = torch.ops.aten.expand.default(mul_196, [-1, 384]);  mul_196 = None
        div_7: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.div.Scalar(expand_7, 384);  expand_7 = None
        pow_36: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(add_21, 1.0)
        mul_197: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Scalar(pow_36, 2.0);  pow_36 = None
        mul_198: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(div_7, mul_197);  div_7 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_59: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(mul_194, mul_198);  mul_194 = mul_198 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:76 in forward, code: attn_out = x + self.attention(self.do(self.attn_norm(x)), padding_mask=padding_mask, is_causal=is_causal, jagged=jagged, use_cache=not self.training and self.enable_kv_cache)
        add_60: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_59, add_57);  add_59 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:231 in forward, code: context_vec = self.proj(context_vec)
        mm_82: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(add_57, primals_47);  add_57 = primals_47 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:120 in jagged_forward, code: context_vec = F.scaled_dot_product_attention(
        squeeze_6: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_56, 0)
        permute_78: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(squeeze_6, [1, 0, 2]);  squeeze_6 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:123 in jagged_forward, code: context_vec = context_vec.transpose(1, 2).flatten(-2)
        permute_79: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_78, [1, 0, 2]);  permute_78 = None
        view_27: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_79, [sym_size_int_3, 384]);  permute_79 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:231 in forward, code: context_vec = self.proj(context_vec)
        mm_83: "f32[384, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_195, view_27);  permute_195 = view_27 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:123 in jagged_forward, code: context_vec = context_vec.transpose(1, 2).flatten(-2)
        view_76: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.view.default(mm_82, [sym_size_int_3, 6, 64]);  mm_82 = None
        permute_208: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(view_76, [1, 0, 2]);  view_76 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:120 in jagged_forward, code: context_vec = F.scaled_dot_product_attention(
        permute_209: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_208, [1, 0, 2]);  permute_208 = None
        unsqueeze_49: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(permute_209, 0);  permute_209 = None
        _efficient_attention_backward_5 = torch.ops.aten._efficient_attention_backward.default(unsqueeze_49, unsqueeze_18, unsqueeze_19, unsqueeze_20, None, getitem_56, convert_element_type_12, convert_element_type_12, sym_size_int_4, sym_size_int_4, getitem_57, 0.0, getitem_58, getitem_59, 1, False);  unsqueeze_49 = unsqueeze_18 = unsqueeze_19 = unsqueeze_20 = getitem_56 = convert_element_type_12 = getitem_57 = getitem_58 = getitem_59 = None
        getitem_214: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = _efficient_attention_backward_5[0]
        getitem_215: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = _efficient_attention_backward_5[1]
        getitem_216: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = _efficient_attention_backward_5[2];  _efficient_attention_backward_5 = None
        squeeze_27: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_216, 0);  getitem_216 = None
        squeeze_28: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_215, 0);  getitem_215 = None
        squeeze_29: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_214, 0);  getitem_214 = None
        permute_210: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(squeeze_27, [1, 0, 2]);  squeeze_27 = None
        permute_211: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(squeeze_28, [1, 0, 2]);  squeeze_28 = None
        permute_212: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(squeeze_29, [1, 0, 2]);  squeeze_29 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:116 in jagged_forward, code: values = va.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        permute_213: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_210, [1, 0, 2]);  permute_210 = None
        view_77: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_213, [sym_size_int_3, 384]);  permute_213 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:115 in jagged_forward, code: keys = ke.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        permute_214: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_211, [1, 0, 2]);  permute_211 = None
        view_78: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_214, [sym_size_int_3, 384]);  permute_214 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:114 in jagged_forward, code: queries = qu.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        permute_215: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_212, [1, 0, 2]);  permute_212 = None
        view_79: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_215, [sym_size_int_3, 384]);  permute_215 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:200 in forward, code: queries, keys, values = self.qkv(x).chunk(3, dim=-1)
        copy_12: "f32[s6, 384][1152, 1]cuda:0" = torch.ops.aten.copy.default(getitem_124, view_79);  view_79 = None
        slice_scatter_12: "f32[s6, 1152][1152, 1]cuda:0" = torch.ops.aten.slice_scatter.default(full_26, copy_12, 1, 0, 384);  copy_12 = None
        split_51 = torch.ops.aten.split.Tensor(slice_scatter_12, 384, 1)
        getitem_228: "f32[s6, 384][1152, 1]cuda:0" = split_51[1];  split_51 = None
        copy_13: "f32[s6, 384][1152, 1]cuda:0" = torch.ops.aten.copy.default(getitem_228, view_78);  getitem_228 = view_78 = None
        slice_scatter_13: "f32[s6, 1152][1152, 1]cuda:0" = torch.ops.aten.slice_scatter.default(slice_scatter_12, copy_13, 1, 384, 768);  slice_scatter_12 = copy_13 = None
        split_54 = torch.ops.aten.split.Tensor(slice_scatter_13, 384, 1)
        getitem_238: "f32[s6, 384][1152, 1]cuda:0" = split_54[2];  split_54 = None
        copy_14: "f32[s6, 384][1152, 1]cuda:0" = torch.ops.aten.copy.default(getitem_238, view_77);  getitem_238 = view_77 = None
        slice_scatter_14: "f32[s6, 1152][1152, 1]cuda:0" = torch.ops.aten.slice_scatter.default(slice_scatter_13, copy_14, 1, 768, 1152);  slice_scatter_13 = copy_14 = None
        mm_84: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(slice_scatter_14, primals_46);  primals_46 = None
        permute_217: "f32[1152, s6][1, 1152]cuda:0" = torch.ops.aten.permute.default(slice_scatter_14, [1, 0]);  slice_scatter_14 = None
        mm_85: "f32[1152, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_217, mul_62);  permute_217 = mul_62 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:76 in forward, code: attn_out = x + self.attention(self.do(self.attn_norm(x)), padding_mask=padding_mask, is_causal=is_causal, jagged=jagged, use_cache=not self.training and self.enable_kv_cache)
        convert_element_type_35: "f32[s6, 384][384, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_16, torch.float32);  gt_16 = None
        mul_199: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_35, 1.4285714285714286);  convert_element_type_35 = None
        mul_200: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_84, mul_199);  mm_84 = mul_199 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_59: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(add_21, rsqrt_11)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_201: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_200, mul_59);  mul_59 = None
        mul_202: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_200, primals_45);  mul_200 = primals_45 = None
        sum_17: "f32[1, 384][384, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_201, [0], True);  mul_201 = None
        unsqueeze_50: "f32[1, 1, 384][384, 384, 1]cuda:0" = torch.ops.aten.unsqueeze.default(sum_17, 0);  sum_17 = None
        view_80: "f32[384][1]cuda:0" = torch.ops.aten.view.default(unsqueeze_50, [384]);  unsqueeze_50 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_203: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_202, add_21);  add_21 = None
        mul_204: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_202, rsqrt_11);  mul_202 = None
        sum_18: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_203, [1], True);  mul_203 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_61: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_60, mul_204);  add_60 = mul_204 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        pow_37: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(rsqrt_11, 3);  rsqrt_11 = None
        mul_205: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mul.Scalar(sum_18, -0.5);  sum_18 = None
        mul_206: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_205, pow_37);  mul_205 = pow_37 = None
        expand_8: "f32[s6, 384][1, 0]cuda:0" = torch.ops.aten.expand.default(mul_206, [-1, 384]);  mul_206 = None
        div_8: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.div.Scalar(expand_8, 384);  expand_8 = None
        mul_208: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(div_8, mul_197);  div_8 = mul_197 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_62: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_61, mul_208);  add_61 = mul_208 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:81 in forward, code: proj_out = attn_out + self.ff(attn_out)
        convert_element_type_36: "f32[s6, 384][384, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_15, torch.float32);  gt_15 = None
        mul_209: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_36, 1.4285714285714286);  convert_element_type_36 = None
        mul_210: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(add_62, mul_209);  mul_209 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/encoder.py:36 in forward, code: return self.mlp(x)
        mm_86: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mm.default(mul_210, primals_44);  primals_44 = None
        permute_218: "f32[384, s6][1, 384]cuda:0" = torch.ops.aten.permute.default(mul_210, [1, 0]);  mul_210 = None
        mm_87: "f32[384, 1024][1024, 1]cuda:0" = torch.ops.aten.mm.default(permute_218, mul_56);  permute_218 = mul_56 = None
        convert_element_type_37: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_14, torch.float32);  gt_14 = None
        mul_211: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_37, 1.4285714285714286);  convert_element_type_37 = None
        mul_212: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_86, mul_211);  mm_86 = mul_211 = None
        sigmoid_11: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.sigmoid.default(mm_21)
        sub_3: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.sub.Tensor(full_24, sigmoid_11);  full_24 = None
        mul_213: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_21, sub_3);  mm_21 = sub_3 = None
        add_63: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.add.Scalar(mul_213, 1);  mul_213 = None
        mul_214: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(sigmoid_11, add_63);  sigmoid_11 = add_63 = None
        mul_215: "f32[s6, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_212, mul_214);  mul_212 = mul_214 = None
        mm_88: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(mul_215, primals_43);  primals_43 = None
        permute_220: "f32[1024, s6][1, 1024]cuda:0" = torch.ops.aten.permute.default(mul_215, [1, 0]);  mul_215 = None
        mm_89: "f32[1024, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_220, mul_53);  permute_220 = mul_53 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_52: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(add_19, rsqrt_10)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_216: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_88, mul_52);  mul_52 = None
        mul_217: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_88, primals_42);  mm_88 = primals_42 = None
        sum_19: "f32[1, 384][384, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_216, [0], True);  mul_216 = None
        unsqueeze_51: "f32[1, 1, 384][384, 384, 1]cuda:0" = torch.ops.aten.unsqueeze.default(sum_19, 0);  sum_19 = None
        view_81: "f32[384][1]cuda:0" = torch.ops.aten.view.default(unsqueeze_51, [384]);  unsqueeze_51 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_218: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_217, add_19)
        mul_219: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_217, rsqrt_10);  mul_217 = None
        sum_20: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_218, [1], True);  mul_218 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_64: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_62, mul_219);  add_62 = mul_219 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        pow_39: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(rsqrt_10, 3);  rsqrt_10 = None
        mul_220: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mul.Scalar(sum_20, -0.5);  sum_20 = None
        mul_221: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_220, pow_39);  mul_220 = pow_39 = None
        expand_9: "f32[s6, 384][1, 0]cuda:0" = torch.ops.aten.expand.default(mul_221, [-1, 384]);  mul_221 = None
        div_9: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.div.Scalar(expand_9, 384);  expand_9 = None
        pow_40: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(add_19, 1.0);  add_19 = None
        mul_222: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Scalar(pow_40, 2.0);  pow_40 = None
        mul_223: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(div_9, mul_222);  div_9 = mul_222 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_65: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_64, mul_223);  add_64 = mul_223 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:231 in forward, code: context_vec = self.proj(context_vec)
        mm_90: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(add_65, primals_41);  primals_41 = None
        permute_221: "f32[384, s6][1, 384]cuda:0" = torch.ops.aten.permute.default(add_65, [1, 0])
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:120 in jagged_forward, code: context_vec = F.scaled_dot_product_attention(
        squeeze_5: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_47, 0)
        permute_66: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(squeeze_5, [1, 0, 2]);  squeeze_5 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:123 in jagged_forward, code: context_vec = context_vec.transpose(1, 2).flatten(-2)
        permute_67: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_66, [1, 0, 2]);  permute_66 = None
        view_23: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_67, [sym_size_int_3, 384]);  permute_67 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:231 in forward, code: context_vec = self.proj(context_vec)
        mm_91: "f32[384, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_221, view_23);  view_23 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:123 in jagged_forward, code: context_vec = context_vec.transpose(1, 2).flatten(-2)
        view_82: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.view.default(mm_90, [sym_size_int_3, 6, 64]);  mm_90 = None
        permute_222: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(view_82, [1, 0, 2]);  view_82 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:120 in jagged_forward, code: context_vec = F.scaled_dot_product_attention(
        permute_223: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_222, [1, 0, 2]);  permute_222 = None
        unsqueeze_52: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(permute_223, 0);  permute_223 = None
        _efficient_attention_backward_6 = torch.ops.aten._efficient_attention_backward.default(unsqueeze_52, unsqueeze_15, unsqueeze_16, unsqueeze_17, None, getitem_47, convert_element_type_10, convert_element_type_11, sym_size_int_4, sym_size_int_1, getitem_48, 0.0, getitem_49, getitem_50, 0, False);  unsqueeze_52 = unsqueeze_15 = unsqueeze_16 = unsqueeze_17 = getitem_47 = convert_element_type_10 = convert_element_type_11 = getitem_48 = getitem_49 = getitem_50 = None
        getitem_245: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = _efficient_attention_backward_6[0]
        getitem_246: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = _efficient_attention_backward_6[1]
        getitem_247: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = _efficient_attention_backward_6[2];  _efficient_attention_backward_6 = None
        squeeze_30: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_247, 0);  getitem_247 = None
        squeeze_31: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_246, 0);  getitem_246 = None
        squeeze_32: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_245, 0);  getitem_245 = None
        permute_224: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(squeeze_30, [1, 0, 2]);  squeeze_30 = None
        permute_225: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(squeeze_31, [1, 0, 2]);  squeeze_31 = None
        permute_226: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(squeeze_32, [1, 0, 2]);  squeeze_32 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:116 in jagged_forward, code: values = va.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        permute_227: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_224, [1, 0, 2]);  permute_224 = None
        view_83: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_227, [sym_size_int, 384]);  permute_227 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:115 in jagged_forward, code: keys = ke.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        permute_228: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_225, [1, 0, 2]);  permute_225 = None
        view_84: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_228, [sym_size_int, 384]);  permute_228 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:114 in jagged_forward, code: queries = qu.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        permute_229: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_226, [1, 0, 2]);  permute_226 = None
        view_85: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_229, [sym_size_int_3, 384]);  permute_229 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:198 in forward, code: keys, values = self.kv(x_kv).chunk(2, dim=-1)
        copy_15: "f32[s1, 384][768, 1]cuda:0" = torch.ops.aten.copy.default(getitem_108, view_84);  getitem_108 = view_84 = None
        slice_scatter_15: "f32[s1, 768][768, 1]cuda:0" = torch.ops.aten.slice_scatter.default(full_25, copy_15, 1, 0, 384);  full_25 = copy_15 = None
        split_60 = torch.ops.aten.split.Tensor(slice_scatter_15, 384, 1)
        getitem_256: "f32[s1, 384][768, 1]cuda:0" = split_60[1];  split_60 = None
        copy_16: "f32[s1, 384][768, 1]cuda:0" = torch.ops.aten.copy.default(getitem_256, view_83);  getitem_256 = view_83 = None
        slice_scatter_16: "f32[s1, 768][768, 1]cuda:0" = torch.ops.aten.slice_scatter.default(slice_scatter_15, copy_16, 1, 384, 768);  slice_scatter_15 = copy_16 = None
        mm_92: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(slice_scatter_16, primals_40);  primals_40 = None
        permute_231: "f32[768, s1][1, 768]cuda:0" = torch.ops.aten.permute.default(slice_scatter_16, [1, 0]);  slice_scatter_16 = None
        mm_93: "f32[768, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_231, add_15);  permute_231 = add_15 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:198 in forward, code: keys, values = self.kv(x_kv).chunk(2, dim=-1)
        add_66: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_58, mm_92);  add_58 = mm_92 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:197 in forward, code: queries = self.q(x)
        mm_94: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(view_85, primals_39);  primals_39 = None
        permute_232: "f32[384, s6][1, 384]cuda:0" = torch.ops.aten.permute.default(view_85, [1, 0]);  view_85 = None
        mm_95: "f32[384, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_232, mul_51);  permute_232 = mul_51 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:79 in forward, code: x=self.do(self.cross_attn_norm(x)), x_kv=x_kv, padding_mask=padding_mask, is_causal=False, jagged=jagged, use_cache=not self.training and self.enable_kv_cache
        convert_element_type_38: "f32[s6, 384][384, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_13, torch.float32);  gt_13 = None
        mul_224: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_38, 1.4285714285714286);  convert_element_type_38 = None
        mul_225: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_94, mul_224);  mm_94 = mul_224 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_48: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(primals_30, rsqrt_9)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_226: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_225, mul_48);  mul_48 = None
        mul_227: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_225, primals_38);  mul_225 = primals_38 = None
        sum_21: "f32[1, 384][384, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_226, [0], True);  mul_226 = None
        unsqueeze_53: "f32[1, 1, 384][384, 384, 1]cuda:0" = torch.ops.aten.unsqueeze.default(sum_21, 0);  sum_21 = None
        view_86: "f32[384][1]cuda:0" = torch.ops.aten.view.default(unsqueeze_53, [384]);  unsqueeze_53 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_228: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_227, primals_30)
        mul_229: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_227, rsqrt_9);  mul_227 = None
        sum_22: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_228, [1], True);  mul_228 = None
        pow_41: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(rsqrt_9, 3);  rsqrt_9 = None
        mul_230: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mul.Scalar(sum_22, -0.5);  sum_22 = None
        mul_231: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_230, pow_41);  mul_230 = pow_41 = None
        expand_10: "f32[s6, 384][1, 0]cuda:0" = torch.ops.aten.expand.default(mul_231, [-1, 384]);  mul_231 = None
        div_10: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.div.Scalar(expand_10, 384);  expand_10 = None
        pow_42: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(primals_30, 1.0)
        mul_232: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Scalar(pow_42, 2.0);  pow_42 = None
        mul_233: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(div_10, mul_232);  div_10 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_67: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(mul_229, mul_233);  mul_229 = mul_233 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:76 in forward, code: attn_out = x + self.attention(self.do(self.attn_norm(x)), padding_mask=padding_mask, is_causal=is_causal, jagged=jagged, use_cache=not self.training and self.enable_kv_cache)
        add_68: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_67, add_65);  add_67 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:231 in forward, code: context_vec = self.proj(context_vec)
        mm_96: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(add_65, primals_37);  add_65 = primals_37 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:120 in jagged_forward, code: context_vec = F.scaled_dot_product_attention(
        squeeze_4: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_39, 0)
        permute_55: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(squeeze_4, [1, 0, 2]);  squeeze_4 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:123 in jagged_forward, code: context_vec = context_vec.transpose(1, 2).flatten(-2)
        permute_56: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_55, [1, 0, 2]);  permute_55 = None
        view_19: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_56, [sym_size_int_3, 384]);  permute_56 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:231 in forward, code: context_vec = self.proj(context_vec)
        mm_97: "f32[384, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_221, view_19);  permute_221 = view_19 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:123 in jagged_forward, code: context_vec = context_vec.transpose(1, 2).flatten(-2)
        view_87: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.view.default(mm_96, [sym_size_int_3, 6, 64]);  mm_96 = None
        permute_234: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(view_87, [1, 0, 2]);  view_87 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:120 in jagged_forward, code: context_vec = F.scaled_dot_product_attention(
        permute_235: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_234, [1, 0, 2]);  permute_234 = None
        unsqueeze_54: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(permute_235, 0);  permute_235 = None
        _efficient_attention_backward_7 = torch.ops.aten._efficient_attention_backward.default(unsqueeze_54, unsqueeze_12, unsqueeze_13, unsqueeze_14, None, getitem_39, convert_element_type_8, convert_element_type_8, sym_size_int_4, sym_size_int_4, getitem_40, 0.0, getitem_41, getitem_42, 1, False);  unsqueeze_54 = unsqueeze_12 = unsqueeze_13 = unsqueeze_14 = getitem_39 = convert_element_type_8 = sym_size_int_4 = getitem_40 = getitem_41 = getitem_42 = None
        getitem_261: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = _efficient_attention_backward_7[0]
        getitem_262: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = _efficient_attention_backward_7[1]
        getitem_263: "f32[1, s6, 6, 64][384*s6, 384, 64, 1]cuda:0" = _efficient_attention_backward_7[2];  _efficient_attention_backward_7 = None
        squeeze_33: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_263, 0);  getitem_263 = None
        squeeze_34: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_262, 0);  getitem_262 = None
        squeeze_35: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_261, 0);  getitem_261 = None
        permute_236: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(squeeze_33, [1, 0, 2]);  squeeze_33 = None
        permute_237: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(squeeze_34, [1, 0, 2]);  squeeze_34 = None
        permute_238: "f32[6, s6, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(squeeze_35, [1, 0, 2]);  squeeze_35 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:116 in jagged_forward, code: values = va.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        permute_239: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_236, [1, 0, 2]);  permute_236 = None
        view_88: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_239, [sym_size_int_3, 384]);  permute_239 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:115 in jagged_forward, code: keys = ke.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        permute_240: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_237, [1, 0, 2]);  permute_237 = None
        view_89: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_240, [sym_size_int_3, 384]);  permute_240 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:114 in jagged_forward, code: queries = qu.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        permute_241: "f32[s6, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_238, [1, 0, 2]);  permute_238 = None
        view_90: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_241, [sym_size_int_3, 384]);  permute_241 = sym_size_int_3 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:200 in forward, code: queries, keys, values = self.qkv(x).chunk(3, dim=-1)
        copy_17: "f32[s6, 384][1152, 1]cuda:0" = torch.ops.aten.copy.default(getitem_124, view_90);  getitem_124 = view_90 = None
        slice_scatter_17: "f32[s6, 1152][1152, 1]cuda:0" = torch.ops.aten.slice_scatter.default(full_26, copy_17, 1, 0, 384);  full_26 = copy_17 = None
        split_66 = torch.ops.aten.split.Tensor(slice_scatter_17, 384, 1)
        getitem_275: "f32[s6, 384][1152, 1]cuda:0" = split_66[1];  split_66 = None
        copy_18: "f32[s6, 384][1152, 1]cuda:0" = torch.ops.aten.copy.default(getitem_275, view_89);  getitem_275 = view_89 = None
        slice_scatter_18: "f32[s6, 1152][1152, 1]cuda:0" = torch.ops.aten.slice_scatter.default(slice_scatter_17, copy_18, 1, 384, 768);  slice_scatter_17 = copy_18 = None
        split_69 = torch.ops.aten.split.Tensor(slice_scatter_18, 384, 1)
        getitem_285: "f32[s6, 384][1152, 1]cuda:0" = split_69[2];  split_69 = None
        copy_19: "f32[s6, 384][1152, 1]cuda:0" = torch.ops.aten.copy.default(getitem_285, view_88);  getitem_285 = view_88 = None
        slice_scatter_19: "f32[s6, 1152][1152, 1]cuda:0" = torch.ops.aten.slice_scatter.default(slice_scatter_18, copy_19, 1, 768, 1152);  slice_scatter_18 = copy_19 = None
        mm_98: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(slice_scatter_19, primals_36);  primals_36 = None
        permute_243: "f32[1152, s6][1, 1152]cuda:0" = torch.ops.aten.permute.default(slice_scatter_19, [1, 0]);  slice_scatter_19 = None
        mm_99: "f32[1152, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_243, mul_47);  permute_243 = mul_47 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:76 in forward, code: attn_out = x + self.attention(self.do(self.attn_norm(x)), padding_mask=padding_mask, is_causal=is_causal, jagged=jagged, use_cache=not self.training and self.enable_kv_cache)
        convert_element_type_39: "f32[s6, 384][384, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_12, torch.float32);  gt_12 = None
        mul_234: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_39, 1.4285714285714286);  convert_element_type_39 = None
        mul_235: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_98, mul_234);  mm_98 = mul_234 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_44: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(primals_30, rsqrt_8)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_236: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_235, mul_44);  mul_44 = None
        mul_237: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_235, primals_35);  mul_235 = primals_35 = None
        sum_23: "f32[1, 384][384, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_236, [0], True);  mul_236 = None
        unsqueeze_55: "f32[1, 1, 384][384, 384, 1]cuda:0" = torch.ops.aten.unsqueeze.default(sum_23, 0);  sum_23 = None
        view_91: "f32[384][1]cuda:0" = torch.ops.aten.view.default(unsqueeze_55, [384]);  unsqueeze_55 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_238: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_237, primals_30);  primals_30 = None
        mul_239: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_237, rsqrt_8);  mul_237 = None
        sum_24: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_238, [1], True);  mul_238 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_69: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_68, mul_239);  add_68 = mul_239 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        pow_43: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(rsqrt_8, 3);  rsqrt_8 = None
        mul_240: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mul.Scalar(sum_24, -0.5);  sum_24 = None
        mul_241: "f32[s6, 1][1, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_240, pow_43);  mul_240 = pow_43 = None
        expand_11: "f32[s6, 384][1, 0]cuda:0" = torch.ops.aten.expand.default(mul_241, [-1, 384]);  mul_241 = None
        div_11: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.div.Scalar(expand_11, 384);  expand_11 = None
        mul_243: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(div_11, mul_232);  div_11 = mul_232 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_70: "f32[s6, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_69, mul_243);  add_69 = mul_243 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:81 in forward, code: proj_out = attn_out + self.ff(attn_out)
        convert_element_type_40: "f32[s1, 384][384, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_11, torch.float32);  gt_11 = None
        mul_244: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_40, 1.4285714285714286);  convert_element_type_40 = None
        mul_245: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(add_66, mul_244);  mul_244 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/encoder.py:36 in forward, code: return self.mlp(x)
        mm_100: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mm.default(mul_245, primals_29);  primals_29 = None
        permute_244: "f32[384, s1][1, 384]cuda:0" = torch.ops.aten.permute.default(mul_245, [1, 0]);  mul_245 = None
        mm_101: "f32[384, 1024][1024, 1]cuda:0" = torch.ops.aten.mm.default(permute_244, mul_41);  permute_244 = mul_41 = None
        convert_element_type_41: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_10, torch.float32);  gt_10 = None
        mul_246: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_41, 1.4285714285714286);  convert_element_type_41 = None
        mul_247: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_100, mul_246);  mm_100 = mul_246 = None
        sigmoid_12: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.sigmoid.default(mm_14)
        full_36: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.full.default([sym_size_int, 1024], 1, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        sub_4: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.sub.Tensor(full_36, sigmoid_12)
        mul_248: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_14, sub_4);  mm_14 = sub_4 = None
        add_71: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.add.Scalar(mul_248, 1);  mul_248 = None
        mul_249: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(sigmoid_12, add_71);  sigmoid_12 = add_71 = None
        mul_250: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_247, mul_249);  mul_247 = mul_249 = None
        mm_102: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(mul_250, primals_28);  primals_28 = None
        permute_246: "f32[1024, s1][1, 1024]cuda:0" = torch.ops.aten.permute.default(mul_250, [1, 0]);  mul_250 = None
        mm_103: "f32[1024, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_246, mul_38);  permute_246 = mul_38 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_37: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(add_13, rsqrt_7)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_251: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_102, mul_37);  mul_37 = None
        mul_252: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_102, primals_27);  mm_102 = primals_27 = None
        sum_25: "f32[1, 384][384, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_251, [0], True);  mul_251 = None
        unsqueeze_56: "f32[1, 1, 384][384, 384, 1]cuda:0" = torch.ops.aten.unsqueeze.default(sum_25, 0);  sum_25 = None
        view_92: "f32[384][1]cuda:0" = torch.ops.aten.view.default(unsqueeze_56, [384]);  unsqueeze_56 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_253: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_252, add_13)
        mul_254: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_252, rsqrt_7);  mul_252 = None
        sum_26: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_253, [1], True);  mul_253 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_72: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_66, mul_254);  add_66 = mul_254 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        pow_45: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(rsqrt_7, 3);  rsqrt_7 = None
        mul_255: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.mul.Scalar(sum_26, -0.5);  sum_26 = None
        mul_256: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_255, pow_45);  mul_255 = pow_45 = None
        expand_12: "f32[s1, 384][1, 0]cuda:0" = torch.ops.aten.expand.default(mul_256, [-1, 384]);  mul_256 = None
        div_12: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.div.Scalar(expand_12, 384);  expand_12 = None
        pow_46: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(add_13, 1.0);  add_13 = None
        mul_257: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Scalar(pow_46, 2.0);  pow_46 = None
        mul_258: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(div_12, mul_257);  div_12 = mul_257 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_73: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_72, mul_258);  add_72 = mul_258 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:231 in forward, code: context_vec = self.proj(context_vec)
        mm_104: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(add_73, primals_26);  primals_26 = None
        permute_247: "f32[384, s1][1, 384]cuda:0" = torch.ops.aten.permute.default(add_73, [1, 0])
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:120 in jagged_forward, code: context_vec = F.scaled_dot_product_attention(
        squeeze_3: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_30, 0)
        permute_43: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(squeeze_3, [1, 0, 2]);  squeeze_3 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:123 in jagged_forward, code: context_vec = context_vec.transpose(1, 2).flatten(-2)
        permute_44: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_43, [1, 0, 2]);  permute_43 = None
        view_15: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_44, [sym_size_int, 384]);  permute_44 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:231 in forward, code: context_vec = self.proj(context_vec)
        mm_105: "f32[384, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_247, view_15);  permute_247 = view_15 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:123 in jagged_forward, code: context_vec = context_vec.transpose(1, 2).flatten(-2)
        view_93: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.view.default(mm_104, [sym_size_int, 6, 64]);  mm_104 = None
        permute_248: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(view_93, [1, 0, 2]);  view_93 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:120 in jagged_forward, code: context_vec = F.scaled_dot_product_attention(
        permute_249: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_248, [1, 0, 2]);  permute_248 = None
        unsqueeze_57: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(permute_249, 0);  permute_249 = None
        _efficient_attention_backward_8 = torch.ops.aten._efficient_attention_backward.default(unsqueeze_57, unsqueeze_9, unsqueeze_10, unsqueeze_11, None, getitem_30, convert_element_type_6, convert_element_type_6, sym_size_int_1, sym_size_int_1, getitem_31, 0.0, getitem_32, getitem_33, 0, False);  unsqueeze_57 = unsqueeze_9 = unsqueeze_10 = unsqueeze_11 = getitem_30 = convert_element_type_6 = getitem_31 = getitem_32 = getitem_33 = None
        getitem_292: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = _efficient_attention_backward_8[0]
        getitem_293: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = _efficient_attention_backward_8[1]
        getitem_294: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = _efficient_attention_backward_8[2];  _efficient_attention_backward_8 = None
        squeeze_36: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_294, 0);  getitem_294 = None
        squeeze_37: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_293, 0);  getitem_293 = None
        squeeze_38: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_292, 0);  getitem_292 = None
        permute_250: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(squeeze_36, [1, 0, 2]);  squeeze_36 = None
        permute_251: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(squeeze_37, [1, 0, 2]);  squeeze_37 = None
        permute_252: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(squeeze_38, [1, 0, 2]);  squeeze_38 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:116 in jagged_forward, code: values = va.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        permute_253: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_250, [1, 0, 2]);  permute_250 = None
        view_94: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_253, [sym_size_int, 384]);  permute_253 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:115 in jagged_forward, code: keys = ke.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        permute_254: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_251, [1, 0, 2]);  permute_251 = None
        view_95: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_254, [sym_size_int, 384]);  permute_254 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:114 in jagged_forward, code: queries = qu.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        permute_255: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_252, [1, 0, 2]);  permute_252 = None
        view_96: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_255, [sym_size_int, 384]);  permute_255 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:200 in forward, code: queries, keys, values = self.qkv(x).chunk(3, dim=-1)
        full_37: "f32[s1, 1152][1152, 1]cuda:0" = torch.ops.aten.full.default([sym_size_int, 1152], 0, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        split_72 = torch.ops.aten.split.Tensor(full_37, 384, 1)
        getitem_296: "f32[s1, 384][1152, 1]cuda:0" = split_72[0];  split_72 = None
        copy_20: "f32[s1, 384][1152, 1]cuda:0" = torch.ops.aten.copy.default(getitem_296, view_96);  view_96 = None
        slice_scatter_20: "f32[s1, 1152][1152, 1]cuda:0" = torch.ops.aten.slice_scatter.default(full_37, copy_20, 1, 0, 384);  copy_20 = None
        split_75 = torch.ops.aten.split.Tensor(slice_scatter_20, 384, 1)
        getitem_306: "f32[s1, 384][1152, 1]cuda:0" = split_75[1];  split_75 = None
        copy_21: "f32[s1, 384][1152, 1]cuda:0" = torch.ops.aten.copy.default(getitem_306, view_95);  getitem_306 = view_95 = None
        slice_scatter_21: "f32[s1, 1152][1152, 1]cuda:0" = torch.ops.aten.slice_scatter.default(slice_scatter_20, copy_21, 1, 384, 768);  slice_scatter_20 = copy_21 = None
        split_78 = torch.ops.aten.split.Tensor(slice_scatter_21, 384, 1)
        getitem_316: "f32[s1, 384][1152, 1]cuda:0" = split_78[2];  split_78 = None
        copy_22: "f32[s1, 384][1152, 1]cuda:0" = torch.ops.aten.copy.default(getitem_316, view_94);  getitem_316 = view_94 = None
        slice_scatter_22: "f32[s1, 1152][1152, 1]cuda:0" = torch.ops.aten.slice_scatter.default(slice_scatter_21, copy_22, 1, 768, 1152);  slice_scatter_21 = copy_22 = None
        mm_106: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(slice_scatter_22, primals_25);  primals_25 = None
        permute_257: "f32[1152, s1][1, 1152]cuda:0" = torch.ops.aten.permute.default(slice_scatter_22, [1, 0]);  slice_scatter_22 = None
        mm_107: "f32[1152, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_257, mul_36);  permute_257 = mul_36 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:76 in forward, code: attn_out = x + self.attention(self.do(self.attn_norm(x)), padding_mask=padding_mask, is_causal=is_causal, jagged=jagged, use_cache=not self.training and self.enable_kv_cache)
        convert_element_type_42: "f32[s1, 384][384, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_9, torch.float32);  gt_9 = None
        mul_259: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_42, 1.4285714285714286);  convert_element_type_42 = None
        mul_260: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_106, mul_259);  mm_106 = mul_259 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_33: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(add_11, rsqrt_6)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_261: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_260, mul_33);  mul_33 = None
        mul_262: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_260, primals_24);  mul_260 = primals_24 = None
        sum_27: "f32[1, 384][384, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_261, [0], True);  mul_261 = None
        unsqueeze_58: "f32[1, 1, 384][384, 384, 1]cuda:0" = torch.ops.aten.unsqueeze.default(sum_27, 0);  sum_27 = None
        view_97: "f32[384][1]cuda:0" = torch.ops.aten.view.default(unsqueeze_58, [384]);  unsqueeze_58 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_263: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_262, add_11)
        mul_264: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_262, rsqrt_6);  mul_262 = None
        sum_28: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_263, [1], True);  mul_263 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_74: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_73, mul_264);  add_73 = mul_264 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        pow_47: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(rsqrt_6, 3);  rsqrt_6 = None
        mul_265: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.mul.Scalar(sum_28, -0.5);  sum_28 = None
        mul_266: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_265, pow_47);  mul_265 = pow_47 = None
        expand_13: "f32[s1, 384][1, 0]cuda:0" = torch.ops.aten.expand.default(mul_266, [-1, 384]);  mul_266 = None
        div_13: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.div.Scalar(expand_13, 384);  expand_13 = None
        pow_48: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(add_11, 1.0);  add_11 = None
        mul_267: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Scalar(pow_48, 2.0);  pow_48 = None
        mul_268: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(div_13, mul_267);  div_13 = mul_267 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_75: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_74, mul_268);  add_74 = mul_268 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:81 in forward, code: proj_out = attn_out + self.ff(attn_out)
        convert_element_type_43: "f32[s1, 384][384, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_8, torch.float32);  gt_8 = None
        mul_269: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_43, 1.4285714285714286);  convert_element_type_43 = None
        mul_270: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(add_75, mul_269);  mul_269 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/encoder.py:36 in forward, code: return self.mlp(x)
        mm_108: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mm.default(mul_270, primals_23);  primals_23 = None
        permute_258: "f32[384, s1][1, 384]cuda:0" = torch.ops.aten.permute.default(mul_270, [1, 0]);  mul_270 = None
        mm_109: "f32[384, 1024][1024, 1]cuda:0" = torch.ops.aten.mm.default(permute_258, mul_30);  permute_258 = mul_30 = None
        convert_element_type_44: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_7, torch.float32);  gt_7 = None
        mul_271: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_44, 1.4285714285714286);  convert_element_type_44 = None
        mul_272: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_108, mul_271);  mm_108 = mul_271 = None
        sigmoid_13: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.sigmoid.default(mm_10)
        sub_5: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.sub.Tensor(full_36, sigmoid_13)
        mul_273: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_10, sub_5);  mm_10 = sub_5 = None
        add_76: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.add.Scalar(mul_273, 1);  mul_273 = None
        mul_274: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(sigmoid_13, add_76);  sigmoid_13 = add_76 = None
        mul_275: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_272, mul_274);  mul_272 = mul_274 = None
        mm_110: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(mul_275, primals_22);  primals_22 = None
        permute_260: "f32[1024, s1][1, 1024]cuda:0" = torch.ops.aten.permute.default(mul_275, [1, 0]);  mul_275 = None
        mm_111: "f32[1024, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_260, mul_27);  permute_260 = mul_27 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_26: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(add_9, rsqrt_5)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_276: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_110, mul_26);  mul_26 = None
        mul_277: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_110, primals_21);  mm_110 = primals_21 = None
        sum_29: "f32[1, 384][384, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_276, [0], True);  mul_276 = None
        unsqueeze_59: "f32[1, 1, 384][384, 384, 1]cuda:0" = torch.ops.aten.unsqueeze.default(sum_29, 0);  sum_29 = None
        view_98: "f32[384][1]cuda:0" = torch.ops.aten.view.default(unsqueeze_59, [384]);  unsqueeze_59 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_278: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_277, add_9)
        mul_279: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_277, rsqrt_5);  mul_277 = None
        sum_30: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_278, [1], True);  mul_278 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_77: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_75, mul_279);  add_75 = mul_279 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        pow_49: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(rsqrt_5, 3);  rsqrt_5 = None
        mul_280: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.mul.Scalar(sum_30, -0.5);  sum_30 = None
        mul_281: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_280, pow_49);  mul_280 = pow_49 = None
        expand_14: "f32[s1, 384][1, 0]cuda:0" = torch.ops.aten.expand.default(mul_281, [-1, 384]);  mul_281 = None
        div_14: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.div.Scalar(expand_14, 384);  expand_14 = None
        pow_50: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(add_9, 1.0);  add_9 = None
        mul_282: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Scalar(pow_50, 2.0);  pow_50 = None
        mul_283: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(div_14, mul_282);  div_14 = mul_282 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_78: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_77, mul_283);  add_77 = mul_283 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:231 in forward, code: context_vec = self.proj(context_vec)
        mm_112: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(add_78, primals_20);  primals_20 = None
        permute_261: "f32[384, s1][1, 384]cuda:0" = torch.ops.aten.permute.default(add_78, [1, 0])
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:120 in jagged_forward, code: context_vec = F.scaled_dot_product_attention(
        squeeze_2: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_21, 0)
        permute_31: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(squeeze_2, [1, 0, 2]);  squeeze_2 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:123 in jagged_forward, code: context_vec = context_vec.transpose(1, 2).flatten(-2)
        permute_32: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_31, [1, 0, 2]);  permute_31 = None
        view_11: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_32, [sym_size_int, 384]);  permute_32 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:231 in forward, code: context_vec = self.proj(context_vec)
        mm_113: "f32[384, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_261, view_11);  permute_261 = view_11 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:123 in jagged_forward, code: context_vec = context_vec.transpose(1, 2).flatten(-2)
        view_99: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.view.default(mm_112, [sym_size_int, 6, 64]);  mm_112 = None
        permute_262: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(view_99, [1, 0, 2]);  view_99 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:120 in jagged_forward, code: context_vec = F.scaled_dot_product_attention(
        permute_263: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_262, [1, 0, 2]);  permute_262 = None
        unsqueeze_60: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(permute_263, 0);  permute_263 = None
        _efficient_attention_backward_9 = torch.ops.aten._efficient_attention_backward.default(unsqueeze_60, unsqueeze_6, unsqueeze_7, unsqueeze_8, None, getitem_21, convert_element_type_4, convert_element_type_4, sym_size_int_1, sym_size_int_1, getitem_22, 0.0, getitem_23, getitem_24, 0, False);  unsqueeze_60 = unsqueeze_6 = unsqueeze_7 = unsqueeze_8 = getitem_21 = convert_element_type_4 = getitem_22 = getitem_23 = getitem_24 = None
        getitem_323: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = _efficient_attention_backward_9[0]
        getitem_324: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = _efficient_attention_backward_9[1]
        getitem_325: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = _efficient_attention_backward_9[2];  _efficient_attention_backward_9 = None
        squeeze_39: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_325, 0);  getitem_325 = None
        squeeze_40: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_324, 0);  getitem_324 = None
        squeeze_41: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_323, 0);  getitem_323 = None
        permute_264: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(squeeze_39, [1, 0, 2]);  squeeze_39 = None
        permute_265: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(squeeze_40, [1, 0, 2]);  squeeze_40 = None
        permute_266: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(squeeze_41, [1, 0, 2]);  squeeze_41 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:116 in jagged_forward, code: values = va.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        permute_267: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_264, [1, 0, 2]);  permute_264 = None
        view_100: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_267, [sym_size_int, 384]);  permute_267 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:115 in jagged_forward, code: keys = ke.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        permute_268: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_265, [1, 0, 2]);  permute_265 = None
        view_101: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_268, [sym_size_int, 384]);  permute_268 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:114 in jagged_forward, code: queries = qu.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        permute_269: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_266, [1, 0, 2]);  permute_266 = None
        view_102: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_269, [sym_size_int, 384]);  permute_269 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:200 in forward, code: queries, keys, values = self.qkv(x).chunk(3, dim=-1)
        copy_23: "f32[s1, 384][1152, 1]cuda:0" = torch.ops.aten.copy.default(getitem_296, view_102);  view_102 = None
        slice_scatter_23: "f32[s1, 1152][1152, 1]cuda:0" = torch.ops.aten.slice_scatter.default(full_37, copy_23, 1, 0, 384);  copy_23 = None
        split_84 = torch.ops.aten.split.Tensor(slice_scatter_23, 384, 1)
        getitem_337: "f32[s1, 384][1152, 1]cuda:0" = split_84[1];  split_84 = None
        copy_24: "f32[s1, 384][1152, 1]cuda:0" = torch.ops.aten.copy.default(getitem_337, view_101);  getitem_337 = view_101 = None
        slice_scatter_24: "f32[s1, 1152][1152, 1]cuda:0" = torch.ops.aten.slice_scatter.default(slice_scatter_23, copy_24, 1, 384, 768);  slice_scatter_23 = copy_24 = None
        split_87 = torch.ops.aten.split.Tensor(slice_scatter_24, 384, 1)
        getitem_347: "f32[s1, 384][1152, 1]cuda:0" = split_87[2];  split_87 = None
        copy_25: "f32[s1, 384][1152, 1]cuda:0" = torch.ops.aten.copy.default(getitem_347, view_100);  getitem_347 = view_100 = None
        slice_scatter_25: "f32[s1, 1152][1152, 1]cuda:0" = torch.ops.aten.slice_scatter.default(slice_scatter_24, copy_25, 1, 768, 1152);  slice_scatter_24 = copy_25 = None
        mm_114: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(slice_scatter_25, primals_19);  primals_19 = None
        permute_271: "f32[1152, s1][1, 1152]cuda:0" = torch.ops.aten.permute.default(slice_scatter_25, [1, 0]);  slice_scatter_25 = None
        mm_115: "f32[1152, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_271, mul_25);  permute_271 = mul_25 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:76 in forward, code: attn_out = x + self.attention(self.do(self.attn_norm(x)), padding_mask=padding_mask, is_causal=is_causal, jagged=jagged, use_cache=not self.training and self.enable_kv_cache)
        convert_element_type_45: "f32[s1, 384][384, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_6, torch.float32);  gt_6 = None
        mul_284: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_45, 1.4285714285714286);  convert_element_type_45 = None
        mul_285: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_114, mul_284);  mm_114 = mul_284 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_22: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(add_7, rsqrt_4)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_286: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_285, mul_22);  mul_22 = None
        mul_287: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_285, primals_18);  mul_285 = primals_18 = None
        sum_31: "f32[1, 384][384, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_286, [0], True);  mul_286 = None
        unsqueeze_61: "f32[1, 1, 384][384, 384, 1]cuda:0" = torch.ops.aten.unsqueeze.default(sum_31, 0);  sum_31 = None
        view_103: "f32[384][1]cuda:0" = torch.ops.aten.view.default(unsqueeze_61, [384]);  unsqueeze_61 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_288: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_287, add_7)
        mul_289: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_287, rsqrt_4);  mul_287 = None
        sum_32: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_288, [1], True);  mul_288 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_79: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_78, mul_289);  add_78 = mul_289 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        pow_51: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(rsqrt_4, 3);  rsqrt_4 = None
        mul_290: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.mul.Scalar(sum_32, -0.5);  sum_32 = None
        mul_291: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_290, pow_51);  mul_290 = pow_51 = None
        expand_15: "f32[s1, 384][1, 0]cuda:0" = torch.ops.aten.expand.default(mul_291, [-1, 384]);  mul_291 = None
        div_15: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.div.Scalar(expand_15, 384);  expand_15 = None
        pow_52: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(add_7, 1.0);  add_7 = None
        mul_292: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Scalar(pow_52, 2.0);  pow_52 = None
        mul_293: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(div_15, mul_292);  div_15 = mul_292 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_80: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_79, mul_293);  add_79 = mul_293 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:81 in forward, code: proj_out = attn_out + self.ff(attn_out)
        convert_element_type_46: "f32[s1, 384][384, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_5, torch.float32);  gt_5 = None
        mul_294: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_46, 1.4285714285714286);  convert_element_type_46 = None
        mul_295: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(add_80, mul_294);  mul_294 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/encoder.py:36 in forward, code: return self.mlp(x)
        mm_116: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mm.default(mul_295, primals_17);  primals_17 = None
        permute_272: "f32[384, s1][1, 384]cuda:0" = torch.ops.aten.permute.default(mul_295, [1, 0]);  mul_295 = None
        mm_117: "f32[384, 1024][1024, 1]cuda:0" = torch.ops.aten.mm.default(permute_272, mul_19);  permute_272 = mul_19 = None
        convert_element_type_47: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_4, torch.float32);  gt_4 = None
        mul_296: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_47, 1.4285714285714286);  convert_element_type_47 = None
        mul_297: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_116, mul_296);  mm_116 = mul_296 = None
        sigmoid_14: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.sigmoid.default(mm_6)
        sub_6: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.sub.Tensor(full_36, sigmoid_14)
        mul_298: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_6, sub_6);  mm_6 = sub_6 = None
        add_81: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.add.Scalar(mul_298, 1);  mul_298 = None
        mul_299: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(sigmoid_14, add_81);  sigmoid_14 = add_81 = None
        mul_300: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_297, mul_299);  mul_297 = mul_299 = None
        mm_118: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(mul_300, primals_16);  primals_16 = None
        permute_274: "f32[1024, s1][1, 1024]cuda:0" = torch.ops.aten.permute.default(mul_300, [1, 0]);  mul_300 = None
        mm_119: "f32[1024, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_274, mul_16);  permute_274 = mul_16 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_15: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(add_5, rsqrt_3)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_301: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_118, mul_15);  mul_15 = None
        mul_302: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_118, primals_15);  mm_118 = primals_15 = None
        sum_33: "f32[1, 384][384, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_301, [0], True);  mul_301 = None
        unsqueeze_62: "f32[1, 1, 384][384, 384, 1]cuda:0" = torch.ops.aten.unsqueeze.default(sum_33, 0);  sum_33 = None
        view_104: "f32[384][1]cuda:0" = torch.ops.aten.view.default(unsqueeze_62, [384]);  unsqueeze_62 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_303: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_302, add_5)
        mul_304: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_302, rsqrt_3);  mul_302 = None
        sum_34: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_303, [1], True);  mul_303 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_82: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_80, mul_304);  add_80 = mul_304 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        pow_53: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(rsqrt_3, 3);  rsqrt_3 = None
        mul_305: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.mul.Scalar(sum_34, -0.5);  sum_34 = None
        mul_306: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_305, pow_53);  mul_305 = pow_53 = None
        expand_16: "f32[s1, 384][1, 0]cuda:0" = torch.ops.aten.expand.default(mul_306, [-1, 384]);  mul_306 = None
        div_16: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.div.Scalar(expand_16, 384);  expand_16 = None
        pow_54: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(add_5, 1.0);  add_5 = None
        mul_307: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Scalar(pow_54, 2.0);  pow_54 = None
        mul_308: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(div_16, mul_307);  div_16 = mul_307 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_83: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_82, mul_308);  add_82 = mul_308 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:231 in forward, code: context_vec = self.proj(context_vec)
        mm_120: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(add_83, primals_14);  primals_14 = None
        permute_275: "f32[384, s1][1, 384]cuda:0" = torch.ops.aten.permute.default(add_83, [1, 0])
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:120 in jagged_forward, code: context_vec = F.scaled_dot_product_attention(
        squeeze_1: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_12, 0)
        permute_19: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(squeeze_1, [1, 0, 2]);  squeeze_1 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:123 in jagged_forward, code: context_vec = context_vec.transpose(1, 2).flatten(-2)
        permute_20: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_19, [1, 0, 2]);  permute_19 = None
        view_7: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_20, [sym_size_int, 384]);  permute_20 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:231 in forward, code: context_vec = self.proj(context_vec)
        mm_121: "f32[384, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_275, view_7);  permute_275 = view_7 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:123 in jagged_forward, code: context_vec = context_vec.transpose(1, 2).flatten(-2)
        view_105: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.view.default(mm_120, [sym_size_int, 6, 64]);  mm_120 = None
        permute_276: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(view_105, [1, 0, 2]);  view_105 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:120 in jagged_forward, code: context_vec = F.scaled_dot_product_attention(
        permute_277: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_276, [1, 0, 2]);  permute_276 = None
        unsqueeze_63: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(permute_277, 0);  permute_277 = None
        _efficient_attention_backward_10 = torch.ops.aten._efficient_attention_backward.default(unsqueeze_63, unsqueeze_3, unsqueeze_4, unsqueeze_5, None, getitem_12, convert_element_type_2, convert_element_type_2, sym_size_int_1, sym_size_int_1, getitem_13, 0.0, getitem_14, getitem_15, 0, False);  unsqueeze_63 = unsqueeze_3 = unsqueeze_4 = unsqueeze_5 = getitem_12 = convert_element_type_2 = getitem_13 = getitem_14 = getitem_15 = None
        getitem_354: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = _efficient_attention_backward_10[0]
        getitem_355: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = _efficient_attention_backward_10[1]
        getitem_356: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = _efficient_attention_backward_10[2];  _efficient_attention_backward_10 = None
        squeeze_42: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_356, 0);  getitem_356 = None
        squeeze_43: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_355, 0);  getitem_355 = None
        squeeze_44: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_354, 0);  getitem_354 = None
        permute_278: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(squeeze_42, [1, 0, 2]);  squeeze_42 = None
        permute_279: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(squeeze_43, [1, 0, 2]);  squeeze_43 = None
        permute_280: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(squeeze_44, [1, 0, 2]);  squeeze_44 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:116 in jagged_forward, code: values = va.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        permute_281: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_278, [1, 0, 2]);  permute_278 = None
        view_106: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_281, [sym_size_int, 384]);  permute_281 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:115 in jagged_forward, code: keys = ke.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        permute_282: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_279, [1, 0, 2]);  permute_279 = None
        view_107: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_282, [sym_size_int, 384]);  permute_282 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:114 in jagged_forward, code: queries = qu.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        permute_283: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_280, [1, 0, 2]);  permute_280 = None
        view_108: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_283, [sym_size_int, 384]);  permute_283 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:200 in forward, code: queries, keys, values = self.qkv(x).chunk(3, dim=-1)
        copy_26: "f32[s1, 384][1152, 1]cuda:0" = torch.ops.aten.copy.default(getitem_296, view_108);  view_108 = None
        slice_scatter_26: "f32[s1, 1152][1152, 1]cuda:0" = torch.ops.aten.slice_scatter.default(full_37, copy_26, 1, 0, 384);  copy_26 = None
        split_93 = torch.ops.aten.split.Tensor(slice_scatter_26, 384, 1)
        getitem_368: "f32[s1, 384][1152, 1]cuda:0" = split_93[1];  split_93 = None
        copy_27: "f32[s1, 384][1152, 1]cuda:0" = torch.ops.aten.copy.default(getitem_368, view_107);  getitem_368 = view_107 = None
        slice_scatter_27: "f32[s1, 1152][1152, 1]cuda:0" = torch.ops.aten.slice_scatter.default(slice_scatter_26, copy_27, 1, 384, 768);  slice_scatter_26 = copy_27 = None
        split_96 = torch.ops.aten.split.Tensor(slice_scatter_27, 384, 1)
        getitem_378: "f32[s1, 384][1152, 1]cuda:0" = split_96[2];  split_96 = None
        copy_28: "f32[s1, 384][1152, 1]cuda:0" = torch.ops.aten.copy.default(getitem_378, view_106);  getitem_378 = view_106 = None
        slice_scatter_28: "f32[s1, 1152][1152, 1]cuda:0" = torch.ops.aten.slice_scatter.default(slice_scatter_27, copy_28, 1, 768, 1152);  slice_scatter_27 = copy_28 = None
        mm_122: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(slice_scatter_28, primals_13);  primals_13 = None
        permute_285: "f32[1152, s1][1, 1152]cuda:0" = torch.ops.aten.permute.default(slice_scatter_28, [1, 0]);  slice_scatter_28 = None
        mm_123: "f32[1152, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_285, mul_14);  permute_285 = mul_14 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:76 in forward, code: attn_out = x + self.attention(self.do(self.attn_norm(x)), padding_mask=padding_mask, is_causal=is_causal, jagged=jagged, use_cache=not self.training and self.enable_kv_cache)
        convert_element_type_48: "f32[s1, 384][384, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_3, torch.float32);  gt_3 = None
        mul_309: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_48, 1.4285714285714286);  convert_element_type_48 = None
        mul_310: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_122, mul_309);  mm_122 = mul_309 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_11: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(add_3, rsqrt_2)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_311: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_310, mul_11);  mul_11 = None
        mul_312: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_310, primals_12);  mul_310 = primals_12 = None
        sum_35: "f32[1, 384][384, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_311, [0], True);  mul_311 = None
        unsqueeze_64: "f32[1, 1, 384][384, 384, 1]cuda:0" = torch.ops.aten.unsqueeze.default(sum_35, 0);  sum_35 = None
        view_109: "f32[384][1]cuda:0" = torch.ops.aten.view.default(unsqueeze_64, [384]);  unsqueeze_64 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_313: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_312, add_3)
        mul_314: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_312, rsqrt_2);  mul_312 = None
        sum_36: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_313, [1], True);  mul_313 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_84: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_83, mul_314);  add_83 = mul_314 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        pow_55: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(rsqrt_2, 3);  rsqrt_2 = None
        mul_315: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.mul.Scalar(sum_36, -0.5);  sum_36 = None
        mul_316: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_315, pow_55);  mul_315 = pow_55 = None
        expand_17: "f32[s1, 384][1, 0]cuda:0" = torch.ops.aten.expand.default(mul_316, [-1, 384]);  mul_316 = None
        div_17: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.div.Scalar(expand_17, 384);  expand_17 = None
        pow_56: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(add_3, 1.0);  add_3 = None
        mul_317: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Scalar(pow_56, 2.0);  pow_56 = None
        mul_318: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(div_17, mul_317);  div_17 = mul_317 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_85: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_84, mul_318);  add_84 = mul_318 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:81 in forward, code: proj_out = attn_out + self.ff(attn_out)
        convert_element_type_49: "f32[s1, 384][384, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_2, torch.float32);  gt_2 = None
        mul_319: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_49, 1.4285714285714286);  convert_element_type_49 = None
        mul_320: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(add_85, mul_319);  mul_319 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/encoder.py:36 in forward, code: return self.mlp(x)
        mm_124: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mm.default(mul_320, primals_11);  primals_11 = None
        permute_286: "f32[384, s1][1, 384]cuda:0" = torch.ops.aten.permute.default(mul_320, [1, 0]);  mul_320 = None
        mm_125: "f32[384, 1024][1024, 1]cuda:0" = torch.ops.aten.mm.default(permute_286, mul_8);  permute_286 = mul_8 = None
        convert_element_type_50: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt_1, torch.float32);  gt_1 = None
        mul_321: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_50, 1.4285714285714286);  convert_element_type_50 = None
        mul_322: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_124, mul_321);  mm_124 = mul_321 = None
        sigmoid_15: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.sigmoid.default(mm_2)
        sub_7: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.sub.Tensor(full_36, sigmoid_15);  full_36 = None
        mul_323: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_2, sub_7);  mm_2 = sub_7 = None
        add_86: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.add.Scalar(mul_323, 1);  mul_323 = None
        mul_324: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(sigmoid_15, add_86);  sigmoid_15 = add_86 = None
        mul_325: "f32[s1, 1024][1024, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_322, mul_324);  mul_322 = mul_324 = None
        mm_126: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(mul_325, primals_10);  primals_10 = None
        permute_288: "f32[1024, s1][1, 1024]cuda:0" = torch.ops.aten.permute.default(mul_325, [1, 0]);  mul_325 = None
        mm_127: "f32[1024, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_288, mul_5);  permute_288 = mul_5 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:76 in forward, code: attn_out = x + self.attention(self.do(self.attn_norm(x)), padding_mask=padding_mask, is_causal=is_causal, jagged=jagged, use_cache=not self.training and self.enable_kv_cache)
        add_1: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(primals_1, mm_1);  mm_1 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_4: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(add_1, rsqrt_1)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_326: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_126, mul_4);  mul_4 = None
        mul_327: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_126, primals_9);  mm_126 = primals_9 = None
        sum_37: "f32[1, 384][384, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_326, [0], True);  mul_326 = None
        unsqueeze_65: "f32[1, 1, 384][384, 384, 1]cuda:0" = torch.ops.aten.unsqueeze.default(sum_37, 0);  sum_37 = None
        view_110: "f32[384][1]cuda:0" = torch.ops.aten.view.default(unsqueeze_65, [384]);  unsqueeze_65 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_328: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_327, add_1)
        mul_329: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_327, rsqrt_1);  mul_327 = None
        sum_38: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_328, [1], True);  mul_328 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_87: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_85, mul_329);  add_85 = mul_329 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        pow_57: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(rsqrt_1, 3);  rsqrt_1 = None
        mul_330: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.mul.Scalar(sum_38, -0.5);  sum_38 = None
        mul_331: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_330, pow_57);  mul_330 = pow_57 = None
        expand_18: "f32[s1, 384][1, 0]cuda:0" = torch.ops.aten.expand.default(mul_331, [-1, 384]);  mul_331 = None
        div_18: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.div.Scalar(expand_18, 384);  expand_18 = None
        pow_58: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(add_1, 1.0);  add_1 = None
        mul_332: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Scalar(pow_58, 2.0);  pow_58 = None
        mul_333: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(div_18, mul_332);  div_18 = mul_332 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_88: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_87, mul_333);  add_87 = mul_333 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:231 in forward, code: context_vec = self.proj(context_vec)
        mm_128: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(add_88, primals_8);  primals_8 = None
        permute_289: "f32[384, s1][1, 384]cuda:0" = torch.ops.aten.permute.default(add_88, [1, 0])
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:120 in jagged_forward, code: context_vec = F.scaled_dot_product_attention(
        squeeze: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_3, 0)
        permute_7: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(squeeze, [1, 0, 2]);  squeeze = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:123 in jagged_forward, code: context_vec = context_vec.transpose(1, 2).flatten(-2)
        permute_8: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_7, [1, 0, 2]);  permute_7 = None
        view_3: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_8, [sym_size_int, 384]);  permute_8 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:231 in forward, code: context_vec = self.proj(context_vec)
        mm_129: "f32[384, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_289, view_3);  permute_289 = view_3 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:123 in jagged_forward, code: context_vec = context_vec.transpose(1, 2).flatten(-2)
        view_111: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.view.default(mm_128, [sym_size_int, 6, 64]);  mm_128 = None
        permute_290: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(view_111, [1, 0, 2]);  view_111 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:120 in jagged_forward, code: context_vec = F.scaled_dot_product_attention(
        permute_291: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_290, [1, 0, 2]);  permute_290 = None
        unsqueeze_66: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(permute_291, 0);  permute_291 = None
        _efficient_attention_backward_11 = torch.ops.aten._efficient_attention_backward.default(unsqueeze_66, unsqueeze, unsqueeze_1, unsqueeze_2, None, getitem_3, convert_element_type, convert_element_type, sym_size_int_1, sym_size_int_1, getitem_4, 0.0, getitem_5, getitem_6, 0, False);  unsqueeze_66 = unsqueeze = unsqueeze_1 = unsqueeze_2 = getitem_3 = convert_element_type = sym_size_int_1 = getitem_4 = getitem_5 = getitem_6 = None
        getitem_385: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = _efficient_attention_backward_11[0]
        getitem_386: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = _efficient_attention_backward_11[1]
        getitem_387: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = _efficient_attention_backward_11[2];  _efficient_attention_backward_11 = None
        squeeze_45: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_387, 0);  getitem_387 = None
        squeeze_46: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_386, 0);  getitem_386 = None
        squeeze_47: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_385, 0);  getitem_385 = None
        permute_292: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(squeeze_45, [1, 0, 2]);  squeeze_45 = None
        permute_293: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(squeeze_46, [1, 0, 2]);  squeeze_46 = None
        permute_294: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(squeeze_47, [1, 0, 2]);  squeeze_47 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:116 in jagged_forward, code: values = va.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        permute_295: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_292, [1, 0, 2]);  permute_292 = None
        view_112: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_295, [sym_size_int, 384]);  permute_295 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:115 in jagged_forward, code: keys = ke.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        permute_296: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_293, [1, 0, 2]);  permute_293 = None
        view_113: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_296, [sym_size_int, 384]);  permute_296 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:114 in jagged_forward, code: queries = qu.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        permute_297: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_294, [1, 0, 2]);  permute_294 = None
        view_114: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_297, [sym_size_int, 384]);  permute_297 = sym_size_int = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:200 in forward, code: queries, keys, values = self.qkv(x).chunk(3, dim=-1)
        copy_29: "f32[s1, 384][1152, 1]cuda:0" = torch.ops.aten.copy.default(getitem_296, view_114);  getitem_296 = view_114 = None
        slice_scatter_29: "f32[s1, 1152][1152, 1]cuda:0" = torch.ops.aten.slice_scatter.default(full_37, copy_29, 1, 0, 384);  full_37 = copy_29 = None
        split_102 = torch.ops.aten.split.Tensor(slice_scatter_29, 384, 1)
        getitem_399: "f32[s1, 384][1152, 1]cuda:0" = split_102[1];  split_102 = None
        copy_30: "f32[s1, 384][1152, 1]cuda:0" = torch.ops.aten.copy.default(getitem_399, view_113);  getitem_399 = view_113 = None
        slice_scatter_30: "f32[s1, 1152][1152, 1]cuda:0" = torch.ops.aten.slice_scatter.default(slice_scatter_29, copy_30, 1, 384, 768);  slice_scatter_29 = copy_30 = None
        split_105 = torch.ops.aten.split.Tensor(slice_scatter_30, 384, 1)
        getitem_409: "f32[s1, 384][1152, 1]cuda:0" = split_105[2];  split_105 = None
        copy_31: "f32[s1, 384][1152, 1]cuda:0" = torch.ops.aten.copy.default(getitem_409, view_112);  getitem_409 = view_112 = None
        slice_scatter_31: "f32[s1, 1152][1152, 1]cuda:0" = torch.ops.aten.slice_scatter.default(slice_scatter_30, copy_31, 1, 768, 1152);  slice_scatter_30 = copy_31 = None
        mm_130: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(slice_scatter_31, primals_7);  primals_7 = None
        permute_299: "f32[1152, s1][1, 1152]cuda:0" = torch.ops.aten.permute.default(slice_scatter_31, [1, 0]);  slice_scatter_31 = None
        mm_131: "f32[1152, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_299, mul_3);  permute_299 = mul_3 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/model.py:76 in forward, code: attn_out = x + self.attention(self.do(self.attn_norm(x)), padding_mask=padding_mask, is_causal=is_causal, jagged=jagged, use_cache=not self.training and self.enable_kv_cache)
        convert_element_type_51: "f32[s1, 384][384, 1]cuda:0" = torch.ops.prims.convert_element_type.default(gt, torch.float32);  gt = None
        mul_334: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(convert_element_type_51, 1.4285714285714286);  convert_element_type_51 = None
        mul_335: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mm_130, mul_334);  mm_130 = mul_334 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(primals_1, rsqrt)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:32 in forward, code: return output * self.weight
        mul_336: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_335, mul);  mul = None
        mul_337: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_335, primals_6);  mul_335 = primals_6 = None
        sum_39: "f32[1, 384][384, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_336, [0], True);  mul_336 = None
        unsqueeze_67: "f32[1, 1, 384][384, 384, 1]cuda:0" = torch.ops.aten.unsqueeze.default(sum_39, 0);  sum_39 = None
        view_115: "f32[384][1]cuda:0" = torch.ops.aten.view.default(unsqueeze_67, [384]);  unsqueeze_67 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        mul_338: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_337, primals_1)
        mul_339: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_337, rsqrt);  mul_337 = None
        sum_40: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.sum.dim_IntList(mul_338, [1], True);  mul_338 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_89: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_88, mul_339);  add_88 = mul_339 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        pow_59: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(rsqrt, 3);  rsqrt = None
        mul_340: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.mul.Scalar(sum_40, -0.5);  sum_40 = None
        mul_341: "f32[s1, 1][1, 1]cuda:0" = torch.ops.aten.mul.Tensor(mul_340, pow_59);  mul_340 = pow_59 = None
        expand_19: "f32[s1, 384][1, 0]cuda:0" = torch.ops.aten.expand.default(mul_341, [-1, 384]);  mul_341 = None
        div_19: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.div.Scalar(expand_19, 384);  expand_19 = None
        pow_60: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.pow.Tensor_Scalar(primals_1, 1.0);  primals_1 = None
        mul_342: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Scalar(pow_60, 2.0);  pow_60 = None
        mul_343: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mul.Tensor(div_19, mul_342);  div_19 = mul_342 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/normalize.py:28 in _norm, code: return x * torch.rsqrt(x.pow(2).mean(-1, keepdim=True) + self.eps)
        add_90: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.add.Tensor(add_89, mul_343);  add_89 = mul_343 = None
        return (add_90, primals_2, primals_3, primals_4, None, view_115, mm_131, mm_129, view_110, mm_127, mm_125, view_109, mm_123, mm_121, view_104, mm_119, mm_117, view_103, mm_115, mm_113, view_98, mm_111, mm_109, view_97, mm_107, mm_105, view_92, mm_103, mm_101, add_70, primals_31, primals_32, primals_33, None, view_91, mm_99, mm_97, view_86, mm_95, mm_93, mm_91, view_81, mm_89, mm_87, view_80, mm_85, mm_83, view_75, mm_81, mm_79, mm_77, view_70, mm_75, mm_73, view_69, mm_71, mm_69, view_64, mm_67, mm_65, mm_63, view_59, mm_61, mm_59, view_58, mm_57, mm_55, view_53, mm_53, mm_51, mm_49, view_48, mm_47, mm_45)
        