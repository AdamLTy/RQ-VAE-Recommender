
import torch
from torch import tensor, device
import torch.fx as fx
from torch._dynamo.testing import rand_strided
from math import inf
import torch._inductor.inductor_prims

import torch._dynamo.config
import torch._inductor.config
import torch._functorch.config
import torch.fx.experimental._config
torch._dynamo.config.suppress_errors = True

torch._functorch.config.unlift_effect_tokens = True



isolate_fails_code_str = None



# torch version: 2.5.1+cu124
# torch cuda version: 12.4
# torch git version: a8d6afb511a69687bbb2b7e88a3cf67917e1697e


# CUDA Info: 
# nvcc: NVIDIA (R) Cuda compiler driver 
# Copyright (c) 2005-2024 NVIDIA Corporation 
# Built on Thu_Mar_28_02:18:24_PDT_2024 
# Cuda compilation tools, release 12.4, V12.4.131 
# Build cuda_12.4.r12.4/compiler.34097967_0 

# GPU Hardware Info: 
# NVIDIA L4 : 1 


from torch.nn import *
class Repro(torch.nn.Module):
    def __init__(self) -> None:
        super().__init__()

    
    
    def forward(self, primals_1, primals_2, primals_3, primals_4, primals_5, primals_6, primals_7, primals_8, primals_9, primals_10, primals_11, primals_12, primals_13, primals_14, primals_15, primals_16, primals_17, primals_18, primals_19, primals_20, primals_21, primals_22, primals_23, primals_24, primals_25, primals_26, primals_27, primals_28, primals_29):
        pow_1 = torch.ops.aten.pow.Tensor_Scalar(primals_1, 2)
        mean = torch.ops.aten.mean.dim(pow_1, [1], True);  pow_1 = None
        add = torch.ops.aten.add.Tensor(mean, 1e-06);  mean = None
        rsqrt = torch.ops.aten.rsqrt.default(add);  add = None
        mul = torch.ops.aten.mul.Tensor(primals_1, rsqrt)
        mul_1 = torch.ops.aten.mul.Tensor(mul, primals_6);  mul = None
        sym_size_int = torch.ops.aten.sym_size.int(primals_1, 0)
        inductor_seeds_default = torch.ops.prims.inductor_seeds.default(12, device(type='cuda', index=0))
        inductor_lookup_seed_default = torch.ops.prims.inductor_lookup_seed.default(inductor_seeds_default, 0)
        inductor_random_default_11 = torch.ops.prims.inductor_random.default([sym_size_int, 384], inductor_lookup_seed_default, 'rand');  inductor_lookup_seed_default = None
        gt = torch.ops.aten.gt.Scalar(inductor_random_default_11, 0.3);  inductor_random_default_11 = None
        mul_2 = torch.ops.aten.mul.Tensor(gt, mul_1);  mul_1 = None
        mul_3 = torch.ops.aten.mul.Tensor(mul_2, 1.4285714285714286);  mul_2 = None
        permute = torch.ops.aten.permute.default(primals_7, [1, 0])
        mm = torch.ops.aten.mm.default(mul_3, permute);  permute = None
        split = torch.ops.aten.split.Tensor(mm, 384, 1);  mm = None
        getitem = split[0]
        getitem_1 = split[1]
        getitem_2 = split[2];  split = None
        view = torch.ops.aten.view.default(getitem, [sym_size_int, 6, 64]);  getitem = None
        permute_1 = torch.ops.aten.permute.default(view, [1, 0, 2]);  view = None
        view_1 = torch.ops.aten.view.default(getitem_1, [sym_size_int, 6, 64]);  getitem_1 = None
        permute_2 = torch.ops.aten.permute.default(view_1, [1, 0, 2]);  view_1 = None
        view_2 = torch.ops.aten.view.default(getitem_2, [sym_size_int, 6, 64]);  getitem_2 = None
        permute_3 = torch.ops.aten.permute.default(view_2, [1, 0, 2]);  view_2 = None
        permute_4 = torch.ops.aten.permute.default(permute_1, [1, 0, 2]);  permute_1 = None
        permute_5 = torch.ops.aten.permute.default(permute_2, [1, 0, 2]);  permute_2 = None
        permute_6 = torch.ops.aten.permute.default(permute_3, [1, 0, 2]);  permute_3 = None
        convert_element_type = torch.ops.prims.convert_element_type.default(primals_2, torch.int32)
        unsqueeze = torch.ops.aten.unsqueeze.default(permute_4, 0);  permute_4 = None
        unsqueeze_1 = torch.ops.aten.unsqueeze.default(permute_5, 0);  permute_5 = None
        unsqueeze_2 = torch.ops.aten.unsqueeze.default(permute_6, 0);  permute_6 = None
        sym_size_int_1 = torch.ops.aten.sym_size.int(primals_4, 0)
        _efficient_attention_forward = torch.ops.aten._efficient_attention_forward.default(unsqueeze, unsqueeze_1, unsqueeze_2, None, convert_element_type, convert_element_type, sym_size_int_1, sym_size_int_1, 0.0, 0, True)
        getitem_3 = _efficient_attention_forward[0]
        getitem_4 = _efficient_attention_forward[1]
        getitem_5 = _efficient_attention_forward[2]
        getitem_6 = _efficient_attention_forward[3];  _efficient_attention_forward = None
        squeeze = torch.ops.aten.squeeze.dim(getitem_3, 0)
        permute_7 = torch.ops.aten.permute.default(squeeze, [1, 0, 2]);  squeeze = None
        permute_8 = torch.ops.aten.permute.default(permute_7, [1, 0, 2]);  permute_7 = None
        view_3 = torch.ops.aten.view.default(permute_8, [sym_size_int, 384]);  permute_8 = None
        permute_9 = torch.ops.aten.permute.default(primals_8, [1, 0])
        mm_1 = torch.ops.aten.mm.default(view_3, permute_9);  view_3 = permute_9 = None
        add_1 = torch.ops.aten.add.Tensor(primals_1, mm_1)
        pow_2 = torch.ops.aten.pow.Tensor_Scalar(add_1, 2)
        mean_1 = torch.ops.aten.mean.dim(pow_2, [1], True);  pow_2 = None
        add_2 = torch.ops.aten.add.Tensor(mean_1, 1e-06);  mean_1 = None
        rsqrt_1 = torch.ops.aten.rsqrt.default(add_2);  add_2 = None
        mul_4 = torch.ops.aten.mul.Tensor(add_1, rsqrt_1)
        mul_5 = torch.ops.aten.mul.Tensor(mul_4, primals_9);  mul_4 = None
        permute_10 = torch.ops.aten.permute.default(primals_10, [1, 0])
        mm_2 = torch.ops.aten.mm.default(mul_5, permute_10);  permute_10 = None
        sigmoid = torch.ops.aten.sigmoid.default(mm_2)
        mul_6 = torch.ops.aten.mul.Tensor(mm_2, sigmoid);  sigmoid = None
        inductor_lookup_seed_default_1 = torch.ops.prims.inductor_lookup_seed.default(inductor_seeds_default, 1)
        inductor_random_default_10 = torch.ops.prims.inductor_random.default([sym_size_int, 1024], inductor_lookup_seed_default_1, 'rand');  inductor_lookup_seed_default_1 = None
        gt_1 = torch.ops.aten.gt.Scalar(inductor_random_default_10, 0.3);  inductor_random_default_10 = None
        mul_7 = torch.ops.aten.mul.Tensor(gt_1, mul_6);  mul_6 = None
        mul_8 = torch.ops.aten.mul.Tensor(mul_7, 1.4285714285714286);  mul_7 = None
        permute_11 = torch.ops.aten.permute.default(primals_11, [1, 0])
        mm_3 = torch.ops.aten.mm.default(mul_8, permute_11);  permute_11 = None
        inductor_lookup_seed_default_2 = torch.ops.prims.inductor_lookup_seed.default(inductor_seeds_default, 2)
        inductor_random_default_9 = torch.ops.prims.inductor_random.default([sym_size_int, 384], inductor_lookup_seed_default_2, 'rand');  inductor_lookup_seed_default_2 = None
        gt_2 = torch.ops.aten.gt.Scalar(inductor_random_default_9, 0.3);  inductor_random_default_9 = None
        mul_9 = torch.ops.aten.mul.Tensor(gt_2, mm_3);  mm_3 = None
        mul_10 = torch.ops.aten.mul.Tensor(mul_9, 1.4285714285714286);  mul_9 = None
        add_3 = torch.ops.aten.add.Tensor(add_1, mul_10);  add_1 = mul_10 = None
        pow_3 = torch.ops.aten.pow.Tensor_Scalar(add_3, 2)
        mean_2 = torch.ops.aten.mean.dim(pow_3, [1], True);  pow_3 = None
        add_4 = torch.ops.aten.add.Tensor(mean_2, 1e-06);  mean_2 = None
        rsqrt_2 = torch.ops.aten.rsqrt.default(add_4);  add_4 = None
        mul_11 = torch.ops.aten.mul.Tensor(add_3, rsqrt_2)
        mul_12 = torch.ops.aten.mul.Tensor(mul_11, primals_12);  mul_11 = None
        inductor_lookup_seed_default_3 = torch.ops.prims.inductor_lookup_seed.default(inductor_seeds_default, 3)
        inductor_random_default_8 = torch.ops.prims.inductor_random.default([sym_size_int, 384], inductor_lookup_seed_default_3, 'rand');  inductor_lookup_seed_default_3 = None
        gt_3 = torch.ops.aten.gt.Scalar(inductor_random_default_8, 0.3);  inductor_random_default_8 = None
        mul_13 = torch.ops.aten.mul.Tensor(gt_3, mul_12);  mul_12 = None
        mul_14 = torch.ops.aten.mul.Tensor(mul_13, 1.4285714285714286);  mul_13 = None
        permute_12 = torch.ops.aten.permute.default(primals_13, [1, 0])
        mm_4 = torch.ops.aten.mm.default(mul_14, permute_12);  permute_12 = None
        split_1 = torch.ops.aten.split.Tensor(mm_4, 384, 1);  mm_4 = None
        getitem_9 = split_1[0]
        getitem_10 = split_1[1]
        getitem_11 = split_1[2];  split_1 = None
        view_4 = torch.ops.aten.view.default(getitem_9, [sym_size_int, 6, 64]);  getitem_9 = None
        permute_13 = torch.ops.aten.permute.default(view_4, [1, 0, 2]);  view_4 = None
        view_5 = torch.ops.aten.view.default(getitem_10, [sym_size_int, 6, 64]);  getitem_10 = None
        permute_14 = torch.ops.aten.permute.default(view_5, [1, 0, 2]);  view_5 = None
        view_6 = torch.ops.aten.view.default(getitem_11, [sym_size_int, 6, 64]);  getitem_11 = None
        permute_15 = torch.ops.aten.permute.default(view_6, [1, 0, 2]);  view_6 = None
        permute_16 = torch.ops.aten.permute.default(permute_13, [1, 0, 2]);  permute_13 = None
        permute_17 = torch.ops.aten.permute.default(permute_14, [1, 0, 2]);  permute_14 = None
        permute_18 = torch.ops.aten.permute.default(permute_15, [1, 0, 2]);  permute_15 = None
        convert_element_type_2 = torch.ops.prims.convert_element_type.default(primals_2, torch.int32)
        unsqueeze_3 = torch.ops.aten.unsqueeze.default(permute_16, 0);  permute_16 = None
        unsqueeze_4 = torch.ops.aten.unsqueeze.default(permute_17, 0);  permute_17 = None
        unsqueeze_5 = torch.ops.aten.unsqueeze.default(permute_18, 0);  permute_18 = None
        _efficient_attention_forward_1 = torch.ops.aten._efficient_attention_forward.default(unsqueeze_3, unsqueeze_4, unsqueeze_5, None, convert_element_type_2, convert_element_type_2, sym_size_int_1, sym_size_int_1, 0.0, 0, True)
        getitem_12 = _efficient_attention_forward_1[0]
        getitem_13 = _efficient_attention_forward_1[1]
        getitem_14 = _efficient_attention_forward_1[2]
        getitem_15 = _efficient_attention_forward_1[3];  _efficient_attention_forward_1 = None
        squeeze_1 = torch.ops.aten.squeeze.dim(getitem_12, 0)
        permute_19 = torch.ops.aten.permute.default(squeeze_1, [1, 0, 2]);  squeeze_1 = None
        permute_20 = torch.ops.aten.permute.default(permute_19, [1, 0, 2]);  permute_19 = None
        view_7 = torch.ops.aten.view.default(permute_20, [sym_size_int, 384]);  permute_20 = None
        permute_21 = torch.ops.aten.permute.default(primals_14, [1, 0])
        mm_5 = torch.ops.aten.mm.default(view_7, permute_21);  view_7 = permute_21 = None
        add_5 = torch.ops.aten.add.Tensor(add_3, mm_5);  mm_5 = None
        pow_4 = torch.ops.aten.pow.Tensor_Scalar(add_5, 2)
        mean_3 = torch.ops.aten.mean.dim(pow_4, [1], True);  pow_4 = None
        add_6 = torch.ops.aten.add.Tensor(mean_3, 1e-06);  mean_3 = None
        rsqrt_3 = torch.ops.aten.rsqrt.default(add_6);  add_6 = None
        mul_15 = torch.ops.aten.mul.Tensor(add_5, rsqrt_3)
        mul_16 = torch.ops.aten.mul.Tensor(mul_15, primals_15);  mul_15 = None
        permute_22 = torch.ops.aten.permute.default(primals_16, [1, 0])
        mm_6 = torch.ops.aten.mm.default(mul_16, permute_22);  permute_22 = None
        sigmoid_1 = torch.ops.aten.sigmoid.default(mm_6)
        mul_17 = torch.ops.aten.mul.Tensor(mm_6, sigmoid_1);  sigmoid_1 = None
        inductor_lookup_seed_default_4 = torch.ops.prims.inductor_lookup_seed.default(inductor_seeds_default, 4)
        inductor_random_default_7 = torch.ops.prims.inductor_random.default([sym_size_int, 1024], inductor_lookup_seed_default_4, 'rand');  inductor_lookup_seed_default_4 = None
        gt_4 = torch.ops.aten.gt.Scalar(inductor_random_default_7, 0.3);  inductor_random_default_7 = None
        mul_18 = torch.ops.aten.mul.Tensor(gt_4, mul_17);  mul_17 = None
        mul_19 = torch.ops.aten.mul.Tensor(mul_18, 1.4285714285714286);  mul_18 = None
        permute_23 = torch.ops.aten.permute.default(primals_17, [1, 0])
        mm_7 = torch.ops.aten.mm.default(mul_19, permute_23);  permute_23 = None
        inductor_lookup_seed_default_5 = torch.ops.prims.inductor_lookup_seed.default(inductor_seeds_default, 5)
        inductor_random_default_6 = torch.ops.prims.inductor_random.default([sym_size_int, 384], inductor_lookup_seed_default_5, 'rand');  inductor_lookup_seed_default_5 = None
        gt_5 = torch.ops.aten.gt.Scalar(inductor_random_default_6, 0.3);  inductor_random_default_6 = None
        mul_20 = torch.ops.aten.mul.Tensor(gt_5, mm_7);  mm_7 = None
        mul_21 = torch.ops.aten.mul.Tensor(mul_20, 1.4285714285714286);  mul_20 = None
        add_7 = torch.ops.aten.add.Tensor(add_5, mul_21);  mul_21 = None
        pow_5 = torch.ops.aten.pow.Tensor_Scalar(add_7, 2)
        mean_4 = torch.ops.aten.mean.dim(pow_5, [1], True);  pow_5 = None
        add_8 = torch.ops.aten.add.Tensor(mean_4, 1e-06);  mean_4 = None
        rsqrt_4 = torch.ops.aten.rsqrt.default(add_8);  add_8 = None
        mul_22 = torch.ops.aten.mul.Tensor(add_7, rsqrt_4)
        mul_23 = torch.ops.aten.mul.Tensor(mul_22, primals_18);  mul_22 = None
        inductor_lookup_seed_default_6 = torch.ops.prims.inductor_lookup_seed.default(inductor_seeds_default, 6)
        inductor_random_default_5 = torch.ops.prims.inductor_random.default([sym_size_int, 384], inductor_lookup_seed_default_6, 'rand');  inductor_lookup_seed_default_6 = None
        gt_6 = torch.ops.aten.gt.Scalar(inductor_random_default_5, 0.3);  inductor_random_default_5 = None
        mul_24 = torch.ops.aten.mul.Tensor(gt_6, mul_23);  mul_23 = None
        mul_25 = torch.ops.aten.mul.Tensor(mul_24, 1.4285714285714286);  mul_24 = None
        permute_24 = torch.ops.aten.permute.default(primals_19, [1, 0])
        mm_8 = torch.ops.aten.mm.default(mul_25, permute_24);  permute_24 = None
        split_2 = torch.ops.aten.split.Tensor(mm_8, 384, 1);  mm_8 = None
        getitem_18 = split_2[0]
        getitem_19 = split_2[1]
        getitem_20 = split_2[2];  split_2 = None
        view_8 = torch.ops.aten.view.default(getitem_18, [sym_size_int, 6, 64]);  getitem_18 = None
        permute_25 = torch.ops.aten.permute.default(view_8, [1, 0, 2]);  view_8 = None
        view_9 = torch.ops.aten.view.default(getitem_19, [sym_size_int, 6, 64]);  getitem_19 = None
        permute_26 = torch.ops.aten.permute.default(view_9, [1, 0, 2]);  view_9 = None
        view_10 = torch.ops.aten.view.default(getitem_20, [sym_size_int, 6, 64]);  getitem_20 = None
        permute_27 = torch.ops.aten.permute.default(view_10, [1, 0, 2]);  view_10 = None
        permute_28 = torch.ops.aten.permute.default(permute_25, [1, 0, 2]);  permute_25 = None
        permute_29 = torch.ops.aten.permute.default(permute_26, [1, 0, 2]);  permute_26 = None
        permute_30 = torch.ops.aten.permute.default(permute_27, [1, 0, 2]);  permute_27 = None
        convert_element_type_4 = torch.ops.prims.convert_element_type.default(primals_2, torch.int32)
        unsqueeze_6 = torch.ops.aten.unsqueeze.default(permute_28, 0);  permute_28 = None
        unsqueeze_7 = torch.ops.aten.unsqueeze.default(permute_29, 0);  permute_29 = None
        unsqueeze_8 = torch.ops.aten.unsqueeze.default(permute_30, 0);  permute_30 = None
        _efficient_attention_forward_2 = torch.ops.aten._efficient_attention_forward.default(unsqueeze_6, unsqueeze_7, unsqueeze_8, None, convert_element_type_4, convert_element_type_4, sym_size_int_1, sym_size_int_1, 0.0, 0, True)
        getitem_21 = _efficient_attention_forward_2[0]
        getitem_22 = _efficient_attention_forward_2[1]
        getitem_23 = _efficient_attention_forward_2[2]
        getitem_24 = _efficient_attention_forward_2[3];  _efficient_attention_forward_2 = None
        squeeze_2 = torch.ops.aten.squeeze.dim(getitem_21, 0)
        permute_31 = torch.ops.aten.permute.default(squeeze_2, [1, 0, 2]);  squeeze_2 = None
        permute_32 = torch.ops.aten.permute.default(permute_31, [1, 0, 2]);  permute_31 = None
        view_11 = torch.ops.aten.view.default(permute_32, [sym_size_int, 384]);  permute_32 = None
        permute_33 = torch.ops.aten.permute.default(primals_20, [1, 0])
        mm_9 = torch.ops.aten.mm.default(view_11, permute_33);  view_11 = permute_33 = None
        add_9 = torch.ops.aten.add.Tensor(add_7, mm_9);  mm_9 = None
        pow_6 = torch.ops.aten.pow.Tensor_Scalar(add_9, 2)
        mean_5 = torch.ops.aten.mean.dim(pow_6, [1], True);  pow_6 = None
        add_10 = torch.ops.aten.add.Tensor(mean_5, 1e-06);  mean_5 = None
        rsqrt_5 = torch.ops.aten.rsqrt.default(add_10);  add_10 = None
        mul_26 = torch.ops.aten.mul.Tensor(add_9, rsqrt_5)
        mul_27 = torch.ops.aten.mul.Tensor(mul_26, primals_21);  mul_26 = None
        permute_34 = torch.ops.aten.permute.default(primals_22, [1, 0])
        mm_10 = torch.ops.aten.mm.default(mul_27, permute_34);  permute_34 = None
        sigmoid_2 = torch.ops.aten.sigmoid.default(mm_10)
        mul_28 = torch.ops.aten.mul.Tensor(mm_10, sigmoid_2);  sigmoid_2 = None
        inductor_lookup_seed_default_7 = torch.ops.prims.inductor_lookup_seed.default(inductor_seeds_default, 7)
        inductor_random_default_4 = torch.ops.prims.inductor_random.default([sym_size_int, 1024], inductor_lookup_seed_default_7, 'rand');  inductor_lookup_seed_default_7 = None
        gt_7 = torch.ops.aten.gt.Scalar(inductor_random_default_4, 0.3);  inductor_random_default_4 = None
        mul_29 = torch.ops.aten.mul.Tensor(gt_7, mul_28);  mul_28 = None
        mul_30 = torch.ops.aten.mul.Tensor(mul_29, 1.4285714285714286);  mul_29 = None
        permute_35 = torch.ops.aten.permute.default(primals_23, [1, 0])
        mm_11 = torch.ops.aten.mm.default(mul_30, permute_35);  permute_35 = None
        inductor_lookup_seed_default_8 = torch.ops.prims.inductor_lookup_seed.default(inductor_seeds_default, 8)
        inductor_random_default_3 = torch.ops.prims.inductor_random.default([sym_size_int, 384], inductor_lookup_seed_default_8, 'rand');  inductor_lookup_seed_default_8 = None
        gt_8 = torch.ops.aten.gt.Scalar(inductor_random_default_3, 0.3);  inductor_random_default_3 = None
        mul_31 = torch.ops.aten.mul.Tensor(gt_8, mm_11);  mm_11 = None
        mul_32 = torch.ops.aten.mul.Tensor(mul_31, 1.4285714285714286);  mul_31 = None
        add_11 = torch.ops.aten.add.Tensor(add_9, mul_32);  mul_32 = None
        pow_7 = torch.ops.aten.pow.Tensor_Scalar(add_11, 2)
        mean_6 = torch.ops.aten.mean.dim(pow_7, [1], True);  pow_7 = None
        add_12 = torch.ops.aten.add.Tensor(mean_6, 1e-06);  mean_6 = None
        rsqrt_6 = torch.ops.aten.rsqrt.default(add_12);  add_12 = None
        mul_33 = torch.ops.aten.mul.Tensor(add_11, rsqrt_6)
        mul_34 = torch.ops.aten.mul.Tensor(mul_33, primals_24);  mul_33 = None
        inductor_lookup_seed_default_9 = torch.ops.prims.inductor_lookup_seed.default(inductor_seeds_default, 9)
        inductor_random_default_2 = torch.ops.prims.inductor_random.default([sym_size_int, 384], inductor_lookup_seed_default_9, 'rand');  inductor_lookup_seed_default_9 = None
        gt_9 = torch.ops.aten.gt.Scalar(inductor_random_default_2, 0.3);  inductor_random_default_2 = None
        mul_35 = torch.ops.aten.mul.Tensor(gt_9, mul_34);  mul_34 = None
        mul_36 = torch.ops.aten.mul.Tensor(mul_35, 1.4285714285714286);  mul_35 = None
        permute_36 = torch.ops.aten.permute.default(primals_25, [1, 0])
        mm_12 = torch.ops.aten.mm.default(mul_36, permute_36);  permute_36 = None
        split_3 = torch.ops.aten.split.Tensor(mm_12, 384, 1);  mm_12 = None
        getitem_27 = split_3[0]
        getitem_28 = split_3[1]
        getitem_29 = split_3[2];  split_3 = None
        view_12 = torch.ops.aten.view.default(getitem_27, [sym_size_int, 6, 64]);  getitem_27 = None
        permute_37 = torch.ops.aten.permute.default(view_12, [1, 0, 2]);  view_12 = None
        view_13 = torch.ops.aten.view.default(getitem_28, [sym_size_int, 6, 64]);  getitem_28 = None
        permute_38 = torch.ops.aten.permute.default(view_13, [1, 0, 2]);  view_13 = None
        view_14 = torch.ops.aten.view.default(getitem_29, [sym_size_int, 6, 64]);  getitem_29 = None
        permute_39 = torch.ops.aten.permute.default(view_14, [1, 0, 2]);  view_14 = None
        permute_40 = torch.ops.aten.permute.default(permute_37, [1, 0, 2]);  permute_37 = None
        permute_41 = torch.ops.aten.permute.default(permute_38, [1, 0, 2]);  permute_38 = None
        permute_42 = torch.ops.aten.permute.default(permute_39, [1, 0, 2]);  permute_39 = None
        convert_element_type_6 = torch.ops.prims.convert_element_type.default(primals_2, torch.int32)
        unsqueeze_9 = torch.ops.aten.unsqueeze.default(permute_40, 0);  permute_40 = None
        unsqueeze_10 = torch.ops.aten.unsqueeze.default(permute_41, 0);  permute_41 = None
        unsqueeze_11 = torch.ops.aten.unsqueeze.default(permute_42, 0);  permute_42 = None
        _efficient_attention_forward_3 = torch.ops.aten._efficient_attention_forward.default(unsqueeze_9, unsqueeze_10, unsqueeze_11, None, convert_element_type_6, convert_element_type_6, sym_size_int_1, sym_size_int_1, 0.0, 0, True)
        getitem_30 = _efficient_attention_forward_3[0]
        getitem_31 = _efficient_attention_forward_3[1]
        getitem_32 = _efficient_attention_forward_3[2]
        getitem_33 = _efficient_attention_forward_3[3];  _efficient_attention_forward_3 = None
        squeeze_3 = torch.ops.aten.squeeze.dim(getitem_30, 0)
        permute_43 = torch.ops.aten.permute.default(squeeze_3, [1, 0, 2]);  squeeze_3 = None
        permute_44 = torch.ops.aten.permute.default(permute_43, [1, 0, 2]);  permute_43 = None
        view_15 = torch.ops.aten.view.default(permute_44, [sym_size_int, 384]);  permute_44 = None
        permute_45 = torch.ops.aten.permute.default(primals_26, [1, 0])
        mm_13 = torch.ops.aten.mm.default(view_15, permute_45);  view_15 = permute_45 = None
        add_13 = torch.ops.aten.add.Tensor(add_11, mm_13);  mm_13 = None
        pow_8 = torch.ops.aten.pow.Tensor_Scalar(add_13, 2)
        mean_7 = torch.ops.aten.mean.dim(pow_8, [1], True);  pow_8 = None
        add_14 = torch.ops.aten.add.Tensor(mean_7, 1e-06);  mean_7 = None
        rsqrt_7 = torch.ops.aten.rsqrt.default(add_14);  add_14 = None
        mul_37 = torch.ops.aten.mul.Tensor(add_13, rsqrt_7)
        mul_38 = torch.ops.aten.mul.Tensor(mul_37, primals_27);  mul_37 = None
        permute_46 = torch.ops.aten.permute.default(primals_28, [1, 0])
        mm_14 = torch.ops.aten.mm.default(mul_38, permute_46);  permute_46 = None
        sigmoid_3 = torch.ops.aten.sigmoid.default(mm_14)
        mul_39 = torch.ops.aten.mul.Tensor(mm_14, sigmoid_3);  sigmoid_3 = None
        inductor_lookup_seed_default_10 = torch.ops.prims.inductor_lookup_seed.default(inductor_seeds_default, 10)
        inductor_random_default_1 = torch.ops.prims.inductor_random.default([sym_size_int, 1024], inductor_lookup_seed_default_10, 'rand');  inductor_lookup_seed_default_10 = None
        gt_10 = torch.ops.aten.gt.Scalar(inductor_random_default_1, 0.3);  inductor_random_default_1 = None
        mul_40 = torch.ops.aten.mul.Tensor(gt_10, mul_39);  mul_39 = None
        mul_41 = torch.ops.aten.mul.Tensor(mul_40, 1.4285714285714286);  mul_40 = None
        permute_47 = torch.ops.aten.permute.default(primals_29, [1, 0])
        mm_15 = torch.ops.aten.mm.default(mul_41, permute_47);  permute_47 = None
        inductor_lookup_seed_default_11 = torch.ops.prims.inductor_lookup_seed.default(inductor_seeds_default, 11);  inductor_seeds_default = None
        inductor_random_default = torch.ops.prims.inductor_random.default([sym_size_int, 384], inductor_lookup_seed_default_11, 'rand');  inductor_lookup_seed_default_11 = None
        gt_11 = torch.ops.aten.gt.Scalar(inductor_random_default, 0.3);  inductor_random_default = None
        mul_42 = torch.ops.aten.mul.Tensor(gt_11, mm_15);  mm_15 = None
        mul_43 = torch.ops.aten.mul.Tensor(mul_42, 1.4285714285714286);  mul_42 = None
        add_15 = torch.ops.aten.add.Tensor(add_13, mul_43);  mul_43 = None
        return (add_15, primals_2, primals_3, primals_4, primals_1, primals_6, primals_7, primals_8, primals_9, primals_10, primals_11, primals_12, primals_13, primals_14, primals_15, primals_16, primals_17, primals_18, primals_19, primals_20, primals_21, primals_22, primals_23, primals_24, primals_25, primals_26, primals_27, primals_28, primals_29, rsqrt, gt, mul_3, convert_element_type, unsqueeze, unsqueeze_1, unsqueeze_2, getitem_3, getitem_4, getitem_5, getitem_6, mm_1, rsqrt_1, mul_5, mm_2, gt_1, mul_8, gt_2, add_3, rsqrt_2, gt_3, mul_14, convert_element_type_2, unsqueeze_3, unsqueeze_4, unsqueeze_5, getitem_12, getitem_13, getitem_14, getitem_15, add_5, rsqrt_3, mul_16, mm_6, gt_4, mul_19, gt_5, add_7, rsqrt_4, gt_6, mul_25, convert_element_type_4, unsqueeze_6, unsqueeze_7, unsqueeze_8, getitem_21, getitem_22, getitem_23, getitem_24, add_9, rsqrt_5, mul_27, mm_10, gt_7, mul_30, gt_8, add_11, rsqrt_6, gt_9, mul_36, convert_element_type_6, unsqueeze_9, unsqueeze_10, unsqueeze_11, getitem_30, getitem_31, getitem_32, getitem_33, add_13, rsqrt_7, mul_38, mm_14, gt_10, mul_41, gt_11, sym_size_int, sym_size_int_1)
        
def load_args(reader):
    buf0 = reader.storage(None, 1536*s1, device=device(type='cuda', index=0))
    reader.tensor(buf0, (s1, 384), is_leaf=True)  # primals_1
    buf1 = reader.storage(None, 2056, device=device(type='cuda', index=0), dtype_hint=torch.int64)
    reader.tensor(buf1, (257,), dtype=torch.int64, is_leaf=True)  # primals_2
    buf2 = reader.storage(None, 0, device=device(type='cuda', index=0))
    reader.tensor(buf2, (s3, 0), is_leaf=True)  # primals_3
    buf3 = reader.storage(None, 0, device=device(type='cuda', index=0))
    reader.tensor(buf3, (s4, 0), is_leaf=True)  # primals_4
    reader.symint(j1)  # primals_5
    buf4 = reader.storage(None, 1536, device=device(type='cuda', index=0))
    reader.tensor(buf4, (384,), is_leaf=True)  # primals_6
    buf5 = reader.storage(None, 1769472, device=device(type='cuda', index=0))
    reader.tensor(buf5, (1152, 384), is_leaf=True)  # primals_7
    buf6 = reader.storage(None, 589824, device=device(type='cuda', index=0))
    reader.tensor(buf6, (384, 384), is_leaf=True)  # primals_8
    buf7 = reader.storage(None, 1536, device=device(type='cuda', index=0))
    reader.tensor(buf7, (384,), is_leaf=True)  # primals_9
    buf8 = reader.storage(None, 1572864, device=device(type='cuda', index=0))
    reader.tensor(buf8, (1024, 384), is_leaf=True)  # primals_10
    buf9 = reader.storage(None, 1572864, device=device(type='cuda', index=0))
    reader.tensor(buf9, (384, 1024), is_leaf=True)  # primals_11
    buf10 = reader.storage(None, 1536, device=device(type='cuda', index=0))
    reader.tensor(buf10, (384,), is_leaf=True)  # primals_12
    buf11 = reader.storage(None, 1769472, device=device(type='cuda', index=0))
    reader.tensor(buf11, (1152, 384), is_leaf=True)  # primals_13
    buf12 = reader.storage(None, 589824, device=device(type='cuda', index=0))
    reader.tensor(buf12, (384, 384), is_leaf=True)  # primals_14
    buf13 = reader.storage(None, 1536, device=device(type='cuda', index=0))
    reader.tensor(buf13, (384,), is_leaf=True)  # primals_15
    buf14 = reader.storage(None, 1572864, device=device(type='cuda', index=0))
    reader.tensor(buf14, (1024, 384), is_leaf=True)  # primals_16
    buf15 = reader.storage(None, 1572864, device=device(type='cuda', index=0))
    reader.tensor(buf15, (384, 1024), is_leaf=True)  # primals_17
    buf16 = reader.storage(None, 1536, device=device(type='cuda', index=0))
    reader.tensor(buf16, (384,), is_leaf=True)  # primals_18
    buf17 = reader.storage(None, 1769472, device=device(type='cuda', index=0))
    reader.tensor(buf17, (1152, 384), is_leaf=True)  # primals_19
    buf18 = reader.storage(None, 589824, device=device(type='cuda', index=0))
    reader.tensor(buf18, (384, 384), is_leaf=True)  # primals_20
    buf19 = reader.storage(None, 1536, device=device(type='cuda', index=0))
    reader.tensor(buf19, (384,), is_leaf=True)  # primals_21
    buf20 = reader.storage(None, 1572864, device=device(type='cuda', index=0))
    reader.tensor(buf20, (1024, 384), is_leaf=True)  # primals_22
    buf21 = reader.storage(None, 1572864, device=device(type='cuda', index=0))
    reader.tensor(buf21, (384, 1024), is_leaf=True)  # primals_23
    buf22 = reader.storage(None, 1536, device=device(type='cuda', index=0))
    reader.tensor(buf22, (384,), is_leaf=True)  # primals_24
    buf23 = reader.storage(None, 1769472, device=device(type='cuda', index=0))
    reader.tensor(buf23, (1152, 384), is_leaf=True)  # primals_25
    buf24 = reader.storage(None, 589824, device=device(type='cuda', index=0))
    reader.tensor(buf24, (384, 384), is_leaf=True)  # primals_26
    buf25 = reader.storage(None, 1536, device=device(type='cuda', index=0))
    reader.tensor(buf25, (384,), is_leaf=True)  # primals_27
    buf26 = reader.storage(None, 1572864, device=device(type='cuda', index=0))
    reader.tensor(buf26, (1024, 384), is_leaf=True)  # primals_28
    buf27 = reader.storage(None, 1572864, device=device(type='cuda', index=0))
    reader.tensor(buf27, (384, 1024), is_leaf=True)  # primals_29
load_args._version = 0
mod = Repro()
if __name__ == '__main__':
    from torch._dynamo.repro.after_aot import run_repro
    with torch.no_grad():
        run_repro(mod, load_args, accuracy=False, command='run', save_dir=None, tracing_mode='symbolic', check_str=None)
        # To run it separately, do 
        # mod, args = run_repro(mod, load_args, accuracy=False, command='get_args', save_dir=None, tracing_mode='symbolic', check_str=None)
        # mod(*args)