
import torch
from torch import tensor, device
import torch.fx as fx
from torch._dynamo.testing import rand_strided
from math import inf
import torch._inductor.inductor_prims

import torch._dynamo.config
import torch._inductor.config
import torch._functorch.config
import torch.fx.experimental._config
torch._dynamo.config.suppress_errors = True

torch._functorch.config.unlift_effect_tokens = True



isolate_fails_code_str = None



# torch version: 2.5.1+cu124
# torch cuda version: 12.4
# torch git version: a8d6afb511a69687bbb2b7e88a3cf67917e1697e


# CUDA Info: 
# nvcc: NVIDIA (R) Cuda compiler driver 
# Copyright (c) 2005-2024 NVIDIA Corporation 
# Built on Thu_Mar_28_02:18:24_PDT_2024 
# Cuda compilation tools, release 12.4, V12.4.131 
# Build cuda_12.4.r12.4/compiler.34097967_0 

# GPU Hardware Info: 
# NVIDIA L4 : 1 


from torch.nn import *
class Repro(torch.nn.Module):
    def __init__(self) -> None:
        super().__init__()

    
    
    def forward(self, primals_1, primals_2, primals_3, primals_4, primals_5, primals_6, primals_7):
        permute = torch.ops.aten.permute.default(primals_6, [1, 0])
        mm = torch.ops.aten.mm.default(primals_1, permute);  permute = None
        sigmoid = torch.ops.aten.sigmoid.default(mm)
        mul = torch.ops.aten.mul.Tensor(mm, sigmoid);  sigmoid = None
        sym_size_int = torch.ops.aten.sym_size.int(primals_1, 0)
        inductor_seeds_default = torch.ops.prims.inductor_seeds.default(1, device(type='cuda', index=0))
        inductor_lookup_seed_default = torch.ops.prims.inductor_lookup_seed.default(inductor_seeds_default, 0);  inductor_seeds_default = None
        inductor_random_default = torch.ops.prims.inductor_random.default([sym_size_int, 1024], inductor_lookup_seed_default, 'rand');  inductor_lookup_seed_default = None
        gt = torch.ops.aten.gt.Scalar(inductor_random_default, 0.3);  inductor_random_default = None
        mul_1 = torch.ops.aten.mul.Tensor(gt, mul);  mul = None
        mul_2 = torch.ops.aten.mul.Tensor(mul_1, 1.4285714285714286);  mul_1 = None
        permute_1 = torch.ops.aten.permute.default(primals_7, [1, 0])
        mm_1 = torch.ops.aten.mm.default(mul_2, permute_1);  permute_1 = None
        return (mm_1, primals_2, primals_3, primals_4, primals_1, primals_6, primals_7, mm, gt, mul_2, sym_size_int)
        
def load_args(reader):
    buf0 = reader.storage(None, 1536*s1, device=device(type='cuda', index=0))
    reader.tensor(buf0, (s1, 384), is_leaf=True)  # primals_1
    buf1 = reader.storage(None, 2056, device=device(type='cuda', index=0), dtype_hint=torch.int64)
    reader.tensor(buf1, (257,), dtype=torch.int64, is_leaf=True)  # primals_2
    buf2 = reader.storage(None, 0, device=device(type='cuda', index=0))
    reader.tensor(buf2, (s3, 0), is_leaf=True)  # primals_3
    buf3 = reader.storage(None, 0, device=device(type='cuda', index=0))
    reader.tensor(buf3, (s4, 0), is_leaf=True)  # primals_4
    reader.symint(j1)  # primals_5
    buf4 = reader.storage(None, 1572864, device=device(type='cuda', index=0))
    reader.tensor(buf4, (1024, 384), is_leaf=True)  # primals_6
    buf5 = reader.storage(None, 1572864, device=device(type='cuda', index=0))
    reader.tensor(buf5, (384, 1024), is_leaf=True)  # primals_7
load_args._version = 0
mod = Repro()
if __name__ == '__main__':
    from torch._dynamo.repro.after_aot import run_repro
    with torch.no_grad():
        run_repro(mod, load_args, accuracy=False, command='run', save_dir=None, tracing_mode='symbolic', check_str=None)
        # To run it separately, do 
        # mod, args = run_repro(mod, load_args, accuracy=False, command='get_args', save_dir=None, tracing_mode='symbolic', check_str=None)
        # mod(*args)