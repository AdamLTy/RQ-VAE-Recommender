
import torch
from torch import tensor, device
import torch.fx as fx
from torch._dynamo.testing import rand_strided
from math import inf
import torch._inductor.inductor_prims

import torch._dynamo.config
import torch._inductor.config
import torch._functorch.config
import torch.fx.experimental._config
torch._dynamo.config.suppress_errors = True

torch._functorch.config.unlift_effect_tokens = True



isolate_fails_code_str = None



# torch version: 2.5.1+cu124
# torch cuda version: 12.4
# torch git version: a8d6afb511a69687bbb2b7e88a3cf67917e1697e


# CUDA Info: 
# nvcc: NVIDIA (R) Cuda compiler driver 
# Copyright (c) 2005-2024 NVIDIA Corporation 
# Built on Thu_Mar_28_02:18:24_PDT_2024 
# Cuda compilation tools, release 12.4, V12.4.131 
# Build cuda_12.4.r12.4/compiler.34097967_0 

# GPU Hardware Info: 
# NVIDIA L4 : 1 


from torch.nn import *
class Repro(torch.nn.Module):
    def __init__(self) -> None:
        super().__init__()

    
    
    def forward(self, primals_1, primals_2, primals_3, primals_4, primals_5, primals_6, primals_7, primals_8, primals_9, primals_10, primals_11, primals_12, primals_13, primals_14, primals_15):
        sym_size_int = torch.ops.aten.sym_size.int(primals_1, 0)
        view = torch.ops.aten.view.default(primals_1, [sym_size_int, 6, 64]);  primals_1 = None
        permute = torch.ops.aten.permute.default(view, [1, 0, 2]);  view = None
        view_1 = torch.ops.aten.view.default(primals_6, [sym_size_int, 6, 64]);  primals_6 = None
        permute_1 = torch.ops.aten.permute.default(view_1, [1, 0, 2]);  view_1 = None
        view_2 = torch.ops.aten.view.default(primals_11, [sym_size_int, 6, 64]);  primals_11 = None
        permute_2 = torch.ops.aten.permute.default(view_2, [1, 0, 2]);  view_2 = None
        permute_3 = torch.ops.aten.permute.default(permute, [1, 0, 2]);  permute = None
        permute_4 = torch.ops.aten.permute.default(permute_1, [1, 0, 2]);  permute_1 = None
        permute_5 = torch.ops.aten.permute.default(permute_2, [1, 0, 2]);  permute_2 = None
        convert_element_type = torch.ops.prims.convert_element_type.default(primals_12, torch.int32)
        unsqueeze = torch.ops.aten.unsqueeze.default(permute_3, 0);  permute_3 = None
        unsqueeze_1 = torch.ops.aten.unsqueeze.default(permute_4, 0);  permute_4 = None
        unsqueeze_2 = torch.ops.aten.unsqueeze.default(permute_5, 0);  permute_5 = None
        sym_size_int_1 = torch.ops.aten.sym_size.int(primals_4, 0);  primals_4 = None
        _efficient_attention_forward = torch.ops.aten._efficient_attention_forward.default(unsqueeze, unsqueeze_1, unsqueeze_2, None, convert_element_type, convert_element_type, sym_size_int_1, sym_size_int_1, 0.0, 0, True)
        getitem = _efficient_attention_forward[0]
        getitem_1 = _efficient_attention_forward[1]
        getitem_2 = _efficient_attention_forward[2]
        getitem_3 = _efficient_attention_forward[3];  _efficient_attention_forward = None
        squeeze = torch.ops.aten.squeeze.dim(getitem, 0)
        sym_size_int_2 = torch.ops.aten.sym_size.int(primals_3, 0);  primals_3 = None
        full = torch.ops.aten.full.default([sym_size_int_2, 0], 0, dtype = torch.float32, layout = torch.strided, device = device(type='cpu'), pin_memory = False);  sym_size_int_2 = None
        full_1 = torch.ops.aten.full.default([sym_size_int_1, 0], 0, dtype = torch.float32, layout = torch.strided, device = device(type='cpu'), pin_memory = False)
        permute_6 = torch.ops.aten.permute.default(squeeze, [1, 0, 2]);  squeeze = None
        permute_7 = torch.ops.aten.permute.default(permute_6, [1, 0, 2]);  permute_6 = None
        view_3 = torch.ops.aten.view.default(permute_7, [sym_size_int, 384]);  permute_7 = None
        return (view_3, primals_12, full, full_1, primals_12, primals_13, primals_14, convert_element_type, unsqueeze, unsqueeze_1, unsqueeze_2, getitem, getitem_1, getitem_2, getitem_3, sym_size_int, sym_size_int_1)
        
def load_args(reader):
    buf0 = reader.storage(None, 4608*s1, device=device(type='cuda', index=0))
    reader.tensor(buf0, (s1, 384), (1152, 1), is_leaf=True)  # primals_1
    buf1 = reader.storage(None, 2056, device=device(type='cuda', index=0), dtype_hint=torch.int64)
    reader.tensor(buf1, (257,), dtype=torch.int64, is_leaf=True)  # primals_2
    buf2 = reader.storage(None, 0, device=device(type='cuda', index=0))
    reader.tensor(buf2, (s3, 0), is_leaf=True)  # primals_3
    buf3 = reader.storage(None, 0, device=device(type='cuda', index=0))
    reader.tensor(buf3, (s4, 0), is_leaf=True)  # primals_4
    reader.symint(j1)  # primals_5
    reader.tensor(buf0, (s1, 384), (1152, 1), storage_offset=384, is_leaf=True)  # primals_6
    reader.tensor(buf1, (257,), dtype=torch.int64, is_leaf=True)  # primals_7
    reader.tensor(buf2, (s3, 0), is_leaf=True)  # primals_8
    reader.tensor(buf3, (s4, 0), is_leaf=True)  # primals_9
    reader.symint(j1)  # primals_10
    reader.tensor(buf0, (s1, 384), (1152, 1), storage_offset=768, is_leaf=True)  # primals_11
    reader.tensor(buf1, (257,), dtype=torch.int64, is_leaf=True)  # primals_12
    reader.tensor(buf2, (s3, 0), is_leaf=True)  # primals_13
    reader.tensor(buf3, (s4, 0), is_leaf=True)  # primals_14
    reader.symint(j1)  # primals_15
load_args._version = 0
mod = Repro()
if __name__ == '__main__':
    from torch._dynamo.repro.after_aot import run_repro
    with torch.no_grad():
        run_repro(mod, load_args, accuracy=False, command='run', save_dir=None, tracing_mode='symbolic', check_str=None)
        # To run it separately, do 
        # mod, args = run_repro(mod, load_args, accuracy=False, command='get_args', save_dir=None, tracing_mode='symbolic', check_str=None)
        # mod(*args)