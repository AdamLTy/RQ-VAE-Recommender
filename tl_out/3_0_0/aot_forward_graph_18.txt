class GraphModule(torch.nn.Module):
    def forward(self, primals_1: "i64[256, 80][80, 1]cuda:0", primals_2: "i64[256, 80][80, 1]cuda:0", primals_3: "b8[256, 80][80, 1]cuda:0", primals_4: "i64[256, 4][4, 1]cuda:0", primals_5: "i64[256, 4][4, 1]cuda:0", primals_6: "f32[1025, 128][128, 1]cuda:0"):
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/embedding/id_embedder.py:29 in forward, code: sem_ids = batch.token_type_ids*self.num_embeddings + batch.sem_ids
        mul: "i64[256, 80][80, 1]cuda:0" = torch.ops.aten.mul.Tensor(primals_1, 256);  primals_1 = None
        add: "i64[256, 80][80, 1]cuda:0" = torch.ops.aten.add.Tensor(mul, primals_2);  mul = primals_2 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/embedding/id_embedder.py:30 in forward, code: sem_ids[~batch.seq_mask] = self.padding_idx
        bitwise_not: "b8[256, 80][80, 1]cuda:0" = torch.ops.aten.bitwise_not.default(primals_3);  primals_3 = None
        full_default: "i64[][]cpu" = torch.ops.aten.full.default([], 1024, dtype = torch.int64, layout = torch.strided, device = device(type='cpu'), pin_memory = False)
        index_put: "i64[256, 80][80, 1]cuda:0" = torch.ops.aten.index_put.default(add, [bitwise_not], full_default);  add = bitwise_not = full_default = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/embedding/id_embedder.py:33 in forward, code: sem_ids_fut = batch.token_type_ids_fut*self.num_embeddings + batch.sem_ids_fut
        mul_1: "i64[256, 4][4, 1]cuda:0" = torch.ops.aten.mul.Tensor(primals_5, 256);  primals_5 = None
        add_1: "i64[256, 4][4, 1]cuda:0" = torch.ops.aten.add.Tensor(mul_1, primals_4);  mul_1 = primals_4 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/embedding/id_embedder.py:34 in forward, code: sem_ids_fut = self.emb(sem_ids_fut)
        embedding: "f32[256, 4, 128][512, 128, 1]cuda:0" = torch.ops.aten.embedding.default(primals_6, add_1, 1024)
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/embedding/id_embedder.py:38 in forward, code: seq=self.emb(sem_ids),
        embedding_1: "f32[256, 80, 128][10240, 128, 1]cuda:0" = torch.ops.aten.embedding.default(primals_6, index_put, 1024);  primals_6 = None
        return (embedding_1, embedding, index_put, add_1)
        