class GraphModule(torch.nn.Module):
    def forward(self, index_put: "i64[256, 80][80, 1]cuda:0", add_1: "i64[256, 4][4, 1]cuda:0", tangents_1: "f32[256, 80, 128][10240, 128, 1]cuda:0", tangents_2: "f32[256, 4, 128][512, 128, 1]cuda:0"):
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/embedding/id_embedder.py:38 in forward, code: seq=self.emb(sem_ids),
        eq: "b8[256, 80][80, 1]cuda:0" = torch.ops.aten.eq.Scalar(index_put, 1024)
        unsqueeze: "b8[256, 80, 1][80, 1, 1]cuda:0" = torch.ops.aten.unsqueeze.default(eq, -1);  eq = None
        full_default_1: "f32[][]cuda:0" = torch.ops.aten.full.default([], 0.0, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        where: "f32[256, 80, 128][10240, 128, 1]cuda:0" = torch.ops.aten.where.self(unsqueeze, full_default_1, tangents_1);  unsqueeze = tangents_1 = None
        full_default_2: "f32[1025, 128][128, 1]cuda:0" = torch.ops.aten.full.default([1025, 128], 0, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False)
        index_put_1: "f32[1025, 128][128, 1]cuda:0" = torch.ops.aten.index_put.default(full_default_2, [index_put], where, True);  index_put = where = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/embedding/id_embedder.py:34 in forward, code: sem_ids_fut = self.emb(sem_ids_fut)
        eq_1: "b8[256, 4][4, 1]cuda:0" = torch.ops.aten.eq.Scalar(add_1, 1024)
        unsqueeze_1: "b8[256, 4, 1][4, 1, 1]cuda:0" = torch.ops.aten.unsqueeze.default(eq_1, -1);  eq_1 = None
        where_1: "f32[256, 4, 128][512, 128, 1]cuda:0" = torch.ops.aten.where.self(unsqueeze_1, full_default_1, tangents_2);  unsqueeze_1 = full_default_1 = tangents_2 = None
        index_put_2: "f32[1025, 128][128, 1]cuda:0" = torch.ops.aten.index_put.default(full_default_2, [add_1], where_1, True);  full_default_2 = add_1 = where_1 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/embedding/id_embedder.py:34 in forward, code: sem_ids_fut = self.emb(sem_ids_fut)
        add_2: "f32[1025, 128][128, 1]cuda:0" = torch.ops.aten.add.Tensor(index_put_1, index_put_2);  index_put_1 = index_put_2 = None
        return (None, None, None, None, None, add_2)
        