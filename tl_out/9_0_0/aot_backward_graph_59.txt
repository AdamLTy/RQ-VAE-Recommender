class GraphModule(torch.nn.Module):
    def forward(self, sym_size_int: "Sym(s1)", sym_size_int_1: "Sym(s4)", primals_1: "f32[1152, 384][384, 1]cuda:0", primals_2: "f32[s1, 384][384, 1]cuda:0", primals_3: "i64[257][1]cuda:0", primals_4: "f32[s3, 0][1, 1]cuda:0", primals_5: "f32[s4, 0][1, 1]cuda:0", primals_7: "f32[384, 384][384, 1]cuda:0", convert_element_type: "i32[257][1]cuda:0", unsqueeze: "f32[1, s1, 6, 64][1152*s1, 1152, 64, 1]cuda:0", unsqueeze_1: "f32[1, s1, 6, 64][1152*s1, 1152, 64, 1]cuda:0", unsqueeze_2: "f32[1, s1, 6, 64][1152*s1, 1152, 64, 1]cuda:0", getitem_3: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0", getitem_4: "f32[256, 6, 32*CeilToInt(IntTrueDiv(s4, 32))][192*CeilToInt(IntTrueDiv(s4, 32)), 32*CeilToInt(IntTrueDiv(s4, 32)), 1]cuda:0", getitem_5: "i64[][]cuda:0", getitem_6: "i64[][]cuda:0", tangents_1: "f32[s1, 384][384, 1]cuda:0", tangents_2: "i64[257][1]cuda:0", tangents_3: "f32[s3, 0][1, 1]cpu", tangents_4: "f32[s4, 0][1, 1]cpu"):
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:231 in forward, code: context_vec = self.proj(context_vec)
        mm_2: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(tangents_1, primals_7);  primals_7 = None
        permute_10: "f32[384, s1][1, 384]cuda:0" = torch.ops.aten.permute.default(tangents_1, [1, 0]);  tangents_1 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:120 in jagged_forward, code: context_vec = F.scaled_dot_product_attention(
        squeeze: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_3, 0)
        permute_7: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(squeeze, [1, 0, 2]);  squeeze = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:123 in jagged_forward, code: context_vec = context_vec.transpose(1, 2).flatten(-2)
        permute_8: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_7, [1, 0, 2]);  permute_7 = None
        view_3: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_8, [sym_size_int, 384]);  permute_8 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:231 in forward, code: context_vec = self.proj(context_vec)
        mm_3: "f32[384, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_10, view_3);  permute_10 = view_3 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:123 in jagged_forward, code: context_vec = context_vec.transpose(1, 2).flatten(-2)
        view_4: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.view.default(mm_2, [sym_size_int, 6, 64]);  mm_2 = None
        permute_11: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(view_4, [1, 0, 2]);  view_4 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:120 in jagged_forward, code: context_vec = F.scaled_dot_product_attention(
        permute_12: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_11, [1, 0, 2]);  permute_11 = None
        unsqueeze_3: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = torch.ops.aten.unsqueeze.default(permute_12, 0);  permute_12 = None
        _efficient_attention_backward = torch.ops.aten._efficient_attention_backward.default(unsqueeze_3, unsqueeze, unsqueeze_1, unsqueeze_2, None, getitem_3, convert_element_type, convert_element_type, sym_size_int_1, sym_size_int_1, getitem_4, 0.0, getitem_5, getitem_6, 0, False);  unsqueeze_3 = unsqueeze = unsqueeze_1 = unsqueeze_2 = getitem_3 = convert_element_type = sym_size_int_1 = getitem_4 = getitem_5 = getitem_6 = None
        getitem_9: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = _efficient_attention_backward[0]
        getitem_10: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = _efficient_attention_backward[1]
        getitem_11: "f32[1, s1, 6, 64][384*s1, 384, 64, 1]cuda:0" = _efficient_attention_backward[2];  _efficient_attention_backward = None
        squeeze_1: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_11, 0);  getitem_11 = None
        squeeze_2: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_10, 0);  getitem_10 = None
        squeeze_3: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.squeeze.dim(getitem_9, 0);  getitem_9 = None
        permute_13: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(squeeze_1, [1, 0, 2]);  squeeze_1 = None
        permute_14: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(squeeze_2, [1, 0, 2]);  squeeze_2 = None
        permute_15: "f32[6, s1, 64][64, 384, 1]cuda:0" = torch.ops.aten.permute.default(squeeze_3, [1, 0, 2]);  squeeze_3 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:116 in jagged_forward, code: values = va.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        permute_16: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_13, [1, 0, 2]);  permute_13 = None
        view_5: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_16, [sym_size_int, 384]);  permute_16 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:115 in jagged_forward, code: keys = ke.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        permute_17: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_14, [1, 0, 2]);  permute_14 = None
        view_6: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_17, [sym_size_int, 384]);  permute_17 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:114 in jagged_forward, code: queries = qu.unflatten(-1, [self.num_heads, self.head_dim]).transpose(1, 2)
        permute_18: "f32[s1, 6, 64][384, 64, 1]cuda:0" = torch.ops.aten.permute.default(permute_15, [1, 0, 2]);  permute_15 = None
        view_7: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.view.default(permute_18, [sym_size_int, 384]);  permute_18 = None
        
         # File: /home/ec2-user/code/RQ-VAE-Recommender/modules/transformer/attention.py:200 in forward, code: queries, keys, values = self.qkv(x).chunk(3, dim=-1)
        full_2: "f32[s1, 1152][1152, 1]cuda:0" = torch.ops.aten.full.default([sym_size_int, 1152], 0, dtype = torch.float32, layout = torch.strided, device = device(type='cuda', index=0), pin_memory = False);  sym_size_int = None
        split_1 = torch.ops.aten.split.Tensor(full_2, 384, 1)
        getitem_13: "f32[s1, 384][1152, 1]cuda:0" = split_1[0];  split_1 = None
        copy: "f32[s1, 384][1152, 1]cuda:0" = torch.ops.aten.copy.default(getitem_13, view_7);  getitem_13 = view_7 = None
        slice_scatter: "f32[s1, 1152][1152, 1]cuda:0" = torch.ops.aten.slice_scatter.default(full_2, copy, 1, 0, 384);  full_2 = copy = None
        split_4 = torch.ops.aten.split.Tensor(slice_scatter, 384, 1)
        getitem_23: "f32[s1, 384][1152, 1]cuda:0" = split_4[1];  split_4 = None
        copy_1: "f32[s1, 384][1152, 1]cuda:0" = torch.ops.aten.copy.default(getitem_23, view_6);  getitem_23 = view_6 = None
        slice_scatter_1: "f32[s1, 1152][1152, 1]cuda:0" = torch.ops.aten.slice_scatter.default(slice_scatter, copy_1, 1, 384, 768);  slice_scatter = copy_1 = None
        split_7 = torch.ops.aten.split.Tensor(slice_scatter_1, 384, 1)
        getitem_33: "f32[s1, 384][1152, 1]cuda:0" = split_7[2];  split_7 = None
        copy_2: "f32[s1, 384][1152, 1]cuda:0" = torch.ops.aten.copy.default(getitem_33, view_5);  getitem_33 = view_5 = None
        slice_scatter_2: "f32[s1, 1152][1152, 1]cuda:0" = torch.ops.aten.slice_scatter.default(slice_scatter_1, copy_2, 1, 768, 1152);  slice_scatter_1 = copy_2 = None
        mm_4: "f32[s1, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(slice_scatter_2, primals_1);  primals_1 = None
        permute_20: "f32[1152, s1][1, 1152]cuda:0" = torch.ops.aten.permute.default(slice_scatter_2, [1, 0]);  slice_scatter_2 = None
        mm_5: "f32[1152, 384][384, 1]cuda:0" = torch.ops.aten.mm.default(permute_20, primals_2);  permute_20 = primals_2 = None
        return (mm_5, mm_4, primals_3, primals_4, primals_5, None, mm_3)
        